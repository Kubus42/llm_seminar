{
  "hash": "9792c318d39be6314e157b28ae5d8b74",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Lists and Loops\"\nformat:\n  html:\n    code-fold: false\njupyter: python3\n---\n\n\n\n\n\nIn Python, a list is one of the most versatile data structures. \nIt allows you to store multiple items in a single variable, like a collection of numbers, words, or any other kind of data. \nLists are extremely useful when working with NLP tasks, where you often need to manage and process large amounts of text, words, or other data.\n\nTo work efficiently with lists, loops are used to iterate over the elements. \nBy combining lists and loops, you can automate repetitive tasks and handle data efficiently. \nLet’s dive into how lists work and how to use loops to process them.\n\n\n\n### Lists in Python\n\nA list is an ordered collection of items, which can be of any type (numbers, strings, or even other lists). Lists are created using square brackets `[]`, and each item in the list is separated by a comma.\n\n#### Example:\n\n::: {#a861214e .cell execution_count=1}\n``` {.python .cell-code}\n# Creating a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits)  # Output: ['apple', 'banana', 'cherry']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apple', 'banana', 'cherry']\n```\n:::\n:::\n\n\nIn this example, we’ve created a list called `fruits` that contains three strings: `\"apple\"`, `\"banana\"`, and `\"cherry\"`.\n\n\n\n### Accessing List Elements\n\nYou can access individual elements in a list using indexing. Just like strings, list indexing starts at `0` for the first element.\n\n#### Example:\n\n::: {#2af0e417 .cell execution_count=2}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])  # Output: apple (first element)\nprint(fruits[1])  # Output: banana (second element)\nprint(fruits[-1])  # Output: cherry (last element using negative index)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple\nbanana\ncherry\n```\n:::\n:::\n\n\nIn this example, we access the first, second, and last elements of the list.\n\n\n\n### Modifying List Elements\n\nYou can change elements in a list by accessing them via their index and assigning a new value.\n\n#### Example:\n\n::: {#4ee51242 .cell execution_count=3}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfruits[1] = \"blueberry\"  # Changing 'banana' to 'blueberry'\nprint(fruits)  # Output: ['apple', 'blueberry', 'cherry']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apple', 'blueberry', 'cherry']\n```\n:::\n:::\n\n\nHere, the second item in the list, `\"banana\"`, is replaced with `\"blueberry\"`.\n\n\n\n### Adding and Removing Elements\n\nLists are dynamic, which means you can easily add or remove elements as needed.\n\n- Adding elements: Use `.append()` to add an item to the end of a list.\n- Removing elements: Use `.remove()` to remove a specific item.\n\n#### Example:\n\n::: {#be81fdc1 .cell execution_count=4}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\"]\nfruits.append(\"cherry\")  # Adding an item\nprint(fruits)  # Output: ['apple', 'banana', 'cherry']\n\nfruits.remove(\"banana\")  # Removing an item\nprint(fruits)  # Output: ['apple', 'cherry']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apple', 'banana', 'cherry']\n['apple', 'cherry']\n```\n:::\n:::\n\n\nIn this example, we add `\"cherry\"` to the list and remove `\"banana\"` from it.\n\n\n\n### List Operations: Length, Sorting, and Checking Existence\n\nHere are some common operations you can perform on lists:\n\n- Finding the length of a list using `len()`.\n- Sorting a list using `.sort()`.\n- Checking if an item exists in a list using the `in` operator.\n\n#### Example:\n\n::: {#63aba2e2 .cell execution_count=5}\n``` {.python .cell-code}\nfruits = [\"banana\", \"cherry\", \"apple\"]\n\n# Length of the list\nprint(len(fruits))  # Output: 3\n\n# Sorting the list\nfruits.sort()\nprint(fruits)  # Output: ['apple', 'banana', 'cherry']\n\n# Checking if an item exists\nprint(\"apple\" in fruits)  # Output: True\nprint(\"grape\" in fruits)  # Output: False\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n['apple', 'banana', 'cherry']\nTrue\nFalse\n```\n:::\n:::\n\n\nHere, we find the number of items in the list, sort them alphabetically, and check whether `\"apple\"` and `\"grape\"` are in the list.\n\n\n\n### Loops in Python\n\nLoops allow you to perform repetitive tasks efficiently. The most common type of loop used in Python for lists is the `for` loop. This loop allows you to go through each element in the list one by one.\n\n\n\n### For Loops\n\nA `for` loop lets you iterate over all the elements in a list and perform actions on them.\n\n#### Example:\n\n::: {#9992eb8c .cell execution_count=6}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple\nbanana\ncherry\n```\n:::\n:::\n\n\nThis code will print:\n```\napple\nbanana\ncherry\n```\n\nIn this example, the loop goes through each item in the list `fruits` and prints it.\n\n\n\n### Using Loops for Simple Operations\n\nYou can also use loops to perform more complex operations, such as processing the elements or performing calculations.\n\n#### Example: Squaring numbers in a list\n\n::: {#ca6e2e3b .cell execution_count=7}\n``` {.python .cell-code}\nnumbers = [1, 2, 3, 4]\nsquares = []\nfor number in numbers:\n    squares.append(number ** 2)\n\nprint(squares)  # Output: [1, 4, 9, 16]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 4, 9, 16]\n```\n:::\n:::\n\n\nIn this example, we loop through the list `numbers`, square each number, and store the results in a new list called `squares`.\n\n\n\n### Looping with `range()`\n\nSometimes, you need to loop a specific number of times rather than over a list. The `range()` function helps create sequences of numbers for iteration.\n\n#### Example:\n\n::: {#3d6f9626 .cell execution_count=8}\n``` {.python .cell-code}\nfor i in range(5):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\nIn this example, the loop runs 5 times, printing the values from `0` to `4` (since Python's `range()` is exclusive of the upper bound).\n\n\n### Common List Methods\n\nHere are some of the most commonly used methods with lists:\n\n1. `append()`: Adds an item to the end of the list.\n\n\n   ::: {#7dc2c22f .cell execution_count=9}\n   ``` {.python .cell-code}\n   fruits.append(\"orange\")\n   ```\n   :::\n   \n   \n2. `remove()`: Removes the first occurrence of an item.\n\n\n   ::: {#3688d1fc .cell execution_count=10}\n   ``` {.python .cell-code}\n   fruits.remove(\"banana\")\n   ```\n   :::\n   \n   \n3. `insert(index, value)`: Inserts an item at a specific position.\n\n\n   ::: {#d94c2f56 .cell execution_count=11}\n   ``` {.python .cell-code}\n   fruits.insert(1, \"blueberry\")\n   ```\n   :::\n   \n   \n4. `pop()`: Removes and returns the last item (or an item at a specified index).\n\n\n   ::: {#6626d0db .cell execution_count=12}\n   ``` {.python .cell-code}\n   last_fruit = fruits.pop()\n   ```\n   :::\n   \n   \n### Summary\n\nLists and loops are essential tools in Python, allowing you to store multiple pieces of data and process them efficiently. Lists help you group related items, while loops allow you to perform repetitive tasks, like iterating over each element in a list. Together, they form the foundation of many operations in Python, including more advanced NLP tasks where you'll work with large datasets and need to process them in an automated way.\n\nNext, we’ll explore how to define functions in Python to structure your code more effectively and make it reusable.\n\n\n\nThis text provides a comprehensive introduction to lists and loops in Python, with clear explanations and code examples. It’s designed to teach these essential concepts step-by-step, with practical examples for students to follow. Let me know if you’d like to refine or expand any section!\n\n",
    "supporting": [
      "lists_and_loops_files"
    ],
    "filters": [],
    "includes": {}
  }
}