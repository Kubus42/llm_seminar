{
  "hash": "e1520f05becdb7569a03db51b7497530",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Variables and data types\"\nformat:\n  html:\n    code-fold: false\njupyter: python3\n---\n\n\n\n\n### Introduction\n\nBefore diving into complex tasks like natural language processing (NLP) or interacting with APIs, we need to understand the basics of how Python handles data. \nAt the core of any programming language are **variables** and **data types**. \nVariables allow us to store data, and data types define the kind of data we are working with (like numbers, text, or booleans). \nIn Python, we do not need to explicitly declare the type of a variable – Python figures it out based on what we assign to it.\n\nLet’s take a look at the most important data types in Python, and how we can use them.\n\n\n## Variables\n\nIn Python, variables are used to store information that can be referenced or manipulated later. You create a variable by simply assigning a value to it with the `=` operator. Once defined, you can use the variable by referring to its name.\n\n#### Example:\n\n::: {#f21b7e7b .cell execution_count=1}\n``` {.python .cell-code}\n# Assigning values to variables\nmy_number = 10  # an integer\nmy_float = 3.14  # a floating-point number\nmy_text = \"Hello, GPT!\"  # a string of text\nis_valid = True  # a boolean (True/False)\n\n# Printing the variables\nprint(my_number)   # Output: 10\nprint(my_float)    # Output: 3.14\nprint(my_text)     # Output: Hello, GPT!\nprint(is_valid)    # Output: True\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n3.14\nHello, GPT!\nTrue\n```\n:::\n:::\n\n\nIn this example:\n\n- `my_number` is storing an **integer** value (whole number).\n- `my_float` is storing a **floating-point number** (a number with decimal points).\n- `my_text` stores a **string**, which is simply a sequence of characters.\n- `is_valid` is a **boolean**, which can either be `True` or `False`.\n\n\n\n## Data Types\n\nPython recognizes several different data types, but let’s focus on the ones you’ll use the most often for basic NLP tasks:\n\n- **Integers (`int`)**: Whole numbers, like `-1`, `0`, and `100`.\n- **Floats (`float`)**: Numbers with decimal points, like `3.14` or `-0.001`.\n- **Strings (`str`)**: Sequences of characters, like `\"OpenAI\"` or `\"Hello World\"`.\n- **Booleans (`bool`)**: True or False values, which are often used in conditional statements.\n\n\n### Working with Numbers (Integers and Floats)\n\nNumbers are straightforward to work with in Python. \nYou can perform basic arithmetic like addition, subtraction, multiplication, and division. \nThe type of number (integer or float) depends on whether it has decimal points.\n\n#### Example:\n\n::: {#c5d0f587 .cell execution_count=2}\n``` {.python .cell-code}\n# Basic arithmetic operations\na = 10\nb = 4\n\nsum_result = a + b  # Addition\ndifference = a - b  # Subtraction\nproduct = a * b  # Multiplication\nquotient = a / b  # Division (always returns a float)\n\nprint(sum_result)    # Output: 14\nprint(difference)    # Output: 6\nprint(product)       # Output: 40\nprint(quotient)      # Output: 2.5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14\n6\n40\n2.5\n```\n:::\n:::\n\n\nIn this example, `a` and `b` are integers, and we perform basic arithmetic with them. \nNotice that even though `a` and `b` are integers, the result of division is a float (`2.5`).\n\n\n### Working with Strings\n\nStrings are used to represent text in Python. \nStrings can be created using single (`'`) or double (`\"`) quotes. \nPython provides a wide range of operations you can perform on strings, like concatenation (joining two strings) or accessing individual characters.\n\n#### Example:\n\n::: {#bee7b0bc .cell execution_count=3}\n``` {.python .cell-code}\n# Concatenating strings\nfirst_name = \"John\"\nlast_name = \"Doe\"\nfull_name = first_name + \" \" + last_name  # Concatenating with a space in between\nprint(full_name)  # Output: John Doe\n\n# String interpolation using f-strings\nage = 25\nprint(f\"My name is {full_name} and I am {age} years old.\")\n# Output: My name is John Doe and I am 25 years old.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nJohn Doe\nMy name is John Doe and I am 25 years old.\n```\n:::\n:::\n\n\nIn the example above:\n- We concatenate the `first_name` and `last_name` strings to form the `full_name`.\n- We also use **f-strings** (a modern and convenient way to insert variables into a string) to print a message with the person’s name and age.\n\n\n\n### Booleans\n\nBooleans represent truth values (`True` or `False`) and are often used to control the flow of programs. \nThey commonly result from comparison operations (e.g., checking if one number is greater than another).\n\n#### Example:\n\n::: {#ff25e736 .cell execution_count=4}\n``` {.python .cell-code}\n# Boolean values\nis_student = True\nis_teacher = False\n\n# Comparison operations\nage = 18\nis_adult = age >= 18  # True if age is greater than or equal to 18\nprint(is_adult)  # Output: True\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\nHere, we create two boolean variables (`is_student` and `is_teacher`) and then use a comparison (`>=`) to check if `age` qualifies as an adult (the result is stored in `is_adult`).\n\n\n### Checking Data Types\n\nPython allows you to check the type of a variable using the `type()` function. This is useful when you want to confirm what kind of data a variable is holding.\n\n#### Example:\n\n::: {#b82bd3b2 .cell execution_count=5}\n``` {.python .cell-code}\nx = 10\ny = 3.14\ntext = \"Hello\"\nis_python_fun = True\n\nprint(type(x))  # Output: <class 'int'>\nprint(type(y))  # Output: <class 'float'>\nprint(type(text))  # Output: <class 'str'>\nprint(type(is_python_fun))  # Output: <class 'bool'>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n<class 'float'>\n<class 'str'>\n<class 'bool'>\n```\n:::\n:::\n\n\nThis will print the type of each variable, helping you understand what type of data each one holds.\n\nVariables and data types are the building blocks of any program. \nIn Python, variables can store different types of data, such as integers, floating-point numbers, strings, and booleans. \nWe’ve seen how to create and manipulate these data types, and how to perform simple operations on them. \nThese concepts will come in handy as we start working with more complex tasks like text processing.\n\nNext, we’ll explore how to manipulate strings further, as handling text is a core part of natural language processing.\n\n",
    "supporting": [
      "data_types_files"
    ],
    "filters": [],
    "includes": {}
  }
}