{
  "hash": "bb5e3d9ec8cfe0119eb153ac62a75214",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Dictionaries\"\nformat:\n  html:\n    code-fold: false\njupyter: python3\n---\n\n\n\n\n\nDictionaries in Python are a powerful data structure that allows you to store and manage data in key-value pairs. They are highly versatile and widely used, especially in scenarios where you need to associate specific values with unique identifiers, such as words with their definitions or user IDs with user data.\n\nDictionaries are unordered, which means that the items do not have a specific order, and they are mutable, allowing you to modify them after creation. This makes them an excellent choice for situations where you need fast lookups, insertions, and deletions based on keys.\n\nLet’s explore how dictionaries work in Python!\n\n\n\n### 1.6.1 Creating a Dictionary\n\nYou can create a dictionary using curly braces `{}` with key-value pairs separated by colons. The key and value can be of any data type, including strings, integers, and even other dictionaries.\n\n#### Basic Syntax:\n```python\nmy_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}\n```\n\n### Example:\n```python\n# Creating a simple dictionary\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\nprint(person)  # Output: {'name': 'Alice', 'age': 30, 'city': 'New York'}\n```\n\nIn this example, we created a dictionary called `person` with keys like `\"name\"`, `\"age\"`, and `\"city\"` associated with their respective values.\n\n\n\n### 1.6.2 Accessing Values in a Dictionary\n\nYou can access values in a dictionary by using their corresponding keys inside square brackets `[]`. If the key does not exist, it raises a `KeyError`.\n\n#### Example:\n```python\n# Accessing values\nprint(person[\"name\"])  # Output: Alice\nprint(person[\"age\"])   # Output: 30\n```\n\nHere, we accessed the values associated with the keys `\"name\"` and `\"age\"`.\n\n\n\n### 1.6.3 Modifying a Dictionary\n\nDictionaries are mutable, meaning you can add, modify, or remove key-value pairs even after the dictionary has been created.\n\n#### Adding a Key-Value Pair:\n```python\n# Adding a new key-value pair\nperson[\"occupation\"] = \"Engineer\"\nprint(person)  # Output: {'name': 'Alice', 'age': 30, 'city': 'New York', 'occupation': 'Engineer'}\n```\n\n#### Modifying a Value:\n```python\n# Modifying an existing value\nperson[\"age\"] = 31\nprint(person)  # Output: {'name': 'Alice', 'age': 31, 'city': 'New York', 'occupation': 'Engineer'}\n```\n\n#### Removing a Key-Value Pair:\n```python\n# Removing a key-value pair\ndel person[\"city\"]\nprint(person)  # Output: {'name': 'Alice', 'age': 31, 'occupation': 'Engineer'}\n```\n\nIn these examples, we added a new key-value pair for `\"occupation\"`, modified the value associated with `\"age\"`, and removed the `\"city\"` key.\n\n\n\n### 1.6.4 Dictionary Methods\n\nPython dictionaries come with various built-in methods that make it easier to manipulate and interact with the data. Here are some common dictionary methods:\n\n#### 1.6.4.1 `get()` Method\n\nThe `get()` method returns the value for a specified key. If the key doesn’t exist, it returns `None` (or a default value if provided) instead of raising a `KeyError`.\n\n#### Example:\n```python\nage = person.get(\"age\", \"Not Found\")\nprint(age)  # Output: 31\n\n# Trying to access a non-existent key\nlocation = person.get(\"city\", \"Not Found\")\nprint(location)  # Output: Not Found\n```\n\nIn this example, we used `get()` to safely access the value for `\"age\"` and provided a default value for a non-existent key.\n\n#### 1.6.4.2 `keys()` Method\n\nThe `keys()` method returns a view object that displays a list of all the keys in the dictionary.\n\n#### Example:\n```python\nkeys = person.keys()\nprint(keys)  # Output: dict_keys(['name', 'age', 'occupation'])\n```\n\n#### 1.6.4.3 `values()` Method\n\nThe `values()` method returns a view object that displays a list of all the values in the dictionary.\n\n#### Example:\n```python\nvalues = person.values()\nprint(values)  # Output: dict_values(['Alice', 31, 'Engineer'])\n```\n\n#### 1.6.4.4 `items()` Method\n\nThe `items()` method returns a view object that displays a list of all the key-value pairs in the dictionary as tuples.\n\n#### Example:\n```python\nitems = person.items()\nprint(items)  # Output: dict_items([('name', 'Alice'), ('age', 31), ('occupation', 'Engineer')])\n```\n\nThese methods are helpful when you want to loop through the keys, values, or key-value pairs of a dictionary.\n\n\n\n### 1.6.5 Looping Through a Dictionary\n\nYou can loop through a dictionary using a `for` loop. By default, it iterates over the keys. If you need to access both keys and values, you can use the `items()` method.\n\n#### Example:\n```python\n# Looping through keys\nfor key in person:\n    print(key)  # Output: name, age, occupation\n\n# Looping through keys and values\nfor key, value in person.items():\n    print(f\"{key}: {value}\")\n# Output:\n# name: Alice\n# age: 31\n# occupation: Engineer\n```\n\nIn this example, we demonstrate how to loop through the keys and both keys and values of the `person` dictionary.\n\n\n\n### 1.6.6 Nesting Dictionaries\n\nDictionaries can also contain other dictionaries, allowing you to create complex data structures.\n\n#### Example:\n```python\npeople = {\n    \"Alice\": {\n        \"age\": 30,\n        \"city\": \"New York\"\n    },\n    \"Bob\": {\n        \"age\": 25,\n        \"city\": \"Los Angeles\"\n    }\n}\n\nprint(people[\"Alice\"][\"city\"])  # Output: New York\n```\n\nIn this example, we created a dictionary called `people` that contains two dictionaries for `\"Alice\"` and `\"Bob\"`, each with their own attributes.\n\n\n\n### 1.6.7 Dictionary Comprehensions\n\nPython supports a concise way to create dictionaries known as **dictionary comprehensions**. This is a compact way to transform data or filter items.\n\n#### Syntax:\n```python\n{key_expression: value_expression for item in iterable if condition}\n```\n\n#### Example:\n```python\n# Creating a dictionary using comprehension\nsquares = {x: x ** 2 for x in range(5)}\nprint(squares)  # Output: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n```\n\nIn this example, we created a dictionary of squares for numbers 0 through 4 using a dictionary comprehension.\n\n",
    "supporting": [
      "dictionaries_files"
    ],
    "filters": [],
    "includes": {}
  }
}