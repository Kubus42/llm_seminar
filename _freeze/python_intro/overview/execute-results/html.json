{
  "hash": "28c40185d79174f204e0be1357b1352e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Introduction to Python\"\nformat:\n  html:\n    code-fold: false\njupyter: python3\n---\n\n\n\n\n# TODO: Some introduction\n\n# Using VSCode\n\nVisual Studio Code (VSCode) is a powerful and popular code editor developed by Microsoft. \nIt is highly extensible, lightweight, and supports a wide range of programming languages, including Python. \nWith its robust features such as IntelliSense, debugging capabilities, and integrated terminal, VSCode is an excellent choice for Python development.\n\n### Getting Started\n\nTo start using Python in VSCode, follow these steps:\n\n1. **Install VSCode**: If you haven’t already, download and install Visual Studio Code from [the official website](https://code.visualstudio.com/).\n\n2. **Install the Python Extension**: \n   - Open VSCode.\n   - Go to the Extensions view by clicking on the Extensions icon in the Activity Bar on the side or pressing `Ctrl + Shift + X`.\n   - Search for \"Python\" and install the official extension provided by Microsoft. This extension adds rich support for Python development, including IntelliSense and linting.\n\n3. **Select the Python Interpreter**:\n   - After installing the extension, you need to select the Python interpreter. Press `Ctrl + Shift + P` to open the Command Palette, then type and select **Python: Select Interpreter**.\n   - Choose the interpreter that matches your Python installation.\n\n### Writing and Running Python Code\n\n1. **Create a New File**: \n   - You can create a new Python file by clicking on `File > New File` or pressing `Ctrl + N`. \n   - Save it with a `.py` extension (e.g., `script.py`).\n\n2. **Write Your Code**: \n   - Begin writing your Python code in the editor. For example:\n   ```python\n   print(\"Hello, VSCode!\")\n   ```\n\n3. **Run Your Code**:\n   - There are multiple ways to run your Python code:\n     - **Using the Terminal**: Open the integrated terminal by selecting `View > Terminal` or pressing `` Ctrl + ` `` (backtick). In the terminal, type `python script.py` (replacing `script.py` with your file name) to execute the script.\n     - **Run Code Action**: You can also run your code directly from the editor by clicking the play button (▶️) that appears above the code or using the shortcut `Shift + Enter`.\n\n### Debugging in VSCode\n\nVSCode provides powerful debugging features to help you troubleshoot your code:\n\n1. **Set Breakpoints**: Click in the gutter next to the line numbers to set breakpoints where you want the execution to pause.\n\n2. **Start Debugging**: Press `F5` or go to the Debug view by clicking on the Debug icon in the Activity Bar. \n3. You can then start debugging your Python script. The Debug Console will allow you to inspect variables, step through code, and evaluate expressions.\n\n### Using Extensions and Features\n\nVSCode has a wide variety of extensions to enhance your Python development experience:\n\n- **Linting**: The Python extension includes linting capabilities that help you catch errors and enforce coding standards. You can enable it in the settings (`Settings > Python > Linting`).\n\n- **IntelliSense**: Take advantage of IntelliSense for code suggestions, autocompletions, and quick documentation. Simply start typing, and relevant suggestions will appear.\n\n- **Jupyter Notebooks**: If you want to work with Jupyter Notebooks directly in VSCode, install the Jupyter extension. This allows you to create, edit, and run notebooks seamlessly.\n\n\n---\n\n# Jupyter Notebooks\nJupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. \nIt is widely used in data science, machine learning, and scientific computing, making it a versatile tool for both beginners and advanced users.\nIn a Jupyter Notebook, you can write and execute code in a variety of programming languages, including Python. \nIt provides an interactive environment where you can document your thought process alongside your code, visualize data, and quickly test ideas without the need for a complete development setup.\n\n### Getting Started\n\nOnce you have Jupyter Notebook up and running, you will typically start by opening a new notebook. Here are the key components and features of Jupyter Notebook to help you navigate and utilize it effectively:\n\n\n\n### The User Interface\n\nUpon launching Jupyter Notebook, you’ll be greeted with a dashboard showing your files and notebooks. You can create a new notebook by selecting \"New\" and then choosing the desired kernel (like Python 3).\n\n- **Notebook Cells:** The main area consists of cells where you can write your code or text. There are two main types of cells:\n  - **Code Cells:** Where you write and execute code.\n  - **Markdown Cells:** Where you can write formatted text, including headers, lists, and links.\n\n\n\n### Writing and Executing Code\n\nTo write code in a code cell:\n\n1. Click on a cell to make it active.\n2. Type your code into the cell.\n\n#### Example:\n\n::: {#efc98800 .cell execution_count=1}\n``` {.python .cell-code}\nprint(\"Hello, Jupyter!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Jupyter!\n```\n:::\n:::\n\n\nTo execute the code, you can either click the \"Run\" button in the toolbar or press `Shift + Enter`. This will run the code and display the output directly below the cell.\n\n\n\n### Using Markdown for Documentation\n\nMarkdown cells allow you to document your code using plain text. You can format your text using Markdown syntax. \n\n#### Example:\nTo create a markdown cell with a header, simply type:\n```markdown\n# My Jupyter Notebook\n```\nAfter running the cell, it will render as a formatted header.\n\nYou can also create bullet points, numbered lists, links, and more:\n```markdown\n## Key Features\n- Interactive coding\n- Inline visualizations\n- Rich text support\n```\n\n\n\n### Visualization and Output\n\nJupyter Notebook supports various visualization libraries like Matplotlib, Seaborn, and Plotly, allowing you to create plots and graphs inline.\n\n#### Example:\n\n::: {#c1a9ad2b .cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 5, 7, 11]\n\n# Creating a plot\nplt.plot(x, y)\nplt.title(\"Sample Plot\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](overview_files/figure-html/cell-3-output-1.png){width=585 height=449}\n:::\n:::\n\n\nAfter running this code, the plot will be displayed directly beneath the code cell.\n\n\n\n### Saving and Sharing Notebooks\n\nYou can save your notebook by clicking the save icon or using the shortcut `Ctrl + S` (or `Cmd + S` on Mac). Jupyter Notebooks are saved with a `.ipynb` extension.\n\nTo share your notebook, you can export it to different formats, such as HTML or PDF, by using the \"File\" menu. You can also share the `.ipynb` file directly, which can be opened in any Jupyter environment.\n\n\n\n### Keyboard Shortcuts\n\nJupyter Notebook has many handy keyboard shortcuts that can improve your efficiency. Here are a few essential ones:\n\n- `Enter`: Edit the selected cell.\n- `Esc`: Command mode (no editing).\n- `A`: Insert a new cell above.\n- `B`: Insert a new cell below.\n- `DD`: Delete the selected cell.\n- `Z`: Undo the last cell deletion.\n- `Shift + Enter`: Run the current cell and move to the next one.\n- `Ctrl + Enter`: Run the current cell and stay in it.\n\n",
    "supporting": [
      "overview_files"
    ],
    "filters": [],
    "includes": {}
  }
}