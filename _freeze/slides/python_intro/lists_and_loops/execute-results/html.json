{
  "hash": "0a3a9a85eddf2e4b2b864b8b592d0db3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Lists and Loops in Python\"\nformat: \n    revealjs:\n        theme: default\n        chalkboard: true\n        footer: \"Seminar: LLM, SoSe 2025\"\n        logo: ../../assets/logo.svg\n        slideNumber: true\n        smaller: true\n---\n\n\n## Lists in Python\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Are Lists?\n- A **list** is an ordered collection of items.\n- Items can be any data type: numbers, strings, or other lists.\n- Lists are **mutable**, meaning you can modify them after creation.\n\n::: {#e5a3cc12 .cell execution_count=1}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apple', 'banana', 'cherry']\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Why Use Lists in NLP?\n- Lists can store words, sentences, or entire texts.\n- NLP tasks often require managing large datasets of tokens or documents.\n\n::: {#66114e5e .cell execution_count=2}\n``` {.python .cell-code}\nsentence = \"Natural language processing is fun\"\ntokens = sentence.split()  # Tokenize sentence into words\nprint(tokens)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Natural', 'language', 'processing', 'is', 'fun']\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Accessing List Elements\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Indexing\n- Access list elements using **indexing**.\n- Python indexing starts at `0`.\n\n::: {#57262f77 .cell execution_count=3}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])  # Outputs: apple\nprint(fruits[1])  # Outputs: banana\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple\nbanana\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Negative Indexing\n- Negative indexing starts from the end of the list.\n\n::: {#e916855e .cell execution_count=4}\n``` {.python .cell-code}\nprint(fruits[-1])  # Outputs: cherry (last element)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncherry\n```\n:::\n:::\n\n\n- Useful for quickly accessing the last few elements of a list.\n:::\n:::\n\n---\n\n## Modifying Lists\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Changing Elements\n- Modify a list by assigning a new value at a specific index.\n\n::: {#98a5f23d .cell execution_count=5}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfruits[1] = \"blueberry\"  # Replacing 'banana'\nprint(fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apple', 'blueberry', 'cherry']\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Real-World NLP Use\n- You might replace tokens or correct errors in a tokenized sentence.\n\n::: {#f639dae1 .cell execution_count=6}\n``` {.python .cell-code}\ntokens = [\"NLP\", \"is\", \"coool\"]\ntokens[2] = \"cool\"  # Fix typo\nprint(tokens)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['NLP', 'is', 'cool']\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Adding and Removing Elements\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Adding Elements\n- Use `.append()` to add items to the end of the list.\n\n::: {#5bcad259 .cell execution_count=7}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\"]\nfruits.append(\"cherry\")\nprint(fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apple', 'banana', 'cherry']\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Removing Elements\n- Use `.remove()` to delete specific items.\n\n::: {#060d3de8 .cell execution_count=8}\n``` {.python .cell-code}\nfruits.remove(\"banana\")\nprint(fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apple', 'cherry']\n```\n:::\n:::\n\n\n- Lists are flexible, allowing easy manipulation in NLP tasks.\n:::\n:::\n\n---\n\n## List Operations: Length, Sorting, and Checking\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### List Length\n- Use `len()` to find the number of elements in a list.\n\n::: {#9599747b .cell execution_count=9}\n``` {.python .cell-code}\nfruits = [\"banana\", \"cherry\", \"apple\"]\nprint(len(fruits))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Sorting and Checking Elements\n- Use `.sort()` to sort the list.\n- Use `in` to check if an item exists in a list.\n\n::: {#d583f2f6 .cell execution_count=10}\n``` {.python .cell-code}\nfruits.sort()\nprint(fruits)\n\nprint(\"apple\" in fruits)\nprint(\"grape\" in fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apple', 'banana', 'cherry']\nTrue\nFalse\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Loops in Python\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Are Loops?\n- Loops help you iterate over a list and perform actions on each element.\n- Commonly used in NLP for tasks like text processing.\n\n::: {#91341777 .cell execution_count=11}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple\nbanana\ncherry\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Real-World NLP Example\n- Tokenizing and processing text using loops.\n\n::: {#7ae1e4ec .cell execution_count=12}\n``` {.python .cell-code}\ntokens = [\"NLP\", \"is\", \"fun\"]\nfor token in tokens:\n    print(token)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNLP\nis\nfun\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Using Loops for Simple Operations\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Squaring Numbers in a List\n- Loops allow you to apply operations to list elements.\n\n::: {#3cf72f9e .cell execution_count=13}\n``` {.python .cell-code}\nnumbers = [1, 2, 3, 4]\nsquares = []\nfor number in numbers:\n    squares.append(number ** 2)\n\nprint(squares)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 4, 9, 16]\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### NLP Example: Word Length Calculation\n- Use loops to calculate the length of each word in a sentence.\n\n::: {#59b73a80 .cell execution_count=14}\n``` {.python .cell-code}\ntokens = [\"NLP\", \"is\", \"great\"]\nfor token in tokens:\n    print(f\"{token}: {len(token)} characters\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNLP: 3 characters\nis: 2 characters\ngreat: 5 characters\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Looping with `range()`\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Using `range()`\n- Sometimes you need to iterate a set number of times.\n- `range()` generates a sequence of numbers.\n\n::: {#112246ac .cell execution_count=15}\n``` {.python .cell-code}\nfor i in range(5):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Combining `range()` with Lists\n- Use `range()` to loop over list indices, allowing more control.\n\n::: {#cacb8e70 .cell execution_count=16}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor i in range(len(fruits)):\n    print(f\"Index {i}: {fruits[i]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex 0: apple\nIndex 1: banana\nIndex 2: cherry\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Common List Methods\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Adding and Removing Elements\n- `.append()`: Adds an item to the end.\n- `.remove()`: Removes a specific item.\n\n::: {#5e606446 .cell execution_count=17}\n``` {.python .cell-code}\nfruits.append(\"orange\")\nfruits.remove(\"banana\")\nprint(fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apple', 'cherry', 'orange']\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Inserting and Popping Elements\n- `.insert()`: Inserts an item at a specific index.\n- `.pop()`: Removes and returns the last item or the item at a specific index.\n\n::: {#04cbebe9 .cell execution_count=18}\n``` {.python .cell-code}\nfruits.insert(1, \"blueberry\")\nprint(fruits)\n\nlast_fruit = fruits.pop()\nprint(fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apple', 'blueberry', 'cherry', 'orange']\n['apple', 'blueberry', 'cherry']\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Summary: Lists and Loops\n\n- **Lists**: Allow you to store and manipulate multiple elements, useful in NLP for text processing.\n- **Loops**: Help automate repetitive tasks and process list elements.\n- You can easily modify, sort, and check elements within lists.\n- Loops and lists combined allow for efficient handling of data in Python, especially in NLP.\n\n",
    "supporting": [
      "lists_and_loops_files"
    ],
    "filters": [],
    "includes": {}
  }
}