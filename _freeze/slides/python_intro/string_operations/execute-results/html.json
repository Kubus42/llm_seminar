{
  "hash": "a106904f13a96fbd31aa0f231b4bbda3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"String Operations in Python\"\nformat: \n    revealjs:\n        theme: default\n        chalkboard: true\n        footer: \"Seminar: LLM, SoSe 2025\"\n        logo: ../../assets/logo.svg\n        slideNumber: true\n        smaller: true\n---\n\n\n## Strings in NLP\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Are Strings?\n- Strings represent text data in Python.\n- Used to store sequences of characters (letters, digits, punctuation).\n- Central to **NLP** tasks where text manipulation is required.\n\n::: {#aa71f373 .cell execution_count=1}\n``` {.python .cell-code}\nsentence = \"Natural Language Processing\"\nprint(sentence)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNatural Language Processing\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### NLP and Strings\n- **Why strings in NLP?**\n  - To tokenize, clean, and analyze text data.\n  - Each word in a sentence is processed as a string.\n\n::: {#67abb8ad .cell execution_count=2}\n``` {.python .cell-code}\ntoken = \"word\"\nprint(len(token))  # Outputs: 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n```\n:::\n:::\n\n\n- Length of strings helps in tokenization.\n:::\n:::\n\n---\n\n## Concatenating Strings\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What is Concatenation?\n- Concatenation joins two or more strings together.\n- You can use the `+` operator or `join()` method for concatenation.\n\n::: {#a9c9bc6e .cell execution_count=3}\n``` {.python .cell-code}\ngreeting = \"Hello, \" + \"world!\"\nprint(greeting)  # Outputs: Hello, world!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, world!\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### NLP Example: Joining Words\n- Often in NLP, you need to combine words (tokens) back into sentences.\n\n::: {#a23cf5eb .cell execution_count=4}\n``` {.python .cell-code}\nwords = [\"NLP\", \"is\", \"fun\"]\nsentence = \" \".join(words)\nprint(sentence)  # Outputs: NLP is fun\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNLP is fun\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Accessing and Slicing Strings\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Accessing Characters\n- Each character in a string has an index.\n- You can access them using square brackets.\n\n::: {#9d198a40 .cell execution_count=5}\n``` {.python .cell-code}\nword = \"token\"\nprint(word[0])  # Outputs: t\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nt\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Slicing Strings\n- Slicing extracts part of a string using `[start:end]`.\n\n::: {#c137d1ee .cell execution_count=6}\n``` {.python .cell-code}\nphrase = \"language model\"\nprint(phrase[0:8])  # Outputs: language\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlanguage\n```\n:::\n:::\n\n\n- Useful in NLP when extracting parts of text.\n:::\n:::\n\n---\n\n## Modifying Strings\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Changing Case\n- Strings offer methods like `upper()` and `lower()` for case modification.\n\n::: {#5afc7909 .cell execution_count=7}\n``` {.python .cell-code}\ntext = \"Natural Language Processing\"\nprint(text.lower())  # Outputs: natural language processing\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnatural language processing\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### NLP Example: Normalizing Text\n- Text normalization often involves converting everything to lowercase to ensure uniformity.\n\n::: {#5115d7d1 .cell execution_count=8}\n``` {.python .cell-code}\nsentence = \"HELLO World!\"\nprint(sentence.lower())  # Outputs: hello world!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello world!\n```\n:::\n:::\n\n\n- This is important for case-insensitive comparisons in NLP.\n:::\n:::\n\n---\n\n## Splitting Strings\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Tokenization: Splitting Text\n- The `split()` method divides a string into a list of words.\n\n::: {#16feba5e .cell execution_count=9}\n``` {.python .cell-code}\nsentence = \"Tokenize this sentence.\"\ntokens = sentence.split(\" \")\nprint(tokens)  # Outputs: ['Tokenize', 'this', 'sentence.']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Tokenize', 'this', 'sentence.']\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Tokenization in NLP\n- Tokenization is the process of breaking text into smaller units, often words or sentences.\n- Split text into tokens based on spaces or punctuation.\n\n::: {#dd9fbfaa .cell execution_count=10}\n``` {.python .cell-code}\nsentence = \"Deep Learning and NLP\"\ntokens = sentence.split()\nprint(tokens)  # Outputs: ['Deep', 'Learning', 'and', 'NLP']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Deep', 'Learning', 'and', 'NLP']\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## String Search\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Searching in Strings\n- Use `in` or `find()` to search for substrings.\n\n::: {#a067167f .cell execution_count=11}\n``` {.python .cell-code}\ntext = \"machine learning is powerful\"\nprint(\"learning\" in text)  # Outputs: True\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### NLP: Searching for Keywords\n- In NLP, searching for specific words or phrases is common.\n\n::: {#e244a254 .cell execution_count=12}\n``` {.python .cell-code}\ntext = \"Neural networks are part of deep learning\"\nkeyword = \"deep\"\nprint(text.find(keyword))  # Outputs: 27 (index position)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n28\n```\n:::\n:::\n\n\n- Use this for keyword extraction in text analysis.\n:::\n:::\n\n---\n\n## Replacing Substrings\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Replacing Text\n- The `replace()` method replaces parts of a string.\n\n::: {#3877dad8 .cell execution_count=13}\n``` {.python .cell-code}\nsentence = \"I love machine learning\"\nsentence = sentence.replace(\"machine\", \"deep\")\nprint(sentence)  # Outputs: I love deep learning\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI love deep learning\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### NLP Example: Text Replacement\n- In text preprocessing, you may need to replace or correct words.\n\n::: {#bf6be2bb .cell execution_count=14}\n``` {.python .cell-code}\ntext = \"Text analysis with NLP\"\nclean_text = text.replace(\"Text\", \"Document\")\nprint(clean_text)  # Outputs: Document analysis with NLP\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDocument analysis with NLP\n```\n:::\n:::\n\n\n- This is helpful when cleaning or transforming data.\n:::\n:::\n\n---\n\n## Removing Whitespace and Punctuation\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Removing Extra Whitespace\n- Use `strip()`, `lstrip()`, or `rstrip()` to remove unwanted spaces.\n\n::: {#19502886 .cell execution_count=15}\n``` {.python .cell-code}\ntext = \"   clean me!   \"\nprint(text.strip())  # Outputs: \"clean me!\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclean me!\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Removing Punctuation\n- Use `translate()` to remove punctuation in strings for cleaning.\n\n::: {#d72f7ae6 .cell execution_count=16}\n``` {.python .cell-code}\nimport string\nsentence = \"Hello, world!\"\ncleaned = sentence.translate(str.maketrans('', '', string.punctuation))\nprint(cleaned)  # Outputs: Hello world\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world\n```\n:::\n:::\n\n\n- This is common in NLP preprocessing steps.\n:::\n:::\n\n---\n\n## String Formatting\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Formatting with f-strings\n- Use f-strings for inserting variables into strings.\n\n::: {#453c4df1 .cell execution_count=17}\n``` {.python .cell-code}\nname = \"NLP\"\nprint(f\"Welcome to {name} class!\")  # Outputs: Welcome to NLP class!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWelcome to NLP class!\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### NLP Use: Displaying Results\n- Use string formatting to present results clearly.\n\n::: {#bd4bb9e5 .cell execution_count=18}\n``` {.python .cell-code}\nword = \"deep learning\"\nprint(f\"The word '{word}' has {len(word)} characters.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe word 'deep learning' has 13 characters.\n```\n:::\n:::\n\n\n- This is useful for presenting text-based results from NLP models.\n:::\n:::\n\n---\n\n## Summary of String Operations\n\n- **Concatenation**: Joining strings together.\n- **Accessing and slicing**: Extracting characters or parts of a string.\n- **Modifying**: Changing case or replacing parts of the string.\n- **Splitting**: Tokenizing a sentence into words.\n- **Searching**: Finding specific words in text.\n- **Replacing**: Cleaning or transforming text.\n- **Whitespace/Punctuation removal**: Important for cleaning data.\n\n",
    "supporting": [
      "string_operations_files"
    ],
    "filters": [],
    "includes": {}
  }
}