{
  "hash": "8db18b1e26cbc42092547fa211db512c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Conditional Statements in Python\"\nformat: \n    revealjs:\n        theme: default\n        chalkboard: true\n        footer: \"Seminar: LLM, WiSe 2024/25\"\n        logo: ../../assets/logo.svg\n        slideNumber: true\n        smaller: true\n---\n\n\n\n\n## Conditional Statements in Python\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Are Conditional Statements?\n- Control the flow of your program based on conditions.\n- The most common statement is the **`if` statement**, which executes code only when a condition is true.\n- Useful for decision-making in various applications, including NLP tasks.\n\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Importance in NLP\n- Adjust processing based on conditions (e.g., text case, keyword presence).\n- Enable flexible and dynamic responses to input data.\n\n::: {#9c19d13b .cell execution_count=2}\n``` {.python .cell-code}\nword = \"HELLO\"\nif word.isupper():\n    print(\"The word is uppercase!\")  # Output: The word is uppercase!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe word is uppercase!\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## The `if` Statement\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Basic Syntax of `if`\n- Check a condition and execute a block of code if it evaluates to **True**.\n\n::: {#9b8c6103 .cell execution_count=3}\n``` {.python .cell-code}\nx = 10\nif x > 5:\n    print(\"x is greater than 5\")  # Output: x is greater than 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is greater than 5\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Explanation\n- The condition `x > 5` is checked.\n- Since `x` is 10, the print statement executes.\n:::\n:::\n\n---\n\n## The `else` Statement\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Using the `else` Statement\n- Defines what happens when the `if` condition is **False**.\n\n::: {#69c93d7e .cell execution_count=4}\n``` {.python .cell-code}\nx = 3\nif x > 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is not greater than 5\")  # Output: x is not greater than 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is not greater than 5\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Explanation\n- Since `x` is 3, the `else` block executes, printing \"x is not greater than 5\".\n:::\n:::\n\n---\n\n## The `elif` Statement\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Multiple Conditions with `elif`\n- Use `elif` to check additional conditions if the previous ones are false.\n\n::: {#84c2524c .cell execution_count=5}\n``` {.python .cell-code}\nx = 7\nif x > 10:\n    print(\"x is greater than 10\")\nelif x > 5:\n    print(\"x is greater than 5 but less than or equal to 10\")  # Output: x is greater than 5 but less than or equal to 10\nelse:\n    print(\"x is less than or equal to 5\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is greater than 5 but less than or equal to 10\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Explanation\n- Python checks each condition sequentially; `x > 10` is false, but `x > 5` is true.\n:::\n:::\n\n---\n\n## Using Comparison Operators\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Common Comparison Operators\n- `==`: Equal to\n- `!=`: Not equal to\n- `>`: Greater than\n- `<`: Less than\n- `>=`: Greater than or equal to\n- `<=`: Less than or equal to\n\n::: {#e4a4cc1c .cell execution_count=6}\n``` {.python .cell-code}\nage = 18\nif age == 18:\n    print(\"You are 18 years old\")  # Output: You are 18 years old\nif age != 20:\n    print(\"You are not 20 years old\")  # Output: You are not 20 years old\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou are 18 years old\nYou are not 20 years old\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Explanation\n- The `==` operator checks if `age` is 18, while the `!=` operator checks if it is not 20.\n:::\n:::\n\n---\n\n## Logical Operators\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Combining Conditions\n- Use **logical operators** to evaluate multiple conditions.\n\n::: {#0c14e4f0 .cell execution_count=7}\n``` {.python .cell-code}\nx = 7\n\nif x > 5 and x < 10:\n    print(\"x is between 5 and 10\")  # Output: x is between 5 and 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is between 5 and 10\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Other Logical Operators\n- `or`: True if at least one condition is true.\n- `not`: Inverts the truth value of the condition.\n\n::: {#2c37b353 .cell execution_count=8}\n``` {.python .cell-code}\nif x < 5 or x > 6:\n    print(\"x is either less than 5 or greater than 6\")  # Output: x is either less than 5 or greater than 6\n\nif not x == 5:\n    print(\"x is not equal to 5\")  # Output: x is not equal to 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is either less than 5 or greater than 6\nx is not equal to 5\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Nested `if` Statements\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Are Nested `if` Statements?\n- Place one `if` statement inside another to check multiple conditions that depend on each other.\n\n::: {#48ef68cb .cell execution_count=9}\n``` {.python .cell-code}\nx = 10\ny = 20\n\nif x > 5:\n    if y > 15:\n        print(\"x is greater than 5 and y is greater than 15\")  # Output: x is greater than 5 and y is greater than 15\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is greater than 5 and y is greater than 15\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Explanation\n- First check `x > 5`. If true, then check `y > 15`.\n:::\n:::\n\n---\n\n## Checking Membership with `in` Operator\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Using the `in` Operator\n- Check if a value exists in a collection (e.g., list, string, tuple).\n\n::: {#d32a1625 .cell execution_count=10}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nif \"banana\" in fruits:\n    print(\"Banana is in the list!\")  # Output: Banana is in the list!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBanana is in the list!\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Example with Strings\n\n::: {#177e8a18 .cell execution_count=11}\n``` {.python .cell-code}\nsentence = \"Hello world\"\nif \"world\" in sentence:\n    print(\"The word 'world' is in the sentence.\")  # Output: The word 'world' is in the sentence.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe word 'world' is in the sentence.\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Combining Conditions in Practical Examples\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Example: Password Validation\n- Check user input against certain conditions for validity.\n\n::: {#b846510f .cell execution_count=12}\n``` {.python .cell-code}\npassword = \"Hello123\"\n\nif len(password) >= 8 and any(char.isdigit() for char in password):\n    print(\"Password is valid\")  # Output: Password is valid\nelse:\n    print(\"Password must be at least 8 characters long and contain a number.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPassword is valid\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Explanation\n- Checks for length and if any character is a digit using `char.isdigit()`.\n:::\n:::\n\n---\n\n## Edge Cases and Handling Errors\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Importance of Edge Case Handling\n- Think about situations where input values might cause errors, such as empty strings or division by zero.\n\n::: {#09c1f7e6 .cell execution_count=13}\n``` {.python .cell-code}\n# Checking for division by zero\nnumerator = 10\ndenominator = 0\n\nif denominator != 0:\n    result = numerator / denominator\n    print(result)\nelse:\n    print(\"Cannot divide by zero\")  # Output: Cannot divide by zero\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCannot divide by zero\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Explanation\n- Use conditionals to prevent errors like division by zero by checking if the denominator is not zero.\n:::\n:::\n\n",
    "supporting": [
      "conditional_statements_files"
    ],
    "filters": [],
    "includes": {}
  }
}