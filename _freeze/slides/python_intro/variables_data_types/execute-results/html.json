{
  "hash": "071a2a8a2469f8c303e0c99c78d91ed6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Variables and Data Types in Python\"\nformat: \n    revealjs:\n        theme: default\n        chalkboard: true\n        footer: \"Seminar: LLM, SoSe 2025\"\n        logo: ../../assets/logo.svg\n        slideNumber: true\n        smaller: true\n---\n\n\n## Introduction to Variables and Data Types\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What are Variables?\n- **Variables** are containers for storing data values.\n- In Python, variables are created when you assign a value to them:\n\n::: {#70e953c1 .cell execution_count=1}\n``` {.python .cell-code}\nx = 10\nname = \"Alice\"\n```\n:::\n\n\n- Variables do not need explicit declaration and can change type.\n:::\n::: {.column width=\"50%\" .fragment}\n### Data Types in Python\n- **Data types** classify data. In Python, everything is an object, and every object has a type.\n- Common data types include:\n  - Integers: `int`\n  - Floating-point numbers: `float`\n  - Strings: `str`\n  - Booleans: `bool`\n:::\n:::\n\n---\n\n## Variable Declaration and Assignment\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Declaration and Assignment\n- Variables are assigned using the `=` operator.\n- Python infers the data type based on the value assigned.\n\n::: {#1860dc65 .cell execution_count=2}\n``` {.python .cell-code}\nage = 25  # Integer\npi = 3.14  # Float\nname = \"John\"  # String\nis_student = True  # Boolean\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Checking Variable Types\n- You can check the type of a variable using the `type()` function.\n\n::: {#626af26a .cell execution_count=3}\n``` {.python .cell-code}\nprint(type(age))  # Output: <class 'int'>\nprint(type(name))  # Output: <class 'str'>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n<class 'str'>\n```\n:::\n:::\n\n\n- Python is dynamically typed, meaning you don't have to declare the type.\n:::\n:::\n\n---\n\n## Working with Numbers\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Integer Operations\n- Integers (`int`) are whole numbers. You can perform arithmetic operations on them.\n\n::: {#c0a3190c .cell execution_count=4}\n``` {.python .cell-code}\nx = 10\ny = 5\nsum = x + y  # Addition\nproduct = x * y  # Multiplication\n```\n:::\n\n\n- Common operators: `+`, `-`, `*`, `/`, `%` (modulo)\n:::\n::: {.column width=\"50%\" .fragment}\n### Float (Decimal Numbers)\n- **Floats** represent numbers with decimal points.\n\n::: {#da4081bf .cell execution_count=5}\n``` {.python .cell-code}\nprice = 19.99\ndiscount = 0.10\ntotal = price * (1 - discount)\n```\n:::\n\n\n- Operations on floats behave similarly to integers.\n:::\n:::\n\n---\n\n## Strings in Python\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### String Basics\n- A **string** is a sequence of characters enclosed in quotes.\n\n::: {#298eca0a .cell execution_count=6}\n``` {.python .cell-code}\nmessage = \"Hello, world!\"\nname = 'Alice'\n```\n:::\n\n\n- Strings can be single or double-quoted.\n:::\n::: {.column width=\"50%\" .fragment}\n### String Operations\n- Concatenation (`+`):\n\n::: {#6f12580e .cell execution_count=7}\n``` {.python .cell-code}\ngreeting = \"Hello, \" + name\n```\n:::\n\n\n- Repetition (`*`):\n\n::: {#c58e8651 .cell execution_count=8}\n``` {.python .cell-code}\nlaugh = \"ha\" * 3  # Output: \"hahaha\"\n```\n:::\n\n\n- Accessing characters by index:\n\n::: {#adb202b2 .cell execution_count=9}\n``` {.python .cell-code}\nfirst_letter = name[0]  # Output: 'A'\n```\n:::\n\n\n:::\n:::\n\n---\n\n## Boolean and None Types\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Boolean Type\n- **Booleans** represent `True` or `False`.\n\n::: {#a732e11d .cell execution_count=10}\n``` {.python .cell-code}\nis_adult = True\nhas_permission = False\n```\n:::\n\n\n- Boolean values are often used in conditional statements.\n:::\n::: {.column width=\"50%\" .fragment}\n### The `None` Type\n- **None** represents the absence of a value.\n\n::: {#fafd8525 .cell execution_count=11}\n``` {.python .cell-code}\nresult = None\n```\n:::\n\n\n- Often used to indicate that a variable holds no value or is a placeholder for future data.\n:::\n:::\n\n---\n\n## Type Conversion\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Converting Between Types\n- You can convert between different types using built-in functions.\n\n::: {#14aff922 .cell execution_count=12}\n``` {.python .cell-code}\nx = 10  # int\ny = float(x)  # Converts to float: 10.0\nz = str(x)  # Converts to string: '10'\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Why Type Conversion Matters\n- Type conversion is important when combining different types in operations.\n\n::: {#1d894c97 .cell execution_count=13}\n``` {.python .cell-code}\nage = 30\nmessage = \"I am \" + str(age) + \" years old.\"\nprint(message)  # Output: I am 30 years old.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI am 30 years old.\n```\n:::\n:::\n\n\n:::\n:::\n\n",
    "supporting": [
      "variables_data_types_files"
    ],
    "filters": [],
    "includes": {}
  }
}