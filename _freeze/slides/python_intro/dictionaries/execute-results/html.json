{
  "hash": "076a6cb900e62f3eeb1fdc697917828c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Dictionaries in Python\"\nformat: \n    revealjs:\n        theme: default\n        chalkboard: true\n        footer: \"Seminar: LLM, WiSe 2024/25\"\n        logo: ../../assets/logo.svg\n        slideNumber: true\n        smaller: true\n---\n\n\n\n\n## Dictionaries in Python\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Are Dictionaries?\n- A **dictionary** is a powerful data structure for storing data in key-value pairs.\n- Versatile for associating specific values with unique identifiers (e.g., words with definitions).\n- Unordered and mutable, allowing for fast lookups, insertions, and deletions.\n\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Importance in Data Management\n- Ideal for scenarios like user IDs with user data or other associations.\n- Enable efficient organization and retrieval of related data.\n\n::: {#7558f2d3 .cell execution_count=2}\n``` {.python .cell-code}\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\nprint(person)  # Output: {'name': 'Alice', 'age': 30, 'city': 'New York'}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 30, 'city': 'New York'}\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Creating a Dictionary\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Basic Syntax\n- Use curly braces `{}` with key-value pairs separated by colons.\n\n::: {#c34424dc .cell execution_count=3}\n``` {.python .cell-code}\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Explanation\n- Keys and values can be of any data type (strings, integers, other dictionaries).\n- Example dictionary `person` contains keys `\"name\"`, `\"age\"`, and `\"city\"`.\n:::\n:::\n\n---\n\n## Accessing Values in a Dictionary\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Accessing Values\n- Use square brackets `[]` to retrieve values by their keys.\n\n::: {#6e5a3636 .cell execution_count=4}\n``` {.python .cell-code}\nprint(person[\"name\"])  # Output: Alice\nprint(person[\"age\"])   # Output: 30\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlice\n30\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### KeyError Handling\n- Accessing a non-existent key raises a `KeyError`.\n:::\n:::\n\n---\n\n## Modifying a Dictionary\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Modifying Dictionary Contents\n- Dictionaries are mutable; you can add, modify, or remove key-value pairs.\n\n#### Adding a Key-Value Pair:\n\n::: {#c78293c1 .cell execution_count=5}\n``` {.python .cell-code}\nperson[\"occupation\"] = \"Engineer\"\nprint(person)  # Output: {'name': 'Alice', 'age': 30, 'city': 'New York', 'occupation': 'Engineer'}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 30, 'city': 'New York', 'occupation': 'Engineer'}\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Modifying Values\n\n::: {#1a219ffc .cell execution_count=6}\n``` {.python .cell-code}\nperson[\"age\"] = 31\nprint(person)  # Output: {'name': 'Alice', 'age': 31, 'city': 'New York', 'occupation': 'Engineer'}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 31, 'city': 'New York', 'occupation': 'Engineer'}\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Dictionary Methods\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Built-in Methods\n- Python dictionaries have various built-in methods for data manipulation.\n\n#### `get()` Method\n- Returns the value for a specified key, returning `None` if the key doesn't exist.\n\n::: {#3bc42541 .cell execution_count=7}\n``` {.python .cell-code}\nage = person.get(\"age\", \"Not Found\")\nprint(age)  # Output: 31\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n31\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Example with `get()`\n\n::: {#6667730e .cell execution_count=8}\n``` {.python .cell-code}\nlocation = person.get(\"city\", \"Not Found\")\nprint(location)  # Output: Not Found\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNew York\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Dictionary Keys, Values, and Items\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Keys, Values, and Items Methods\n- Retrieve keys, values, or key-value pairs as needed.\n\n#### `keys()` Method\n\n::: {#2c813b4e .cell execution_count=9}\n``` {.python .cell-code}\nkeys = person.keys()\nprint(keys)  # Output: dict_keys(['name', 'age', 'occupation'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndict_keys(['name', 'age', 'city', 'occupation'])\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n#### `values()` Method\n\n::: {#26e7b0c7 .cell execution_count=10}\n``` {.python .cell-code}\nvalues = person.values()\nprint(values)  # Output: dict_values(['Alice', 31, 'Engineer'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndict_values(['Alice', 31, 'New York', 'Engineer'])\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Looping Through a Dictionary\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Looping Techniques\n- Loop through dictionaries using a `for` loop to access keys or both keys and values.\n\n#### Looping Through Keys\n\n::: {#712e1855 .cell execution_count=11}\n``` {.python .cell-code}\nfor key in person:\n    print(key)  # Output: name, age, occupation\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nname\nage\ncity\noccupation\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n#### Looping Through Keys and Values\n\n::: {#be9c31eb .cell execution_count=12}\n``` {.python .cell-code}\nfor key, value in person.items():\n    print(f\"{key}: {value}\")\n# Output:\n# name: Alice\n# age: 31\n# occupation: Engineer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nname: Alice\nage: 31\ncity: New York\noccupation: Engineer\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Nesting Dictionaries\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Are Nested Dictionaries?\n- Dictionaries can contain other dictionaries, enabling complex data structures.\n\n::: {#94743192 .cell execution_count=13}\n``` {.python .cell-code}\npeople = {\n    \"Alice\": {\n        \"age\": 30,\n        \"city\": \"New York\"\n    },\n    \"Bob\": {\n        \"age\": 25,\n        \"city\": \"Los Angeles\"\n    }\n}\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Accessing Nested Values\n\n::: {#c8d43030 .cell execution_count=14}\n``` {.python .cell-code}\nprint(people[\"Alice\"][\"city\"])  # Output: New York\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNew York\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Dictionary Comprehensions\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Are Dictionary Comprehensions?\n- A concise way to create dictionaries by transforming or filtering data.\n\n#### Syntax\n```python\n{key_expression: value_expression for item in iterable if condition}\n```\n:::\n::: {.column width=\"50%\" .fragment}\n### Example of Dictionary Comprehension\n\n::: {#eb591445 .cell execution_count=15}\n``` {.python .cell-code}\nsquares = {x: x ** 2 for x in range(5)}\nprint(squares)  # Output: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n```\n:::\n:::\n\n\n:::\n:::\n\n",
    "supporting": [
      "dictionaries_files"
    ],
    "filters": [],
    "includes": {}
  }
}