{
  "hash": "8b3c6d8df2d900fe1108b2707a7a13b3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Functions in Python\"\nformat: \n    revealjs:\n        theme: default\n        chalkboard: true\n        footer: \"Seminar: LLM, WiSe 2024/25\"\n        logo: ../../assets/logo.svg\n        slideNumber: true\n        smaller: true\n---\n\n\n## Functions in Python\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Are Functions?\n- Functions are reusable blocks of code that perform specific tasks.\n- They help organize code into manageable parts.\n- Essential for writing modular and maintainable code, especially in NLP.\n\n::: {#9666b4c3 .cell execution_count=1}\n``` {.python .cell-code}\ndef function_name():\n    # Code to be executed\n    pass\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Why Use Functions in NLP?\n- Simplify complex processes like data cleaning, preprocessing, and feature extraction.\n- Promote code reusability and clarity, making it easier to manage large projects.\n\n::: {#7f465122 .cell execution_count=2}\n``` {.python .cell-code}\ndef preprocess_text(text):\n    return text.lower()  # Example function to convert text to lowercase\n```\n:::\n\n\n:::\n:::\n\n---\n\n## Defining Functions\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Basic Function Definition\n- Use the `def` keyword to define a function.\n- You can pass **arguments** for customization.\n\n::: {#8b3b9d68 .cell execution_count=3}\n``` {.python .cell-code}\ndef greet():\n    print(\"Hello, welcome to Python!\")\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Example: Calling a Function\n- Call a function by using its name followed by parentheses.\n\n::: {#1ecc50a7 .cell execution_count=4}\n``` {.python .cell-code}\ngreet()  # Output: Hello, welcome to Python!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, welcome to Python!\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Functions with Arguments\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Functions with Arguments\n- Accept data inputs to customize behavior.\n\n::: {#0e20b3a9 .cell execution_count=5}\n``` {.python .cell-code}\ndef greet(name):\n    print(f\"Hello, {name}!\")\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Example: Custom Greetings\n- Call the function with different arguments.\n\n::: {#44e12fae .cell execution_count=6}\n``` {.python .cell-code}\ngreet(\"Alice\")  # Output: Hello, Alice!\ngreet(\"Bob\")    # Output: Hello, Bob!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice!\nHello, Bob!\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Returning Values from Functions\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Returning Values\n- Use `return` to send back a value from the function.\n\n::: {#ac0a9a84 .cell execution_count=7}\n``` {.python .cell-code}\ndef add_numbers(a, b):\n    return a + b\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Example: Storing Returned Values\n- Store the returned value for further use.\n\n::: {#17b37ea3 .cell execution_count=8}\n``` {.python .cell-code}\nsum_result = add_numbers(10, 20)\nprint(sum_result)  # Output: 30\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n30\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Default Arguments\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Default Arguments\n- Assign default values to function arguments.\n\n::: {#62e9ec3c .cell execution_count=9}\n``` {.python .cell-code}\ndef greet(name=\"there\"):\n    print(f\"Hello, {name}!\")\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Example: Calling with Default Argument\n- If no argument is provided, the default value is used.\n\n::: {#0e9aa852 .cell execution_count=10}\n``` {.python .cell-code}\ngreet()         # Output: Hello, there!\ngreet(\"Alice\")  # Output: Hello, Alice!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, there!\nHello, Alice!\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Lambda Functions\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Are Lambda Functions?\n- Small anonymous functions written in a single line.\n- Useful for simple operations.\n\n::: {#95c8c0d5 .cell execution_count=11}\n``` {.python .cell-code}\nsquare_lambda = lambda x: x ** 2\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Example: Using Lambda Functions\n- Call the lambda function directly.\n\n::: {#1e4a6a9f .cell execution_count=12}\n``` {.python .cell-code}\nprint(square_lambda(5))  # Output: 25\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n25\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Functions and Lists\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Combining Functions with Lists\n- Use functions to process items in a list efficiently.\n\n::: {#eca515e3 .cell execution_count=13}\n``` {.python .cell-code}\ndef square(x):\n    return x ** 2\n\nnumbers = [1, 2, 3, 4]\nsquares = [square(num) for num in numbers]\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Output the Results\n- Print the resulting list after processing.\n\n::: {#d6dd6423 .cell execution_count=14}\n``` {.python .cell-code}\nprint(squares)  # Output: [1, 4, 9, 16]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 4, 9, 16]\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Best Practices with Functions\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Best Practices\n- Use **descriptive names** for clarity.\n- Keep functions **short** and focused on a single task.\n\n::: {#fb45abae .cell execution_count=15}\n``` {.python .cell-code}\ndef calculate_area(radius):\n    \"\"\"Calculate the area of a circle.\"\"\"\n    return 3.14 * radius ** 2\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Importance of Documentation\n- Write **docstrings** and comments to explain complex functions.\n\n::: {#21c79bd9 .cell execution_count=16}\n``` {.python .cell-code}\ndef process_data(data):\n    \"\"\"Process the input data.\"\"\"\n    # Implementation goes here\n```\n:::\n\n\n:::\n:::\n\n---\n\n## Summary\n\n:::{.columns}\n::: {.column width=\"50%\"}\n- Functions are essential for modular programming in Python.\n- They improve code readability and maintainability, especially in NLP applications.\n- Combine functions with lists to process collections of data efficiently.\n:::\n::: {.column width=\"50%\" .fragment}\n\n:::\n:::\n\n",
    "supporting": [
      "functions_files"
    ],
    "filters": [],
    "includes": {}
  }
}