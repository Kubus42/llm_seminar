{
  "hash": "1b72f96d9624752d43c272497d47e735",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Classes in Python\"\nformat: \n    revealjs:\n        theme: default\n        chalkboard: true\n        footer: \"Seminar: LLM, WiSe 2024/25\"\n        logo: ../../assets/logo.svg\n        slideNumber: true\n        smaller: true\n---\n\n\n## Introduction to Classes\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Are Classes?\n- Classes are a core concept in **object-oriented programming (OOP)**.\n- They allow the creation of custom data types that combine **attributes** (data) and **methods** (functionality).\n\n### Key Benefits\n- Model real-world entities.\n- Promote code reusability.\n- Enhance organization and modularity of programs.\n:::\n::: {.column width=\"50%\" .fragment}\n### Overview\n- A class serves as a blueprint for creating objects, encapsulating shared attributes and behaviors.\n\n\n\n:::\n:::\n\n---\n\n## Defining a Class\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Basic Syntax\n- Use the `class` keyword followed by the class name (CamelCase convention).\n\n::: {#df2a0bab .cell execution_count=2}\n``` {.python .cell-code}\nclass Text:\n    pass\n\n# Creating an instance of the Text class\nmy_text = Text()\nprint(my_text)  # Output: <__main__.Text object at 0x...>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<__main__.Text object at 0x108bd43e0>\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Explanation\n- Defined a simple class named `Text` and created an instance stored in `my_text`.\n:::\n:::\n\n---\n\n## Adding Attributes and Methods\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Attributes and Methods\n- **Attributes** are variables belonging to the class.\n- **Methods** are functions defined within the class that manipulate attributes or perform actions.\n\n### Initializing Attributes\n- Use the `__init__()` method to initialize attributes during object creation.\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Example with Methods\n\n::: {#02586e38 .cell execution_count=3}\n``` {.python .cell-code}\nclass Text:\n    def __init__(self, content):\n        self.content = content  # Instance attribute\n    \n    def word_count(self):  # Method\n        return len(self.content.split())\n\n    def shout(self):  # Another method\n        result = self.content.upper()\n        result = result.replace(\".\", \"!\")\n        return result\n\nmy_text = Text(\"Hello, World! This is a test.\")\nprint(my_text.word_count())  # Output: 6\nprint(my_text.shout())  # Output: HELLO, WORLD! THIS IS A TEST!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6\nHELLO, WORLD! THIS IS A TEST!\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Accessing Attributes and Methods\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Accessing Attributes\n- Use dot notation to access attributes and methods of a class instance.\n\n::: {#2cfe2dbd .cell execution_count=4}\n``` {.python .cell-code}\nprint(my_text.content)  # Output: Hello, World! This is a test.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World! This is a test.\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Explanation\n- Accessed the `content` attribute of `my_text` using dot notation.\n:::\n:::\n\n---\n\n## Class vs. Instance Attributes\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Class vs. Instance Attributes\n- **Instance attributes** are defined in `__init__()` and belong to a specific instance.\n- **Class attributes** are shared by all instances and defined directly in the class body.\n\n#### Example:\n\n::: {#a98de8c7 .cell execution_count=5}\n``` {.python .cell-code}\nclass Text:\n    language = \"English\"  # Class attribute\n\n    def __init__(self, content):\n        self.content = content  # Instance attribute\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Accessing Class Attributes\n\n::: {#ae9e5df5 .cell execution_count=6}\n``` {.python .cell-code}\ntext1 = Text(\"Hello, World!\")\ntext2 = Text(\"Bonjour, le monde!\")\n\nprint(text1.language)  # Output: English\nprint(text2.language)  # Output: English\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnglish\nEnglish\n```\n:::\n:::\n\n\n:::\n:::\n\n---\n\n## Changing Class Attributes\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### Changing Class Attributes\n- Modifying a class attribute affects all instances.\n\n::: {#19c3ec83 .cell execution_count=7}\n``` {.python .cell-code}\nText.language = \"French\"\nprint(text1.language)  # Output: French\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrench\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Explanation\n- Changing `Text.language` affects all instances of the class.\n:::\n:::\n\n---\n\n## Inheritance\n\n:::{.columns}\n::: {.column width=\"50%\"}\n### What Is Inheritance?\n- Inheritance allows creating a new class that inherits attributes and methods from an existing class.\n- Promotes code reuse and enables class hierarchies.\n\n#### Example:\n\n::: {#731d7244 .cell execution_count=8}\n``` {.python .cell-code}\nclass Text:\n    def __init__(self, content):\n        self.content = content\n\nclass FormattedText(Text):  # Derived class\n    def __init__(self, content, format_type):\n        super().__init__(content)  # Call the parent class's constructor\n```\n:::\n\n\n:::\n::: {.column width=\"50%\" .fragment}\n### Extending Functionality\n\n::: {#08dab031 .cell execution_count=9}\n``` {.python .cell-code}\n    def display(self):\n        return f\"[{self.format_type}] {self.content}\"\n\n# Creating instances\nmy_text = Text(\"Hello, World!\")\nformatted_text = FormattedText(\"Hello, World!\", \"Bold\")\n\nprint(my_text.word_count())  # Output: 2\nprint(formatted_text.display())  # Output: [Bold] Hello, World!\n```\n:::\n\n\n:::\n:::\n\n---\n\n## Key Takeaways\n\n:::{.columns}\n::: {.column width=\"50%\"}\n- Classes encapsulate data and functionality.\n- Attributes can be instance-specific or shared across instances.\n- Inheritance enables the creation of new classes based on existing ones, promoting reusability.\n:::\n::: {.column width=\"50%\" .fragment}\n:::\n:::\n\n",
    "supporting": [
      "classes_files"
    ],
    "filters": [],
    "includes": {}
  }
}