---
title: "Conditional Statements in Python"
format: 
    revealjs:
        theme: default
        chalkboard: true
        footer: "Seminar: LLM, SoSe 2025"
        logo: ../../assets/logo.svg
        slideNumber: true
        smaller: true
---

## Conditional Statements in Python

:::{.columns}
::: {.column width="50%"}
### What Are Conditional Statements?
- Control the flow of your program based on conditions.
- The most common statement is the **`if` statement**, which executes code only when a condition is true.
- Useful for decision-making in various applications, including NLP tasks.

```{python}
#| eval: False
if condition:
    # Code to be executed if the condition is True
    pass
```
:::
::: {.column width="50%" .fragment}
### Importance in NLP
- Adjust processing based on conditions (e.g., text case, keyword presence).
- Enable flexible and dynamic responses to input data.

```{python}
#| echo: true
word = "HELLO"
if word.isupper():
    print("The word is uppercase!")  # Output: The word is uppercase!
```
:::
:::

---

## The `if` Statement

:::{.columns}
::: {.column width="50%"}
### Basic Syntax of `if`
- Check a condition and execute a block of code if it evaluates to **True**.

```{python}
#| echo: true
x = 10
if x > 5:
    print("x is greater than 5")  # Output: x is greater than 5
```
:::
::: {.column width="50%" .fragment}
### Explanation
- The condition `x > 5` is checked.
- Since `x` is 10, the print statement executes.
:::
:::

---

## The `else` Statement

:::{.columns}
::: {.column width="50%"}
### Using the `else` Statement
- Defines what happens when the `if` condition is **False**.

```{python}
#| echo: true
x = 3
if x > 5:
    print("x is greater than 5")
else:
    print("x is not greater than 5")  # Output: x is not greater than 5
```
:::
::: {.column width="50%" .fragment}
### Explanation
- Since `x` is 3, the `else` block executes, printing "x is not greater than 5".
:::
:::

---

## The `elif` Statement

:::{.columns}
::: {.column width="50%"}
### Multiple Conditions with `elif`
- Use `elif` to check additional conditions if the previous ones are false.

```{python}
#| echo: true
x = 7
if x > 10:
    print("x is greater than 10")
elif x > 5:
    print("x is greater than 5 but less than or equal to 10")  # Output: x is greater than 5 but less than or equal to 10
else:
    print("x is less than or equal to 5")
```
:::
::: {.column width="50%" .fragment}
### Explanation
- Python checks each condition sequentially; `x > 10` is false, but `x > 5` is true.
:::
:::

---

## Using Comparison Operators

:::{.columns}
::: {.column width="50%"}
### Common Comparison Operators
- `==`: Equal to
- `!=`: Not equal to
- `>`: Greater than
- `<`: Less than
- `>=`: Greater than or equal to
- `<=`: Less than or equal to

```{python}
#| echo: true
age = 18
if age == 18:
    print("You are 18 years old")  # Output: You are 18 years old
if age != 20:
    print("You are not 20 years old")  # Output: You are not 20 years old
```
:::
::: {.column width="50%" .fragment}
### Explanation
- The `==` operator checks if `age` is 18, while the `!=` operator checks if it is not 20.
:::
:::

---

## Logical Operators

:::{.columns}
::: {.column width="50%"}
### Combining Conditions
- Use **logical operators** to evaluate multiple conditions.

```{python}
#| echo: true
x = 7

if x > 5 and x < 10:
    print("x is between 5 and 10")  # Output: x is between 5 and 10
```
:::
::: {.column width="50%" .fragment}
### Other Logical Operators
- `or`: True if at least one condition is true.
- `not`: Inverts the truth value of the condition.

```{python}
#| echo: true
if x < 5 or x > 6:
    print("x is either less than 5 or greater than 6")  # Output: x is either less than 5 or greater than 6

if not x == 5:
    print("x is not equal to 5")  # Output: x is not equal to 5
```
:::
:::

---

## Nested `if` Statements

:::{.columns}
::: {.column width="50%"}
### What Are Nested `if` Statements?
- Place one `if` statement inside another to check multiple conditions that depend on each other.

```{python}
#| echo: true
x = 10
y = 20

if x > 5:
    if y > 15:
        print("x is greater than 5 and y is greater than 15")  # Output: x is greater than 5 and y is greater than 15
```
:::
::: {.column width="50%" .fragment}
### Explanation
- First check `x > 5`. If true, then check `y > 15`.
:::
:::

---

## Checking Membership with `in` Operator

:::{.columns}
::: {.column width="50%"}
### Using the `in` Operator
- Check if a value exists in a collection (e.g., list, string, tuple).

```{python}
#| echo: true
fruits = ["apple", "banana", "cherry"]

if "banana" in fruits:
    print("Banana is in the list!")  # Output: Banana is in the list!
```
:::
::: {.column width="50%" .fragment}
### Example with Strings
```{python}
#| echo: true
sentence = "Hello world"
if "world" in sentence:
    print("The word 'world' is in the sentence.")  # Output: The word 'world' is in the sentence.
```
:::
:::

---

## Combining Conditions in Practical Examples

:::{.columns}
::: {.column width="50%"}
### Example: Password Validation
- Check user input against certain conditions for validity.

```{python}
#| echo: true
password = "Hello123"

if len(password) >= 8 and any(char.isdigit() for char in password):
    print("Password is valid")  # Output: Password is valid
else:
    print("Password must be at least 8 characters long and contain a number.")
```
:::
::: {.column width="50%" .fragment}
### Explanation
- Checks for length and if any character is a digit using `char.isdigit()`.
:::
:::

---

## Edge Cases and Handling Errors

:::{.columns}
::: {.column width="50%"}
### Importance of Edge Case Handling
- Think about situations where input values might cause errors, such as empty strings or division by zero.

```{python}
#| echo: true
# Checking for division by zero
numerator = 10
denominator = 0

if denominator != 0:
    result = numerator / denominator
    print(result)
else:
    print("Cannot divide by zero")  # Output: Cannot divide by zero
```
:::
::: {.column width="50%" .fragment}
### Explanation
- Use conditionals to prevent errors like division by zero by checking if the denominator is not zero.
:::
:::
