[
  {
    "objectID": "test_viz.html",
    "href": "test_viz.html",
    "title": "",
    "section": "",
    "text": "# prerequisites\n\nimport os\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom sklearn.manifold import TSNE\nfrom llm_utils.client import get_openai_client, OpenAIModels\n\nMODEL = OpenAIModels.EMBED.value\n\n# get the OpenAI client\nclient = get_openai_client(\n    model=MODEL,\n    config_path=os.environ.get(\"CONFIG_PATH\")\n)\n\n# Define a list of words to visualize\nwords = [\"python\", \"javascript\", \"c++\", \"reptile\", \"snake\"]\n\n# Get embeddings for the words\nresponse = client.embeddings.create(\n    input=words,\n    model=MODEL\n)\n\nembeddings = [emb.embedding for emb in response.data]\n\n# Apply t-SNE dimensionality reduction\ntsne = TSNE(\n    n_components=2, \n    random_state=42,\n    perplexity=4 # see documentation to set this correctly\n)\nembeddings_2d = tsne.fit_transform(np.array(embeddings))\n\n# Plot the embeddings in a two-dimensional scatter plot\nplt.figure(figsize=(10, 8))\nfor i, word in enumerate(words):\n    x, y = embeddings_2d[i]\n    plt.scatter(x, y, marker='o', color='red')\n    plt.text(x, y, word, fontsize=9)\n\nplt.xlabel(\"t-SNE dimension 1\")\nplt.ylabel(\"t-SNE dimension 2\")\nplt.grid(True)\nplt.xticks([])\nplt.yticks([])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "nlp/exercises/ex_word_matching.html",
    "href": "nlp/exercises/ex_word_matching.html",
    "title": "Exercise: Word matching",
    "section": "",
    "text": "Task: For each element of the following list of keywords, determine whether it is contained in the text.\nInstructions:\n\nTransform the text to lower case and use a tokenizer to split the text into word tokens.\nFirst, use a simple comparison of strings to check whether the keywords match any token. When does this approach fail?\nLemmatize the tokens from your text in order to handle some more matching cases. When does this approach still fail? Hint: Use the different options for pos in order to handle different types of words such as nouns, verbs etc.\n\n\ntext = \"The company's latest quarterly earnings reports exceeded analysts' expectations, driving up the stock price. However, concerns about future growth prospects weighed on investor sentiment. The CEO announced plans to diversify the company's product portfolio and expand into new markets, aiming to sustain long-term profitability. The marketing team launched a new advertising campaign to promote the company's flagship product, targeting key demographics. Despite challenges in the competitive landscape, the company remains committed to innovation and customer satisfaction.\"\n\n\nkeywords = [\n    \"Announce\", \n    \"Aim\",\n    \"Earnings\",\n    \"Quarter\",\n    \"Report\",\n    \"Investor\",\n    \"Analysis\",\n    \"Market\",\n    \"Diversity\",\n    \"Product portfolio\",\n    \"Advertisment\",\n    \"Stock\",\n    \"Landscpe\" # yes, this is here on purpose\n]\n\n\n\nShow solution\n\n\nfrom pprint import pprint\nfrom nltk.tokenize import wordpunct_tokenize\n\ntext_token = wordpunct_tokenize(text=text.lower())\ndetected_words = [\n    (keyword, keyword.lower() in text_token) for keyword in keywords\n]\npprint(detected_words)\nprint(f\"\\nDetected {sum([x[1] for x in detected_words])}/{len(keywords)} words.\")\n\n[('Announce', False),\n ('Aim', False),\n ('Earnings', True),\n ('Quarter', False),\n ('Report', False),\n ('Investor', True),\n ('Analysis', False),\n ('Market', False),\n ('Diversity', False),\n ('Product portfolio', False),\n ('Advertisment', False),\n ('Stock', True),\n ('Landscpe', False)]\n\nDetected 3/13 words.\n\n\n\nfrom nltk.stem import WordNetLemmatizer\n\nwnl = WordNetLemmatizer()\n\nlemmatized_text_token = [\n    wnl.lemmatize(w) for w in text_token\n]\ndetected_words = [\n    (keyword, keyword.lower() in lemmatized_text_token) for keyword in keywords\n]\npprint(detected_words)\nprint(f\"\\nDetected {sum([x[1] for x in detected_words])}/{len(keywords)} words.\")\n\n[('Announce', False),\n ('Aim', False),\n ('Earnings', True),\n ('Quarter', False),\n ('Report', True),\n ('Investor', True),\n ('Analysis', False),\n ('Market', True),\n ('Diversity', False),\n ('Product portfolio', False),\n ('Advertisment', False),\n ('Stock', True),\n ('Landscpe', False)]\n\nDetected 5/13 words.\n\n\n\nfully_lemmatized_text_token = []\n\nfor token in text_token:\n    lemmatized_token = token\n    for pos in [\"n\", \"v\", \"a\"]:\n        lemmatized_token = wnl.lemmatize(token, pos=pos)\n        \n        fully_lemmatized_text_token.append(lemmatized_token)\n\ndetected_words = [\n    (keyword, keyword.lower() in fully_lemmatized_text_token) for keyword in keywords\n]\npprint(detected_words)    \nprint(f\"\\nDetected {sum([x[1] for x in detected_words])}/{len(keywords)} words.\")  \n        \n\n[('Announce', True),\n ('Aim', True),\n ('Earnings', True),\n ('Quarter', False),\n ('Report', True),\n ('Investor', True),\n ('Analysis', False),\n ('Market', True),\n ('Diversity', False),\n ('Product portfolio', False),\n ('Advertisment', False),\n ('Stock', True),\n ('Landscpe', False)]\n\nDetected 7/13 words.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Exercise: Word matching"
    ]
  },
  {
    "objectID": "nlp/exercises/ex_tokenization.html",
    "href": "nlp/exercises/ex_tokenization.html",
    "title": "Exercise: Sentence tokenization",
    "section": "",
    "text": "Task: Write a sentence tokenizer that takes the given paragraph and tokenizes it into sentences. Then, count the number of sentences and display the result.\nInstructions:\n\nStart with just a simple punctuation (.) as the delimiter for sentences.\nCheck out the regex library re and the function re.split to include also other delimiters. Try out the following regex r'[.:;!?]\\s*'.\n\n\nparagraph = \"The distant planet, its surface shrouded in mystery and intrigue! With its swirling clouds and alien landscapes, the planet: a tantalizing enigma to explorers and scientists alike? Oh, the wonders it conceals: ancient ruins and extraterrestrial life forms, waiting to be discovered! As the spacecraft descended through the atmosphere, anticipation filled the hearts of the crew. Little did they know, their journey was about to unveil secrets beyond their wildest imagination.\"\n\n\n\nShow code\n\n\nfrom typing import List\n\ndef tokenize_sentences_at_dot(paragraph: str) -&gt; List[str]:\n    sentence_tokens = paragraph.split(\".\")\n    sentence_tokens = [s.strip() for s in sentence_tokens] # remove white space after .\n    \n    return sentence_tokens\n\n\ntokenized_sentence = tokenize_sentences_at_dot(paragraph=paragraph)\nprint(f\"The paragraph contains {len(tokenized_sentence)} sentences.\")\n\nThe paragraph contains 3 sentences.\n\n\n\nimport re \n\ndef tokenize_sentences_at_punctuation(paragraph: str) -&gt; List[str]:\n    sentence_tokens = re.split(r'[.:;!?]\\s*', paragraph)\n    sentence_tokens = [s.strip() for s in sentence_tokens] # remove white space after .\n    \n    return sentence_tokens\n\n\ntokenized_sentence = tokenize_sentences_at_punctuation(paragraph=paragraph)\nprint(f\"The paragraph contains {len(tokenized_sentence)} sentences.\")\n\nThe paragraph contains 8 sentences.\n\n\n\nfor sentence in tokenized_sentence:\n    print(sentence)\n\nThe distant planet, its surface shrouded in mystery and intrigue\nWith its swirling clouds and alien landscapes, the planet\na tantalizing enigma to explorers and scientists alike\nOh, the wonders it conceals\nancient ruins and extraterrestrial life forms, waiting to be discovered\nAs the spacecraft descended through the atmosphere, anticipation filled the hearts of the crew\nLittle did they know, their journey was about to unveil secrets beyond their wildest imagination\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Exercise: Sentence tokenization"
    ]
  },
  {
    "objectID": "nlp/statistical_text_analysis.html",
    "href": "nlp/statistical_text_analysis.html",
    "title": "Statistical text analysis",
    "section": "",
    "text": "So far we have mainly looked at the analysis of single words/token or n-grams. But what about the analysis of a full text? There are many approaches to this but a good way to get into the topic is a simple statistical analysis of a text. For starters, let’s simply count the number of appearances of each word in a text, also known as term frequency.\nfrom nltk.tokenize import wordpunct_tokenize\nfrom string import punctuation\nfrom collections import Counter\nfrom typing import List\n\nfrom nltk.corpus import stopwords\n# python -m nltk.downloader stopwords -&gt; run this in your console once to get the stopwords\n\n\n# load a text from file\ntext = \"\"\nwith open(\"../assets/chapter1.txt\", \"r\") as file:  \n    for line in file:\n        text += line.strip()\n\n\ndef preprocess_text(text: str) -&gt; List[str]:\n    # tokenize text\n    tokens = wordpunct_tokenize(text.lower())\n\n    # remove punctuation\n    tokens = [t for t in tokens if t not in punctuation]\n\n    # remove stopwords\n    stop_words = stopwords.words(\"english\")\n    tokens = [t for t in tokens if t not in stop_words]\n\n    return tokens\n\n# count the most frequent words\ntokens = preprocess_text(text=text)\n\nfor t in Counter(tokens).most_common(15):\n    print(f\"{t[0]}: {t[1]}\")\n\none: 35\nwinston: 32\nface: 28\neven: 24\n--: 24\nbig: 22\ncould: 19\nparty: 18\nwould: 18\nmoment: 18\nlike: 17\nbrother: 15\ngoldstein: 15\ntelescreen: 14\nseemed: 14\nJust from the most frequent words, can you guess the text?\nIn many cases, just the simple number of appearances of a token in a text can determine its importance. The concept of counting the term frequency across multiple documents in order to create a fixed vocabulary is also known as bag of words.",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Statistical text analysis"
    ]
  },
  {
    "objectID": "nlp/statistical_text_analysis.html#bag-of-words",
    "href": "nlp/statistical_text_analysis.html#bag-of-words",
    "title": "Statistical text analysis",
    "section": "Bag of Words",
    "text": "Bag of Words\nIf we do the same with multiple texts, we can build up a vocabulary of words and compare different texts to each other based on the appearance of terms.\n\nfrom collections import Counter\n\n\ndef create_bag_of_words(texts):\n    # Count the frequency of each word in the corpus\n    word_counts = Counter()\n    \n    for text in texts:\n        # Preprocess the text\n        words = preprocess_text(text)\n        \n        # Update word counts\n        word_counts.update(words)\n    \n    # Create vocabulary by sorting the words based on their frequency\n    vocabulary = [word for word, _ in sorted(word_counts.items())]\n    \n    # Create BoW vectors for each document\n    bow_vectors = []\n    for text in texts:\n        # Preprocess the text\n        words = preprocess_text(text)\n        \n        # Create a Counter object to count word frequencies\n        bow_vector = Counter(words)\n        \n        # Fill in missing words with zero counts\n        for word in vocabulary:\n            if word not in bow_vector:\n                bow_vector[word] = 0\n\n        # Sort the BoW vector based on the vocabulary order\n        sorted_bow_vector = [bow_vector[word] for word in vocabulary]\n        \n        # Append the BoW vector to the list\n        bow_vectors.append(sorted_bow_vector)\n    \n    return vocabulary, bow_vectors\n\n# Example texts\ntexts = [\n    \"This is the first document.\",\n    \"This document is the second document.\",\n    \"And this is the third one.\",\n    \"Is this the first document?\",\n]\n\n# Create Bag of Words\nvocabulary, bow_vectors = create_bag_of_words(texts)\n\n# Print vocabulary\nprint(\"Vocabulary:\")\nprint(vocabulary)\n\n# Print BoW vectors\nprint(\"\\nBag of Words Vectors:\")\nfor i, bow_vector in enumerate(bow_vectors):\n    print(f\"Document {i + 1}: {bow_vector}\")\n\nVocabulary:\n['document', 'first', 'one', 'second', 'third']\n\nBag of Words Vectors:\nDocument 1: [1, 1, 0, 0, 0]\nDocument 2: [2, 0, 0, 1, 0]\nDocument 3: [0, 0, 1, 0, 1]\nDocument 4: [1, 1, 0, 0, 0]\n\n\nBag of words actually gives us some vector representation of our texts with respect to the given vocabulary. We can even calculate with these vectors and try to determine a similarity between the texts.\n\nimport numpy as np\n\ndef cosine_similarity(vec1: np.array, vec2: np.array) -&gt; float: \n    return np.dot(vec1, vec2) / ( np.linalg.norm(vec1) * np.linalg.norm(vec2) )\n\n\nquery = bow_vectors[3]\n\nsimilarities = []\nfor i, bv in enumerate(bow_vectors):\n\n    similarity = cosine_similarity(\n            vec1=query, \n            vec2=bv\n        )\n\n    similarities.append(\n        (texts[i], round(similarity, 2))\n    )\n\nsimilarities\n\n[('This is the first document.', 1.0),\n ('This document is the second document.', 0.63),\n ('And this is the third one.', 0.0),\n ('Is this the first document?', 1.0)]",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Statistical text analysis"
    ]
  },
  {
    "objectID": "nlp/statistical_text_analysis.html#limitations-of-term-frequency-and-bag-of-words",
    "href": "nlp/statistical_text_analysis.html#limitations-of-term-frequency-and-bag-of-words",
    "title": "Statistical text analysis",
    "section": "Limitations of Term Frequency and Bag of Words",
    "text": "Limitations of Term Frequency and Bag of Words\nPure statistical text analysis methods like Term Frequency (also its extension Term Frequency-Inverse Document Frequency) or Bag of Words are usually a convenient starting point for text analysis. However, while they offer useful insights into textual data, they are not without their limitations.\nOne significant drawback is the sheer size of the vocabulary they handle. As the corpus grows, so does the vocabulary, which can become overwhelmingly large, leading to computational inefficiencies and increased memory requirements.\nMoreover, the mentioned methods struggle with out-of-vocabulary words. Since the vocabulary is fixed after the training has finished (the bag of words has been created with plenty of documents), words not present in the vocabulary are often either ignored, leading to information loss, or arbitrarily handled, potentially skewing the analysis results. This limitation becomes particularly pronounced in domains with specialized jargon or evolving lexicons.\nAnother critical limitation is the lack of context in these approaches. By treating each word independently and ignoring their sequential and syntactical relationships, TF and Bag of Words fail to capture the nuanced meanings embedded in language. This deficiency hampers their ability to comprehend subtleties such as sarcasm, irony, or metaphors, limiting their applicability in tasks requiring deeper semantic understanding.\nLast but not least, these methods lack structural awareness. They disregard the hierarchical and syntactic structures inherent in language, missing out on essential cues provided by sentence and paragraph boundaries. Thus they often struggle to differentiate between sentences with similar word distributions but differing in meaning or intent.\nAs a consequence, more sophisticated methods are required to really start understanding human language in a more sophisticated way. But before we get to such methods, let’s try one more thing.",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Statistical text analysis"
    ]
  },
  {
    "objectID": "nlp/statistical_text_analysis.html#clustering-of-bag-of-word-vectors",
    "href": "nlp/statistical_text_analysis.html#clustering-of-bag-of-word-vectors",
    "title": "Statistical text analysis",
    "section": "Clustering of Bag of Word vectors",
    "text": "Clustering of Bag of Word vectors\nAs we’ve seen above, the idea of BoW already gives us a rather simple possibility to compare texts to each other. Whenever we can compare different entities to each other (here: the texts), a pretty straight-forward extension is to try and find clusters, that is, groups of similar texts.\nClustering using bag-of-word vectors is a common technique in text analysis for grouping similar documents together based on the similarity of their word distributions. As seen above, each document is represented as a high-dimensional vector, with each dimension corresponding to a unique word in the vocabulary and its value reflecting the frequency of that word in the document. By treating documents as points in a high-dimensional space, clustering algorithms such as K-means or hierarchical clustering can be applied to partition the documents into coherent groups. The similarity between documents is typically measured using distance metrics such as cosine similarity or Euclidean distance, which quantify the degree of overlap between their word distributions.\nOne advantage of using bag-of-word vectors for clustering is its simplicity and scalability. Since the vectors only capture the frequency of words without considering their order or context, the computational complexity remains manageable even for large datasets with extensive vocabularies. However, clustering based on bag-of-word vectors also has its limitations. One major drawback is the reliance on word frequency alone, which may overlook important semantic similarities between documents. Additionally, the curse of dimensionality can become a challenge as the size of the vocabulary increases, leading to decreased clustering performance and increased computational overhead. Despite these limitations, clustering using bag-of-word vectors serves as a foundational approach in text analysis, providing valuable insights into document similarity and aiding tasks such as document organization, topic modeling, and information retrieval.\nLet’s finish up with a small code example.\n\nfrom sklearn.cluster import KMeans\n\n# do K-means clustering\nn_clusters = 2  # specify the number of clusters\nkmeans = KMeans(n_clusters=n_clusters, n_init=\"auto\")\ncluster_labels = kmeans.fit_predict(bow_vectors)\n\nprint(\"Cluster labels:\\n\")\nfor i, label in enumerate(cluster_labels):\n    print(f\"Document {i + 1} belongs to Cluster {label + 1}\")\n\nCluster labels:\n\nDocument 1 belongs to Cluster 1\nDocument 2 belongs to Cluster 2\nDocument 3 belongs to Cluster 1\nDocument 4 belongs to Cluster 1\n\n\nLet’s maybe do this with some “texts” that are more likely to actually create some clusters. And, of course, there are packages that can do the Bag of Words for us. Here we use scikit-learn.\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.cluster import KMeans\nimport numpy as np\n\n# Example texts representing different topics\ntexts = [\n    \"apple orange banana\",\n    \"apple orange mango\",\n    \"banana apple kiwi\",\n    \"strawberry raspberry blueberry\",\n    \"strawberry raspberry blackberry\"\n]\n\n# create Bag of Words using CountVectorizer\nvectorizer = CountVectorizer()\nbow_matrix = vectorizer.fit_transform(texts)\n\nprint(\"Bag of Word vectors:\")\nprint(bow_matrix.toarray())\n\n# perform K-means clustering\nnum_clusters = 2\nkmeans = KMeans(n_clusters=num_clusters, n_init=\"auto\")\ncluster_labels = kmeans.fit_predict(bow_matrix)\n\nprint(\"\\nCluster labels:\")\nfor i, label in enumerate(cluster_labels):\n    print(f\"Document {i + 1} belongs to Cluster {label + 1}\")\n\nBag of Word vectors:\n[[1 1 0 0 0 0 1 0 0]\n [1 0 0 0 0 1 1 0 0]\n [1 1 0 0 1 0 0 0 0]\n [0 0 0 1 0 0 0 1 1]\n [0 0 1 0 0 0 0 1 1]]\n\nCluster labels:\nDocument 1 belongs to Cluster 2\nDocument 2 belongs to Cluster 2\nDocument 3 belongs to Cluster 2\nDocument 4 belongs to Cluster 1\nDocument 5 belongs to Cluster 1\n\n\n\n# Get the vocabulary\nvocabulary = vectorizer.get_feature_names_out()\n\n# print the vocabulary\nprint(\"Vocabulary:\")\nprint(vocabulary)\n\n# print the Bag of Words matrix with corresponding words\nprint(\"\\nBag of Words matrix with corresponding words:\")\nbow_matrix_array = bow_matrix.toarray()\nfor i, document_vector in enumerate(bow_matrix_array):\n    words_in_document = [(word, frequency) for word, frequency in zip(vocabulary, document_vector) if frequency &gt; 0]\n    print(f\"Document {i + 1}: {words_in_document}\")\n\nVocabulary:\n['apple' 'banana' 'blackberry' 'blueberry' 'kiwi' 'mango' 'orange'\n 'raspberry' 'strawberry']\n\nBag of Words matrix with corresponding words:\nDocument 1: [('apple', 1), ('banana', 1), ('orange', 1)]\nDocument 2: [('apple', 1), ('mango', 1), ('orange', 1)]\nDocument 3: [('apple', 1), ('banana', 1), ('kiwi', 1)]\nDocument 4: [('blueberry', 1), ('raspberry', 1), ('strawberry', 1)]\nDocument 5: [('blackberry', 1), ('raspberry', 1), ('strawberry', 1)]",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Statistical text analysis"
    ]
  },
  {
    "objectID": "nlp/overview.html",
    "href": "nlp/overview.html",
    "title": "Overview of NLP",
    "section": "",
    "text": "In order to understand and appreciate very advanced topics such as Large Language Models, it is often helpful to get a quick overview of the history and how things developed. So let’s get started with a few basics.",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Overview of NLP"
    ]
  },
  {
    "objectID": "nlp/overview.html#a-short-history-of-natural-language-processing",
    "href": "nlp/overview.html#a-short-history-of-natural-language-processing",
    "title": "Overview of NLP",
    "section": "A short history of Natural Language Processing",
    "text": "A short history of Natural Language Processing\nThe field of Natural Language Processing (NLP) has undergone a remarkable evolution, spanning decades and driven by the convergence of computer science, artificial intelligence, and linguistics. From its nascent stages to its current state, NLP has witnessed transformative shifts, propelled by groundbreaking research and technological advancements. Today, it stands as a testament to humanity’s quest to bridge the gap between human language and machine comprehension. The journey through NLP’s history offers profound insights into its trajectory and the challenges encountered along the way.\n\nEarly Days: Rule-Based Approaches (1960s-1980s)\nIn its infancy, NLP relied heavily on rule-based approaches, where researchers painstakingly crafted sets of linguistic rules to analyze and manipulate text. This period, spanning from the 1960s to the 1980s, saw significant efforts in tasks such as part-of-speech tagging, named entity recognition, and machine translation. However, rule-based systems struggled to cope with the inherent ambiguity and complexity of natural language. Different languages presented unique challenges, necessitating the development of language-specific rulesets. Despite their limitations, rule-based approaches laid the groundwork for future advancements in NLP.\n\n\nRise of Statistical Methods (1990s-2000s)\nThe 1990s marked a pivotal shift in NLP with the emergence of statistical methods as a viable alternative to rule-based approaches. Researchers began harnessing the power of statistics and probabilistic models to analyze large corpora of text. Techniques like Hidden Markov Models and Conditional Random Fields gained prominence, offering improved performance in tasks such as text classification, sentiment analysis, and information extraction. Statistical methods represented a departure from rigid rule-based systems, allowing for greater flexibility and adaptability. However, they still grappled with the nuances and intricacies of human language, particularly in handling ambiguity and context.\n\n\nMachine Learning Revolution (2010s)\nThe advent of the 2010s witnessed a revolution in NLP fueled by the rise of machine learning, particularly deep learning. With the availability of vast amounts of annotated data and unprecedented computational power, researchers explored neural network architectures tailored for NLP tasks. Recurrent Neural Networks (RNNs) and Convolutional Neural Networks (CNNs) gained traction, demonstrating impressive capabilities in tasks such as sentiment analysis, text classification, and sequence generation. These models represented a significant leap forward in NLP, enabling more nuanced and context-aware language processing.\n\n\nLarge Language Models: Transformers (2010s-Present)\nThe latter half of the 2010s heralded the rise of large language models, epitomized by the revolutionary Transformer architecture. Powered by self-attention mechanisms, Transformers excel at capturing long-range dependencies in text and generating coherent and contextually relevant responses. Pre-trained on massive text corpora, models like GPT (Generative Pre-trained Transformer) have achieved unprecedented performance across a wide range of NLP tasks, including machine translation, question-answering, and language understanding. Their ability to leverage vast amounts of data and learn intricate patterns has propelled NLP to new heights of sophistication.",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Overview of NLP"
    ]
  },
  {
    "objectID": "nlp/overview.html#challenges-in-nlp",
    "href": "nlp/overview.html#challenges-in-nlp",
    "title": "Overview of NLP",
    "section": "Challenges in NLP",
    "text": "Challenges in NLP\nDespite the remarkable progress, NLP grapples with a myriad of challenges that continue to shape its trajectory:\n\nAmbiguity of Language: The inherent ambiguity of natural language poses significant challenges in accurately interpreting meaning, especially in tasks like sentiment analysis and named entity recognition.\nDifferent Languages: NLP systems often struggle with languages other than English, facing variations in syntax, semantics, and cultural nuances, requiring tailored approaches for each language.\nBias: NLP models can perpetuate biases present in the training data, leading to unfair or discriminatory outcomes, particularly in tasks like text classification and machine translation.\nImportance of Context: Understanding context is paramount for NLP tasks, as the meaning of words and phrases can vary drastically depending on the surrounding context.\nWorld Knowledge: NLP systems lack comprehensive world knowledge, hindering their ability to understand references, idioms, and cultural nuances embedded in text.\nCommon Sense Reasoning: Despite advancements, NLP models still struggle with common sense reasoning, often producing nonsensical or irrelevant responses in complex scenarios.",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Overview of NLP"
    ]
  },
  {
    "objectID": "nlp/overview.html#classic-nlp-tasksapplications",
    "href": "nlp/overview.html#classic-nlp-tasksapplications",
    "title": "Overview of NLP",
    "section": "Classic NLP tasks/applications",
    "text": "Classic NLP tasks/applications\n\nPart-of-Speech Tagging\nPart-of-speech tagging involves labeling each word in a sentence with its corresponding grammatical category, such as noun, verb, adjective, or adverb. For example, in the sentence “The cat is sleeping,” part-of-speech tagging would identify “cat” as a noun and “sleeping” as a verb. This task is crucial for many NLP applications, including language understanding, information retrieval, and machine translation. Accurate part-of-speech tagging lays the foundation for deeper linguistic analysis and improves the performance of downstream tasks.\n\n\nCode example\n\n\nimport spacy\n\n# Load the English language model\nnlp = spacy.load(\"en_core_web_sm\")\n\n# Example text\ntext = \"The sun sets behind the mountains, casting a golden glow across the sky.\"\n\n# Process the text with spaCy\ndoc = nlp(text)\n\n# Find the maximum length of token text and POS tag\nmax_token_length = max(len(token.text) for token in doc)\nmax_pos_length = max(len(token.pos_) for token in doc)\n\n# Print each token along with its part-of-speech tag\nfor token in doc:\n    print(f\"Token: {token.text.ljust(max_token_length)} | POS Tag: {token.pos_.ljust(max_pos_length)}\")\n\nToken: The       | POS Tag: DET  \nToken: sun       | POS Tag: NOUN \nToken: sets      | POS Tag: VERB \nToken: behind    | POS Tag: ADP  \nToken: the       | POS Tag: DET  \nToken: mountains | POS Tag: NOUN \nToken: ,         | POS Tag: PUNCT\nToken: casting   | POS Tag: VERB \nToken: a         | POS Tag: DET  \nToken: golden    | POS Tag: ADJ  \nToken: glow      | POS Tag: NOUN \nToken: across    | POS Tag: ADP  \nToken: the       | POS Tag: DET  \nToken: sky       | POS Tag: NOUN \nToken: .         | POS Tag: PUNCT\n\n\n\n\n\nNamed Entity Recognition\nNamed Entity Recognition (NER) involves identifying and classifying named entities in text, such as people, organizations, locations, dates, and more. For instance, in the sentence “Apple is headquartered in Cupertino,” NER would identify “Apple” as an organization and “Cupertino” as a location. NER is essential for various applications, including information retrieval, document summarization, and question-answering systems. Accurate NER enables machines to extract meaningful information from unstructured text data.\n\n\nCode example\n\n\nimport spacy\n\n# Load the English language model\nnlp = spacy.load(\"en_core_web_sm\")\n\n# Example text\ntext = \"Apple is considering buying a U.K. based startup called LanguageHero located in London for $1 billion.\"\n\n# Process the text with spaCy\ndoc = nlp(text)\n\n# Print each token along with its Named Entity label\nfor ent in doc.ents:\n    print(f\"Entity: {ent.text.ljust(20)} | Label: {ent.label_}\")\n\nEntity: Apple                | Label: ORG\nEntity: U.K.                 | Label: GPE\nEntity: LanguageHero         | Label: PRODUCT\nEntity: London               | Label: GPE\nEntity: $1 billion           | Label: MONEY\n\n\n\n\n\nMachine Translation\nMachine Translation (MT) aims to automatically translate text from one language to another, facilitating communication across language barriers. For example, translating a sentence from English to Spanish or vice versa. MT systems utilize sophisticated algorithms and linguistic models to generate accurate translations while preserving the original meaning and nuances of the text. MT has numerous practical applications, including cross-border communication, localization of software and content, and global commerce.\n\n\nSentiment Analysis\nSentiment Analysis involves analyzing text data to determine the sentiment or opinion expressed within it, such as positive, negative, or neutral. For instance, analyzing product reviews to gauge customer satisfaction or monitoring social media sentiment towards a brand. Sentiment Analysis employs machine learning algorithms to classify text based on sentiment, enabling businesses to understand customer feedback, track public opinion, and make data-driven decisions.\n\n\nCode example\n\n\n# python -m textblob.download_corpora\n\nfrom textblob import TextBlob\n\n# Example text\ntext = \"I love TextBlob! It's an amazing library for natural language processing.\"\n\n# Perform sentiment analysis with TextBlob\nblob = TextBlob(text)\nsentiment_score = blob.sentiment.polarity\n\n# Determine sentiment label based on sentiment score\nif sentiment_score &gt; 0:\n    sentiment_label = \"Positive\"\nelif sentiment_score &lt; 0:\n    sentiment_label = \"Negative\"\nelse:\n    sentiment_label = \"Neutral\"\n\n# Print sentiment analysis results\nprint(f\"Text: {text}\")\nprint(f\"Sentiment Score: {sentiment_score:.2f}\")\nprint(f\"Sentiment Label: {sentiment_label}\")\n\nText: I love TextBlob! It's an amazing library for natural language processing.\nSentiment Score: 0.44\nSentiment Label: Positive\n\n\n\n\n\nText Classification\nText Classification is the task of automatically categorizing text documents into predefined categories or classes. For example, classifying news articles into topics like politics, sports, or entertainment. Text Classification is widely used in various domains, including email spam detection, sentiment analysis, and content categorization. It enables organizations to organize and process large volumes of textual data efficiently, leading to improved decision-making and information retrieval.\n\n\nCode example\n\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import LabelEncoder\n\n# Example labeled dataset\ntexts = [\n    \"I love this product!\",\n    \"This product is terrible.\",\n    \"Great service, highly recommended.\",\n    \"I had a bad experience with this company.\",\n]\nlabels = [\n    \"Positive\",\n    \"Negative\",\n    \"Positive\",\n    \"Negative\",\n]\n\n# Create a TF-IDF vectorizer\nvectorizer = TfidfVectorizer()\n\n# Encode labels as integers\nlabel_encoder = LabelEncoder()\nencoded_labels = label_encoder.fit_transform(labels)\n\n# Create a pipeline with TF-IDF vectorizer and SVM classifier\nclassifier = make_pipeline(vectorizer, SVC(kernel='linear'))\n\n# Train the classifier\nclassifier.fit(texts, encoded_labels)\n\n# Example test text\ntest_text = \"I love what this product can do.\"\n\n# Predict the label for the test text\npredicted_label = classifier.predict([test_text])[0]\n\n# Decode the predicted label back to original label\npredicted_label_text = label_encoder.inverse_transform([predicted_label])[0]\n\n# Print the predicted label\nprint(f\"Text: {test_text}\")\nprint(f\"Predicted Label: {predicted_label_text}\")\n\nText: I love what this product can do.\nPredicted Label: Positive\n\n\n\n\n\nInformation Extraction\nInformation Extraction involves automatically extracting structured information from unstructured text data, such as documents, articles, or web pages. This includes identifying entities, relationships, and events mentioned in the text. For example, extracting names of people mentioned in news articles or detecting company acquisitions from financial reports. Information Extraction plays a crucial role in tasks like knowledge base construction, data integration, and business intelligence.\n\n\nQuestion-Answering\nQuestion-Answering (QA) systems aim to automatically generate accurate answers to user queries posed in natural language. These systems comprehend the meaning of questions and retrieve relevant information from a knowledge base or text corpus to provide precise responses. For example, answering factual questions like “Who is the president of the United States?” or “What is the capital of France?”. QA systems are essential for information retrieval, virtual assistants, and educational applications, enabling users to access information quickly and efficiently.",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Overview of NLP"
    ]
  },
  {
    "objectID": "ethics/data_privacy.html",
    "href": "ethics/data_privacy.html",
    "title": "Data Privacy",
    "section": "",
    "text": "In the rapidly evolving landscape of artificial intelligence and natural language processing, using the power of language models comes with a set of critical considerations regarding data security. Whenever we are starting to use these technologies, understanding the importance of safeguarding data integrity, confidentiality, and privacy is paramount to ensure responsible and ethical use.\nData security concerns in language model applications\n\nPrivacy risks: Language models often require access to vast amounts of textual data for training, which may include sensitive or personally identifiable information (PII). Improper handling of this data can pose significant privacy risks, especially in applications involving user-generated content or personal communications.\nData breaches: The storage and transmission of large datasets used to train language models can be susceptible to data breaches, unauthorized access, or cyberattacks. A breach of sensitive training data can lead to the exposure of confidential information, intellectual property theft, or reputational damage.\nAdversarial attacks: Language models are vulnerable to adversarial attacks, where malicious actors manipulate input data to deceive or exploit the model’s vulnerabilities. Adversarial examples crafted to evade detection or trigger undesirable behavior can compromise the integrity and reliability of language model outputs.\nEthical considerations: Language models trained on biased or unethical datasets may inadvertently perpetuate harmful stereotypes, discriminatory language, or misinformation, raising ethical concerns about the responsible use of AI technology and its potential impact on society. See also here.\n\nMitigating data security risks\n\nData minimization: Adopting data minimization practices by limiting the collection, storage, and retention of sensitive or unnecessary data can mitigate privacy risks and reduce the attack surface for potential breaches.\nEncryption and secure transmission: Implementing robust encryption protocols and secure transmission mechanisms for handling data during training, inference, and storage can safeguard against unauthorized access and data interception.\nAnonymization and differential privacy: Employing anonymization techniques and differential privacy mechanisms to anonymize or obfuscate sensitive information in datasets can protect individual privacy while preserving the utility of the data for training language models.\nThreat modeling and risk assessment: Conducting comprehensive threat modeling and risk assessments to identify potential security vulnerabilities, anticipate adversarial scenarios, and develop proactive strategies for mitigating data security risks.\n\nEthical considerations and transparency\n\nTransparency and accountability: Promoting transparency and accountability in the development and deployment of language models by adhering to ethical guidelines, disclosing data sources and training methodologies, and enabling independent scrutiny and oversight.\nInformed consent and user rights: Prioritizing informed consent, user autonomy, and data subject rights by providing clear and accessible information about data usage, consent options, and mechanisms for data access, correction, or deletion.\nResponsible AI governance: Establishing robust governance frameworks, ethical guidelines, and regulatory mechanisms to ensure responsible and ethical use of language models, mitigate potential harms, and uphold principles of fairness, accountability, and transparency.\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Ethical Considerations",
      "Data Privacy"
    ]
  },
  {
    "objectID": "slides/nlp/tokenization.html#tokenization",
    "href": "slides/nlp/tokenization.html#tokenization",
    "title": "Tokenization",
    "section": "Tokenization",
    "text": "Tokenization\n\nsentence = \"I love reading science fiction books or books about science.\"\n\n \n\n\n\n\n\n\n\n\nDefinition\n\n\nTokenization is the process of breaking down a text into smaller units called tokens.\n\n\n\n\n\n \n\n\ntokenized_sentence = sentence.split(\" \")\nprint(tokenized_sentence)\n\n['I', 'love', 'reading', 'science', 'fiction', 'books', 'or', 'books', 'about', 'science.']"
  },
  {
    "objectID": "slides/nlp/tokenization.html#counting-token",
    "href": "slides/nlp/tokenization.html#counting-token",
    "title": "Tokenization",
    "section": "Counting token",
    "text": "Counting token\n\nfrom collections import Counter\n\ntoken_counter = Counter(tokenized_sentence)\nprint(token_counter.most_common(3))\n\n[('books', 2), ('I', 1), ('love', 1)]\n\n\n \n\n\ntokenized_sentence = sentence.replace(\".\", \" \").split(\" \")\n\ntoken_counter = Counter(tokenized_sentence)\nprint(token_counter.most_common(2))\n\n[('science', 2), ('books', 2)]"
  },
  {
    "objectID": "slides/nlp/tokenization.html#nltk-tokenization",
    "href": "slides/nlp/tokenization.html#nltk-tokenization",
    "title": "Tokenization",
    "section": "NLTK tokenization",
    "text": "NLTK tokenization\n\nfrom nltk.tokenize import wordpunct_tokenize\nfrom string import punctuation\n\ntokenized_sentence = wordpunct_tokenize(sentence)\ntokenized_sentence = [t for t in tokenized_sentence if t not in punctuation]\nprint(tokenized_sentence)\n\n['I', 'love', 'reading', 'science', 'fiction', 'books', 'or', 'books', 'about', 'science']"
  },
  {
    "objectID": "slides/nlp/tokenization.html#lemmatization",
    "href": "slides/nlp/tokenization.html#lemmatization",
    "title": "Tokenization",
    "section": "Lemmatization",
    "text": "Lemmatization\n\nReduce words to their base or canonical form\nRepresents the dictionary form of a word (lemma)\nStandardizes words for better text analysis accuracy\nExample: meeting –&gt; meet (verb)"
  },
  {
    "objectID": "slides/nlp/tokenization.html#lemmatization-with-wordnet-nouns",
    "href": "slides/nlp/tokenization.html#lemmatization-with-wordnet-nouns",
    "title": "Tokenization",
    "section": "Lemmatization with WordNet: Nouns",
    "text": "Lemmatization with WordNet: Nouns\n\nfrom nltk.stem import WordNetLemmatizer\n\nsentence = \"The three brothers went over three big bridges\"\n\nwnl = WordNetLemmatizer()\n\nlemmatized_sentence_token = [\n    wnl.lemmatize(w, pos=\"n\") for w in sentence.split(\" \")\n]\n\nprint(lemmatized_sentence_token)\n\n\n\n['The', 'three', 'brother', 'went', 'over', 'three', 'big', 'bridge']"
  },
  {
    "objectID": "slides/nlp/tokenization.html#lemmatization-with-wordnet-verbs",
    "href": "slides/nlp/tokenization.html#lemmatization-with-wordnet-verbs",
    "title": "Tokenization",
    "section": "Lemmatization with WordNet: Verbs",
    "text": "Lemmatization with WordNet: Verbs\n\nlemmatized_sentence_token = [\n    wnl.lemmatize(w, pos=\"v\") for w in sentence.split(\" \")\n]\n\nprint(lemmatized_sentence_token)\n\n\n\n['The', 'three', 'brothers', 'go', 'over', 'three', 'big', 'bridge']"
  },
  {
    "objectID": "slides/nlp/tokenization.html#lemmatization-with-wordnet-and-pos-tagging",
    "href": "slides/nlp/tokenization.html#lemmatization-with-wordnet-and-pos-tagging",
    "title": "Tokenization",
    "section": "Lemmatization with WordNet and POS-tagging",
    "text": "Lemmatization with WordNet and POS-tagging\n\npos_dict = {\n  \"brothers\": \"n\", \n  \"went\": \"v\",\n  \"big\": \"a\",\n  \"bridges\": \"n\"\n}\n\nlemmatized_sentence_token = []\nfor token in sentence.split(\" \"):\n    if token in pos_dict:\n        lemma = wnl.lemmatize(token, pos=pos_dict[token])\n    else: \n        lemma = token # leave as it is\n\n    lemmatized_sentence_token.append(lemma)\n\nprint(lemmatized_sentence_token)\n\n\n\n['The', 'three', 'brother', 'go', 'over', 'three', 'big', 'bridge']"
  },
  {
    "objectID": "slides/nlp/tokenization.html#bit-pair-encoding-why",
    "href": "slides/nlp/tokenization.html#bit-pair-encoding-why",
    "title": "Tokenization",
    "section": "Bit Pair Encoding: Why?",
    "text": "Bit Pair Encoding: Why?\n\nTokenization: Breaking text into smaller chunks (tokens)\nTraditional vocabularies: Fixed-size, memory-intensive\nBit pair encoding: Compression technique for large vocabularies"
  },
  {
    "objectID": "slides/nlp/tokenization.html#bit-pair-encoding-how",
    "href": "slides/nlp/tokenization.html#bit-pair-encoding-how",
    "title": "Tokenization",
    "section": "Bit Pair Encoding: How?",
    "text": "Bit Pair Encoding: How?\n\nPair Identification: Identifies frequent pairs of characters\nReplacement with Single Token: Replaces pairs with single token\nIterative Process: Continues until stopping criterion met\nVocabulary Construction: Construct vocabulary with single tokens\nEncoding and Decoding: Text encoded and decoded using constructed vocabulary"
  },
  {
    "objectID": "slides/nlp/tokenization.html#bit-pair-encoding-pros-and-cons",
    "href": "slides/nlp/tokenization.html#bit-pair-encoding-pros-and-cons",
    "title": "Tokenization",
    "section": "Bit Pair Encoding: Pros and Cons",
    "text": "Bit Pair Encoding: Pros and Cons\n\nEfficient Memory Usage\nRetains Information\nFlexibility\nComputational Overhead\nLoss of Granularity\n\n\n\nReduces vocabulary size, efficient memory usage\nCaptures frequent character pairs, retains linguistic information\nAdaptable to different tokenization strategies and corpus characteristics\nIterative nature can be computationally intensive\nMay lead to loss of granularity, especially for rare words\nEffectiveness depends on tokenization strategy and corpus characteristics\n\n\n\n\n\n\nSprint: LLM, 2024"
  },
  {
    "objectID": "slides/about/projects.html#what-do-i-have-to-keep-in-mind",
    "href": "slides/about/projects.html#what-do-i-have-to-keep-in-mind",
    "title": "Projects: Large Language Models",
    "section": "What do I have to keep in mind?",
    "text": "What do I have to keep in mind?"
  },
  {
    "objectID": "slides/about/projects.html#what-can-go-wrong",
    "href": "slides/about/projects.html#what-can-go-wrong",
    "title": "Projects: Large Language Models",
    "section": "What can go wrong?",
    "text": "What can go wrong?"
  },
  {
    "objectID": "slides/about/projects.html#what-do-i-need",
    "href": "slides/about/projects.html#what-do-i-need",
    "title": "Projects: Large Language Models",
    "section": "What do I need?",
    "text": "What do I need?"
  },
  {
    "objectID": "slides/about/projects.html#question-answering-chatbot",
    "href": "slides/about/projects.html#question-answering-chatbot",
    "title": "Projects: Large Language Models",
    "section": "Question-Answering Chatbot",
    "text": "Question-Answering Chatbot\nBuild a chatbot that can answer questions posed by users on a specific topic provided in form of documents. Users input their questions, the chatbot retrieves relevant information from a pre-defined set of documents, and uses the information to answer the question."
  },
  {
    "objectID": "slides/about/projects.html#document-tagging-classification",
    "href": "slides/about/projects.html#document-tagging-classification",
    "title": "Projects: Large Language Models",
    "section": "Document tagging / classification",
    "text": "Document tagging / classification\nUse GPT and its tools (e.g., function calls) and/or embeddings to classify documents or assign tags to them. Example: Sort bug reports or complaints into categories depending on the problem."
  },
  {
    "objectID": "slides/about/projects.html#clustering-of-text-based-entities",
    "href": "slides/about/projects.html#clustering-of-text-based-entities",
    "title": "Projects: Large Language Models",
    "section": "Clustering of text-based entities",
    "text": "Clustering of text-based entities\nCreate a small tool that can cluster text-based entities based on embeddings, for example, groups of texts or keywords. Example: Structure a folder of text files based on their content."
  },
  {
    "objectID": "slides/about/projects.html#text-based-rpg-game",
    "href": "slides/about/projects.html#text-based-rpg-game",
    "title": "Projects: Large Language Models",
    "section": "Text-based RPG Game",
    "text": "Text-based RPG Game\nDevelop a text-based role-playing game where players interact with characters and navigate through a story generated by GPT. Players make choices that influence the direction of the narrative."
  },
  {
    "objectID": "slides/about/projects.html#sentiment-analysis-tool",
    "href": "slides/about/projects.html#sentiment-analysis-tool",
    "title": "Projects: Large Language Models",
    "section": "Sentiment Analysis Tool",
    "text": "Sentiment Analysis Tool\nBuild an app that analyzes the sentiment of text inputs (e.g., social media posts, customer reviews) using GPT. Users can input text, and the app provides insights into the overall sentiment expressed in the text."
  },
  {
    "objectID": "slides/about/projects.html#text-summarization-tool",
    "href": "slides/about/projects.html#text-summarization-tool",
    "title": "Projects: Large Language Models",
    "section": "Text Summarization Tool",
    "text": "Text Summarization Tool\nCreate an application that summarizes long blocks of text into shorter, concise summaries. Users can input articles, essays, or documents, and the tool generates a summarized version."
  },
  {
    "objectID": "slides/about/projects.html#language-translation-tool",
    "href": "slides/about/projects.html#language-translation-tool",
    "title": "Projects: Large Language Models",
    "section": "Language Translation Tool",
    "text": "Language Translation Tool\nBuild a simple translation app that utilizes GPT to translate text between different languages. Users can input text in one language, and the app outputs the translated text in the desired language. Has to include some nice tweaks."
  },
  {
    "objectID": "slides/about/projects.html#personalized-recipe-generator",
    "href": "slides/about/projects.html#personalized-recipe-generator",
    "title": "Projects: Large Language Models",
    "section": "Personalized Recipe Generator",
    "text": "Personalized Recipe Generator\nDevelop an app that generates personalized recipes based on user preferences and dietary restrictions. Users input their preferred ingredients and dietary needs, and the app generates custom recipes using GPT."
  },
  {
    "objectID": "slides/about/projects.html#lyrics-generator",
    "href": "slides/about/projects.html#lyrics-generator",
    "title": "Projects: Large Language Models",
    "section": "Lyrics Generator",
    "text": "Lyrics Generator\nCreate a lyrics generation tool that generates lyrics based on user input such as themes, music style, emotions, or keywords. Users can explore different poetic styles and themes generated by GPT."
  },
  {
    "objectID": "slides/about/projects.html#tools",
    "href": "slides/about/projects.html#tools",
    "title": "Projects: Large Language Models",
    "section": "Tools",
    "text": "Tools\n\nYou can use everything in the Jupyterlab (put pip list in a terminal to see all Python packages)\nIf there are specific packages you need, we can organize them\nYou can simply build your application in a Jupyter notebook!\nOr: Use Dash!"
  },
  {
    "objectID": "slides/about/projects.html#dash",
    "href": "slides/about/projects.html#dash",
    "title": "Projects: Large Language Models",
    "section": "Dash",
    "text": "Dash\nPut the following files into your home in the Jupyterlab:\nmy_layout.py\n\nfrom dash import html\nfrom dash import dcc\n\n\nlayout = html.Div([\n    html.H1(\"Yeay, my app!\"),\n    html.Div([\n        html.Label(\"Enter your text:\"),\n        dcc.Input(id='input-text', type='text', value=''),\n        html.Button('Submit', id='submit-btn', n_clicks=0),\n    ]),\n    html.Div(id='output-container-button')\n])"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#revisiting-what-we-know",
    "href": "slides/embeddings/embeddings.html#revisiting-what-we-know",
    "title": "Embeddings",
    "section": "Revisiting what we know",
    "text": "Revisiting what we know\nEmbeddings …\n\ntransform text into numerical vectors\nare used in neural network architectures\nKey benefit: Capture semantic similarities and relationships between words\n\n \n\nAlready seen: Bag of Words\nIssue: These embeddings do not compress!"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#what-are-embeddings",
    "href": "slides/embeddings/embeddings.html#what-are-embeddings",
    "title": "Embeddings",
    "section": "What are embeddings?",
    "text": "What are embeddings?\n\nRepresent words and text as dense, numerical vectors\nCapture rich semantic information\nContext-aware, based on surrounding text\nCapture subtle semantic relationships\nCompact representation compared to simple techniques such as bag of words"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#approaches-to-generate-embeddings",
    "href": "slides/embeddings/embeddings.html#approaches-to-generate-embeddings",
    "title": "Embeddings",
    "section": "Approaches to generate embeddings:",
    "text": "Approaches to generate embeddings:\n\nWord2Vec, GloVe, FastText\n\nTrain neural network to predict surrounding words\nCBOW or skip-gram architectures\nLearns semantic relationships in continuous vector space\n\nTransformer architectures like GPT\nWord embeddings provided by OpenAI"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#what-does-it-look-like",
    "href": "slides/embeddings/embeddings.html#what-does-it-look-like",
    "title": "Embeddings",
    "section": "What does it look like?",
    "text": "What does it look like?\nTrain a model to:\n\npredict the target word based on the (surrounding) context words, or\npredict the context words given a target word\n\n\n\n\n\n\nflowchart LR\n  A[\"Input Layer (One Hot)\"] \n  A --&gt; B[\"Embedding Layer\"]\n  B --&gt; C[\"Sum/Average Layer\"]\n  C --&gt; D[\"Output Layer\"]\n\n\n\n\n\n\n\n\nUse of the model\nThrow away the parts after the embedding layer!\n\n\n\n\n\nflowchart LR\n  A[\"Input Layer (One Hot)\"] \n  A --&gt; B[\"Embedding Layer\"]"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#task-find-the-matching-document-for-a-prompt",
    "href": "slides/embeddings/embeddings.html#task-find-the-matching-document-for-a-prompt",
    "title": "Embeddings",
    "section": "Task: Find the matching document for a prompt",
    "text": "Task: Find the matching document for a prompt\n\ntexts = [\n  \"This is the first document.\",\n  \"This document is the second document.\",\n  \"And this is the third one.\"\n]\n\nprompt = \"Is this the first document?\""
  },
  {
    "objectID": "slides/embeddings/embeddings.html#get-the-openai-client",
    "href": "slides/embeddings/embeddings.html#get-the-openai-client",
    "title": "Embeddings",
    "section": "Get the OpenAI client",
    "text": "Get the OpenAI client\n\n# prerequisites\n\nimport os\nfrom llm_utils.client import get_openai_client, OpenAIModels\n\nMODEL = OpenAIModels.EMBED.value # choose the embedding model\n\n# get the OpenAI client\nclient = get_openai_client(\n    model=MODEL,\n    config_path=os.environ.get(\"CONFIG_PATH\")\n)"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#get-the-embeddings",
    "href": "slides/embeddings/embeddings.html#get-the-embeddings",
    "title": "Embeddings",
    "section": "Get the embeddings",
    "text": "Get the embeddings\n\n# get the embeddings\nresponse = client.embeddings.create(\n    input=texts,\n    model=MODEL\n)\n\ntext_embeddings = [emb.embedding for emb in response.data]\n\nresponse = client.embeddings.create(\n    input=[prompt],\n    model=MODEL\n)\n\nprompt_embedding = response.data[0].embedding"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#compute-the-similarity",
    "href": "slides/embeddings/embeddings.html#compute-the-similarity",
    "title": "Embeddings",
    "section": "Compute the similarity",
    "text": "Compute the similarity\n\nimport numpy as np \n\ndef cosine_similarity(vec1: np.array, vec2: np.array) -&gt; float: \n    return np.dot(vec1, vec2) / ( np.linalg.norm(vec1) * np.linalg.norm(vec2) )\n\n\nfor text, text_embedding in zip(texts, text_embeddings):\n    similarity = cosine_similarity(text_embedding, prompt_embedding)\n    print(f\"{text}: {round(similarity, 2)}\")\n\n\n\nThis is the first document.: 0.95\nThis document is the second document.: 0.88\nAnd this is the third one.: 0.8"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#define-some-words-to-visualize",
    "href": "slides/embeddings/embeddings.html#define-some-words-to-visualize",
    "title": "Embeddings",
    "section": "Define some words to visualize",
    "text": "Define some words to visualize\n\n# Define a list of words to visualize\nwords = [\n    \"king\", \"queen\", \"man\", \"woman\", \"apple\", \"banana\", \n    \"grapes\", \"cat\", \"dog\", \"happy\", \"sad\"\n]\n\n# Get embeddings for the words\nresponse = client.embeddings.create(\n    input=words,\n    model=MODEL\n)\n\nembeddings = [emb.embedding for emb in response.data]"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#apply-t-sne-to-the-embedding-vectors",
    "href": "slides/embeddings/embeddings.html#apply-t-sne-to-the-embedding-vectors",
    "title": "Embeddings",
    "section": "Apply T-SNE to the embedding vectors",
    "text": "Apply T-SNE to the embedding vectors\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.manifold import TSNE\n\n# Apply t-SNE dimensionality reduction\ntsne = TSNE(\n    n_components=2, \n    random_state=42,\n    perplexity=5 # see documentation to set this correctly\n)\nembeddings_2d = tsne.fit_transform(np.array(embeddings))\n\n# Plot the embeddings in a two-dimensional scatter plot\nplt.figure(figsize=(9, 7))\nfor i, word in enumerate(words):\n    x, y = embeddings_2d[i]\n    plt.scatter(x, y, marker='o', color='red')\n    plt.text(x, y, word, fontsize=9)\n\nplt.xlabel(\"t-SNE dimension 1\")\nplt.ylabel(\"t-SNE dimension 2\")\nplt.grid(True)\nplt.xticks([])\nplt.yticks([])\nplt.show()"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#apply-t-sne-to-the-embedding-vectors-output",
    "href": "slides/embeddings/embeddings.html#apply-t-sne-to-the-embedding-vectors-output",
    "title": "Embeddings",
    "section": "Apply T-SNE to the embedding vectors",
    "text": "Apply T-SNE to the embedding vectors"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#cluster-the-embeddings",
    "href": "slides/embeddings/embeddings.html#cluster-the-embeddings",
    "title": "Embeddings",
    "section": "Cluster the embeddings",
    "text": "Cluster the embeddings\n\n# do the clus#| tering\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\nn_clusters = 5\n\n# define the model\nkmeans = KMeans(\n  n_clusters=n_clusters,\n  n_init=\"auto\",\n  random_state=2 # do this to get the same output\n)\n\n# fit the model to the data\nkmeans.fit(np.array(embeddings))\n\n# get the cluster labels\ncluster_labels = kmeans.labels_"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#visualize-with-t-sne",
    "href": "slides/embeddings/embeddings.html#visualize-with-t-sne",
    "title": "Embeddings",
    "section": "Visualize with T-SNE",
    "text": "Visualize with T-SNE\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.manifold import TSNE\n\n# Apply t-SNE dimensionality reduction\ntsne = TSNE(\n  n_components=2, \n  random_state=42,\n  perplexity=5 # see documentation to set this correctly\n)\nembeddings_2d = tsne.fit_transform(np.array(embeddings))\n\n# Define a color map for clusters\ncolors = plt.cm.viridis(np.linspace(0, 1, n_clusters))\n\n# Plot the embeddings in a two-dimensional scatter plot\nplt.figure(figsize=(9, 7))\nfor i, word in enumerate(words):\n    x, y = embeddings_2d[i]\n    cluster_label = cluster_labels[i]\n    color = colors[cluster_label]\n    plt.scatter(x, y, marker='o', color=color)\n    plt.text(x, y, word, fontsize=9)\n\nplt.xlabel(\"t-SNE dimension 1\")\nplt.ylabel(\"t-SNE dimension 2\")\nplt.grid(True)\nplt.xticks([])\nplt.yticks([])\nplt.show()\n\n\n\n\n\n\nSprint: LLM, 2024"
  },
  {
    "objectID": "slides/embeddings/embeddings.html#visualize-with-t-sne-output",
    "href": "slides/embeddings/embeddings.html#visualize-with-t-sne-output",
    "title": "Embeddings",
    "section": "Visualize with T-SNE",
    "text": "Visualize with T-SNE"
  },
  {
    "objectID": "slides/llm/intro.html#background",
    "href": "slides/llm/intro.html#background",
    "title": "Large Language Models: A Quick Introduction",
    "section": "Background",
    "text": "Background\n\nRise of machine learning and deep learning in the 2000s\n\n\n\nIdea: Use neural networks for NLP tasks\nChallenge: How do we feed text into a neural network?\n\n\n\nAnswer: Text embeddings!"
  },
  {
    "objectID": "slides/llm/intro.html#example-from-bag-of-words",
    "href": "slides/llm/intro.html#example-from-bag-of-words",
    "title": "Large Language Models: A Quick Introduction",
    "section": "Example from Bag of Words",
    "text": "Example from Bag of Words\n\n\n\n\n\nflowchart LR\n  A(A cat does cat things) --&gt; B{\" \"}\n  B --&gt; C(A)\n  B --&gt; D(cat)\n  B --&gt; E(does)\n  B --&gt; F(cat)\n  B --&gt; G(things)\n  D --&gt; H(cat)\n  E --&gt; I(do)\n  F --&gt; J(cat)\n  G --&gt; K(thing)\n\n  H --&gt; L(cat: 2)\n  J --&gt; L\n  I --&gt; M(do: 1)\n  K --&gt; N(thing: 1)\n\n  L --&gt; O(2)\n  M --&gt; P(1)\n  N --&gt; Q(1)"
  },
  {
    "objectID": "slides/llm/intro.html#how-could-a-neural-network-look-like",
    "href": "slides/llm/intro.html#how-could-a-neural-network-look-like",
    "title": "Large Language Models: A Quick Introduction",
    "section": "How could a neural network look like?",
    "text": "How could a neural network look like?\n\n\n\n\n\nflowchart LR\n  A(Input Text) --&gt; B(Tokenization)\n  B --&gt; C(Token processing)\n  C --&gt; D(Embedding Layer)\n  D --&gt; E(Hidden Layers)\n  E --&gt; F(Output Layer)\n\n\n\n\n\n\n\nThe hidden layers and output layers depend on the application\nThe rest of the layers can be pre-trained (later)"
  },
  {
    "objectID": "slides/llm/intro.html#example-text-classification",
    "href": "slides/llm/intro.html#example-text-classification",
    "title": "Large Language Models: A Quick Introduction",
    "section": "Example: Text classification",
    "text": "Example: Text classification\n\n\n\n\n\nflowchart LR\n  A(Input Text) --&gt; B(Tokenization)\n  B --&gt; C(Token processing)\n  C --&gt; D(Embedding Layer)\n  D --&gt; E(Hidden Layers)\n  E --&gt; F(Output Layer)\n\n\n\n\n\n\n\nClassifying news articles into categories (sports, politics, …)\n\n\n\nTraining data: Dataset with corresponding category or label\nData processing: Tokenization, stop words, lower casing etc.\nTraining:\n\nMeasure the difference between predicted and true labels and adjust network weights\nExample: BoW embeddings - frequency of words affects label likelihood."
  },
  {
    "objectID": "slides/llm/intro.html#sequence-generation",
    "href": "slides/llm/intro.html#sequence-generation",
    "title": "Large Language Models: A Quick Introduction",
    "section": "Sequence generation",
    "text": "Sequence generation\n\nIdea: Models are trained to generate sequences of data (mostly: text) based on input/context.\nSequences have to resemble the training data.\nApplication: Text generation, music composition, image captioning\nRequires understanding language structure for meaningful output!"
  },
  {
    "objectID": "slides/llm/intro.html#language-modeling",
    "href": "slides/llm/intro.html#language-modeling",
    "title": "Large Language Models: A Quick Introduction",
    "section": "Language modeling",
    "text": "Language modeling\n \nIdea: Train a model to predict the probability distribution of words or tokens in a sequence given the preceding context!\n \n\n\n\n\n\nflowchart LR\n  A(The) --&gt; B(bird)\n  B --&gt; C(flew)\n  C --&gt; D(over)\n  D --&gt; E(the)\n  E --&gt; F{?}\n  F --&gt; G(\"p(rooftops)=0.31\")\n  F --&gt; H(\"p(trees)=0.14\")\n  F --&gt; J(\"p(guitar)=0.001\")"
  },
  {
    "objectID": "slides/llm/intro.html#training-process",
    "href": "slides/llm/intro.html#training-process",
    "title": "Large Language Models: A Quick Introduction",
    "section": "Training Process",
    "text": "Training Process\n\nExpose the model to large text datasets (great: we have the internet!)\nTeach the model statistical properties of language (Which token comes next?)\nCapture syntactic structures, semantic relationships, and contextual nuances\nTraining happens in an unsupervised fashion (we require no labels!)"
  },
  {
    "objectID": "slides/llm/intro.html#challenges",
    "href": "slides/llm/intro.html#challenges",
    "title": "Large Language Models: A Quick Introduction",
    "section": "Challenges",
    "text": "Challenges\n\nHandling vast and diverse nature of human language.\nComplex patterns, variations, and ambiguities.\nOut-of-vocabulary words, long-range dependencies, domain-specific knowledge.\nRequires robust architectures and sophisticated algorithms.\n\nBUT: They did it and it works!"
  },
  {
    "objectID": "slides/llm/intro.html#what-is-gpt",
    "href": "slides/llm/intro.html#what-is-gpt",
    "title": "Large Language Models: A Quick Introduction",
    "section": "What is GPT?",
    "text": "What is GPT?\n\ncurrent state-of-the-art language model\nintroduced in the paper “Attention is All You Need” by Vaswani et al. in 2017\nGPT belongs to the family of transformer-based models\nkey advantage over previous approaches:\n\nself-attention\nscalability"
  },
  {
    "objectID": "slides/llm/intro.html#what-is-a-transformer",
    "href": "slides/llm/intro.html#what-is-a-transformer",
    "title": "Large Language Models: A Quick Introduction",
    "section": "What is a transformer?",
    "text": "What is a transformer?\n\nTraditional approach:\n\ninformation flow constrained by fixed-length context windows or recurrent connections\nOne token at a time (in RNNs)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sprint: Large Language Models",
    "section": "",
    "text": "Robot by DALL-E\n\n\nHello and welcome to the sprint seminar Large Language Models in the summer semester of 2024 at the University of Applied Sciences in Münster. On this website, you will find all the information you need about and around the seminar.\n\nAbout the seminar\nThe seminar is roughly divided into 3 parts of equal size: theory, training and application. In the theoretical part, you will learn about the most important topics and ideas when it comes to natural language processing and large language models. We will discuss topics like tokenization, matching, statistical text analysis and embeddings to get you started before eventually dealing with large language models and their applications themselves. Already during the theory, we will make sure to code in Python alongside all the concepts and see coding examples to get familiar with it.\nAfter each small input session on a new topic, we will get to some hands-on training so that you can consolidate the knowledge you just acquired. You will solve a few (coding) exercises around all the topics yourselves. To get everyone fired up as quickly as possible, we have prepared a Jupyterlab environment that everyone can use for the solution of the exercises.\nIn the final part of the seminar we will go ahead and apply our newly acquired knowledge in our own projects. All participants will team up in teams of 2-3 and try to develop and implement their own little prototype for a small application involving a language model. More information and ideas for these projects can be found here.\nBy the way, you can (and maybe absolutely should) use a language model like ChatGPT also during this seminar and the solution of some of the exercises. However, feel encouraged to try for yourselves first, and make sure you have understood the solution of a language model if you use it.\n\n\nHow to use this script\nThis script is meant to give a comprehensive overview right away from the start. Feel free to browse it even before we have reached a specific topic, in particular, if you already have some prior knowledge in the topic. All exercises that we will solve together in this seminar are contained in this script as well, including their solution. For all exercises, the (or more precisely, a) solution is hidden behind a Show solution button. For the sake of your own learning process, try to solve the exercises yourselves first! If you’re stuck, ask for a quick hint. If you still feel like you do not advance any more, then check out the solution and try to understand it. The solution of the exercises is not part of the evaluation, so it’s really for your own progress! A “summary” of all exercises can be found here.\n\n\n\n\n\n\nImportant\n\n\n\nA small disclaimer: As this is the first round of the seminar, this script is not (yet) ridiculously comprehensive. And, of course, we cannot cover the full realm of NLP and LLM within a 4-days-course. However, you should find everything we will do in the seminar also in this script. If there is something missing, I will make sure to include it as soon as possible, just give me a note.\n\n\n\n\nWhat you will learn\nAs this seminar is only a 4-days introduction to understanding and working with language models, we can obviously not cover everything and offer deep insights into all the details. Instead, we aim to give you a simple overview of all the necessities to start working with language models APIs and understand why things are working the way they do and how you can apply them in your own applications. The content can already be seen from the navigation bar, but here’s a quick walk-through. More precisely, we will walk you through a quick history of natural language processing with some of its challenges and limitations, and introduce you to text processing and analysis techniques such as tokenization, term frequency or bag of words as well as applications such as text classification or sentiment analysis. Afterwards, we will give a short introduction to how modern large language models approach these with more sophisticated techniques based on neural networks and vast amounts of training data, before getting more hands-on with the language model API by OpenAI. Eventually, we will have a quick look into some other applications of embeddings, before quickly discussing some of the ethical considerations when working with language models. Have fun!\n\n\nThe schedule\nThis seminar is spread over 4 days of roughly 8 hours, of course with some breaks and modifications if we need them. The schedule for this semester is the following (the included hours are just some estimations):\n\nDay 1 (24.04.2024):\n\nGetting to know each other + intro survey (experiences & expectations) (1h)\nLearning goals & final evaluation criteria (0.5h)\nIntroduction & overview of the topic (0.5h)\nIntroduction to natural language processing & setup of the development environment (4h)\nIntroduction to LLM & getting to know the OpenAI API: Part 1 (2h)\n\n\n\nDay 2 (25.04.2024):\n\nIntroduction to LLM & getting to know the OpenAI API: Part 2 (3h)\nPrompting (1h)\nEmbeddings (2h)\nGroup brainstorming session: Designing a simple app concept involving GPT (2h)\n\n→ At home until next week: refine project ideas (1h)\n\n\nDay 3 (30.04.2024):\n\nAdvanced GPT-related topics (1h)\nBusiness-related topics (1h)\nTeam building for hackathon → develop app concepts (1h)\nWork on prototypes (5h)\n\n\n\nDay 4 (02.05.2024):\n\nFinal touches for the prototypes (3h)\nPresentation of app prototypes, peer feedback & evaluation (2h)\nReflections on the seminar (1h)\nEthics & data privacy considerations (backup)\n\n\n\nAfter the seminar (~1d):\n\nPrototype refinement\nCode review & documentation\nRefine business case & potential applications of prototype\nReflections & lessons learned → Hand in 2-page summary\n\n\n\n\nEvaluation\nAll seminar participants will be evaluated in the following way.\n\nYour presentation on the last day of the seminar: 25%\nYour prototype: 35%\nYour summary: 25%\nYour activity during the seminar: 15%\n\nI will allow myself to give your evaluation a little extra boost for good activity during the seminar. This seminar is designed for everyone to participate, so the more you do, the more fun it will be!\n\nWhat is the summary?\nAs mentioned above, to finalize our seminar I want to you to take roughly a day to refine your prototype and then write a quick summary your project and your learnings. The summary should be 2-3 pages only (kind of like a small executive summary) and contain the following information: - What is your prototype? What can I do? - What could be a business case for your prototype, or where can it be applied? - What are current limitations of your prototype and how could you overcome them? - What have been your main learnings during the creation of your prototype (and/or) the seminar itself?\nJust hand it in within a couple of weeks after the seminar, it will be a part of your evaluation.\n\n\n\n\n\n\nNote\n\n\n\nHas this seminar been created with a little help of language models? Absolutely, why wouldn’t it? :)\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "About",
      "Sprint: Large Language Models"
    ]
  },
  {
    "objectID": "resources/packages.html",
    "href": "resources/packages.html",
    "title": "Python packages",
    "section": "",
    "text": "Here are some short descriptions and links for each of the Python packages used for this script:\n\nJupyter: Jupyter is an open-source project that allows you to create and share documents containing live code, equations, visualizations, and narrative text. These documents, called notebooks, support various programming languages, including Python, R, and Julia. Jupyter notebooks are widely used for data analysis, machine learning, scientific research, and education.\nMatplotlib: Matplotlib is a popular plotting library for Python that enables you to create static, interactive, and publication-quality visualizations. It provides a wide range of plotting functions for creating line plots, scatter plots, bar charts, histograms, and more. Matplotlib is highly customizable and integrates well with other Python libraries like NumPy and pandas.\nPlotly: Plotly is a Python graphing library that produces interactive plots and dashboards. It offers a rich set of chart types, including line charts, scatter plots, bar charts, heatmaps, and 3D plots. Plotly’s interactive features allow users to explore data dynamically, zoom in on specific regions, and add annotations. Plotly can be used both offline and online, and it integrates seamlessly with Jupyter notebooks.\nscikit-learn: Scikit-learn is a comprehensive machine learning library for Python that provides simple and efficient tools for data mining and analysis. It features a wide range of algorithms for classification, regression, clustering, dimensionality reduction, and more. Scikit-learn is built on top of NumPy, SciPy, and matplotlib, making it easy to integrate into existing Python workflows.\nrapidfuzz: RapidFuzz is a fast string matching library for Python that provides various algorithms for fuzzy string matching and string similarity calculations. It offers functions for tasks like approximate string matching, fuzzy searching, and string similarity measurements based on Levenshtein distance, Jaro distance, and cosine similarity. RapidFuzz is useful for tasks such as data deduplication, spell checking, and record linkage.\nNLTK: NLTK (Natural Language Toolkit) is a leading platform for building Python programs to work with human language data. It provides easy-to-use interfaces to over 50 corpora and lexical resources, such as WordNet. NLTK includes a suite of text processing libraries for tasks like tokenization, stemming, tagging, parsing, and classification. It is widely used in education, research, and industry for natural language processing tasks.\nspaCy: spaCy is an open-source natural language processing library for Python that is designed for efficiency, scalability, and ease of use. It provides pre-trained models for various languages and domains, along with an easy-to-use API for tasks such as tokenization, part-of-speech tagging, named entity recognition, dependency parsing, and text classification. spaCy is known for its speed and performance, making it suitable for both research and production environments.\n\n\n\n\n\n\n\nTip\n\n\n\nThis script has been created with Quarto.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Resources",
      "Python packages"
    ]
  },
  {
    "objectID": "resources/apis.html",
    "href": "resources/apis.html",
    "title": "Language Model APIs",
    "section": "",
    "text": "Certainly! Here’s the list with each title linked to its respective website, followed by the description:\n\nGoogle Cloud Natural Language API Google Cloud Natural Language API offers a suite of powerful natural language processing capabilities, including sentiment analysis, entity recognition, and syntax analysis. While it may not provide pre-trained large language models like GPT, it offers robust support for various NLP tasks through its RESTful API.\nMicrosoft Azure Cognitive Services - Text Analytics Azure Cognitive Services offers Text Analytics, a set of APIs for analyzing unstructured text. It provides functionalities such as sentiment analysis, key phrase extraction, language detection, and entity recognition. While it doesn’t offer large pre-trained language models, it’s suitable for various text analysis tasks and integrates well with other Azure services.\nIBM Watson Natural Language Understanding Watson Natural Language Understanding is part of IBM’s suite of AI-powered tools. It provides advanced text analysis capabilities, including sentiment analysis, entity recognition, concept extraction, and categorization. While it doesn’t offer large-scale language generation models like GPT, it’s suitable for analyzing and extracting insights from text data.\nHugging Face Transformers Hugging Face Transformers is an open-source library that provides a wide range of pre-trained models for natural language processing tasks. It includes popular models like GPT, BERT, and RoBERTa, along with support for fine-tuning and custom model development. While it’s not a hosted API service like OpenAI, it offers powerful tools for developers to work with state-of-the-art NLP models.\nDeepAI Text Generation API DeepAI offers a Text Generation API that allows users to generate human-like text based on a given prompt. While it may not provide the scale or versatility of GPT-like models, it’s suitable for tasks such as generating short-form content, creative writing, and text completion.\nLLama LLama is an AI platform that offers large language models and other NLP capabilities for developers and enterprises. It provides access to pre-trained models, including GPT-like architectures, as well as tools for fine-tuning models on custom datasets. LLama aims to democratize access to advanced AI technologies and support a wide range of NLP applications.\nGemini Gemini by Cortical.io is an AI-based platform that offers natural language understanding and text analytics capabilities. It utilizes semantic folding technology, inspired by the human brain, to analyze and process text data efficiently. While it may not provide large-scale language generation models like GPT, Gemini offers powerful tools for semantic analysis, document clustering, and similarity detection.\n\n\n\n\n Back to top",
    "crumbs": [
      "Resources",
      "Language model APIs"
    ]
  },
  {
    "objectID": "embeddings/visualization.html",
    "href": "embeddings/visualization.html",
    "title": "Visualization & clustering of embeddings",
    "section": "",
    "text": "Let’s go a little bit further down the road of similarities between words or texts in general. Wouldn’t it be great if we could somehow visualize a text as a point in space and see how other texts relate to it? Embeddings allow us to do that as well, with one caveat: Embeddings have too many dimensions to visualize (usually a few thousand). Luckily, there are tools such as principal component analysis or T-SNE available to reduce the dimension of vectors (for example, to two dimensions), while preserving most of the relations between them. Let’s see how this works.\n\n# prerequisites\n\nimport os\nfrom llm_utils.client import get_openai_client, OpenAIModels\n\nMODEL = OpenAIModels.EMBED.value\n\n# get the OpenAI client\nclient = get_openai_client(\n    model=MODEL,\n    config_path=os.environ.get(\"CONFIG_PATH\")\n)\n\n\n# Define a list of words to visualize\nwords = [\"king\", \"queen\", \"man\", \"woman\", \"apple\", \"banana\", \"grapes\", \"cat\", \"dog\", \"happy\", \"sad\"]\n\n# Get embeddings for the words\nresponse = client.embeddings.create(\n    input=words,\n    model=MODEL\n)\n\nembeddings = [emb.embedding for emb in response.data]\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.manifold import TSNE\n\n# Apply t-SNE dimensionality reduction\ntsne = TSNE(\n    n_components=2, \n    random_state=42,\n    perplexity=5 # see documentation to set this correctly\n)\nembeddings_2d = tsne.fit_transform(np.array(embeddings))\n\n# Plot the embeddings in a two-dimensional scatter plot\nplt.figure(figsize=(10, 8))\nfor i, word in enumerate(words):\n    x, y = embeddings_2d[i]\n    plt.scatter(x, y, marker='o', color='red')\n    plt.text(x, y, word, fontsize=9)\n\nplt.xlabel(\"t-SNE dimension 1\")\nplt.ylabel(\"t-SNE dimension 2\")\nplt.grid(True)\nplt.xticks([])\nplt.yticks([])\nplt.show()\n\n\n\n\nt-SNE visualization of word embeddings",
    "crumbs": [
      "Seminar",
      "Embeddings",
      "Visualization & clustering of embeddings"
    ]
  },
  {
    "objectID": "embeddings/visualization.html#clustering-of-embeddings",
    "href": "embeddings/visualization.html#clustering-of-embeddings",
    "title": "Visualization & clustering of embeddings",
    "section": "Clustering of embeddings",
    "text": "Clustering of embeddings\nThe great thing is, we can already see that there are some clusters forming. We can again use models like KMeans to find them explicitly. In this case, we obviously have five clusters, so let’s try to identify them.\n\n# do the clustering\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\nn_clusters = 5\n\n# define the model\nkmeans = KMeans(\n  n_clusters=n_clusters,\n  n_init=\"auto\",\n  random_state=2 # do this to get the same output\n)\n\n# fit the model to the data\nkmeans.fit(np.array(embeddings))\n\n# get the cluster labels\ncluster_labels = kmeans.labels_\n\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.manifold import TSNE\n\n# Apply t-SNE dimensionality reduction\ntsne = TSNE(\n  n_components=2, \n  random_state=42,\n  perplexity=5 # see documentation to set this correctly\n)\nembeddings_2d = tsne.fit_transform(np.array(embeddings))\n\n# Define a color map for clusters\ncolors = plt.cm.viridis(np.linspace(0, 1, n_clusters))\n\n# Plot the embeddings in a two-dimensional scatter plot\nplt.figure(figsize=(10, 8))\nfor i, word in enumerate(words):\n    x, y = embeddings_2d[i]\n    cluster_label = cluster_labels[i]\n    color = colors[cluster_label]\n    plt.scatter(x, y, marker='o', color=color)\n    plt.text(x, y, word, fontsize=9)\n\nplt.xlabel(\"t-SNE dimension 1\")\nplt.ylabel(\"t-SNE dimension 2\")\nplt.grid(True)\nplt.xticks([])\nplt.yticks([])\nplt.show()\n\n\n\n\nt-SNE visualization of word embedding clusters\n\n\n\n\nThat, again, is great news. Embeddings allow us to find clusters in texts, based on the semantics included. This helps in many applications where documents need to be analyzed without having been seen by a human. Maybe you can use it in your project?",
    "crumbs": [
      "Seminar",
      "Embeddings",
      "Visualization & clustering of embeddings"
    ]
  },
  {
    "objectID": "llm/prompting.html",
    "href": "llm/prompting.html",
    "title": "Prompting",
    "section": "",
    "text": "Learning prompting is a science for itself. The difficulty lies in the probabilistic nature of the language models. That means, small changes to your prompt (that you might even find insignificant) can have a large impact on the result/the answer. In particular, the changes do not have to be “logical”, i.e., depend on your changes in a comprehensible or reproducible way. This can sometimes be frustrating, but can also be avoided in many cases when following the right instructions for prompting. To do so, let’s best follow the creators.\n\n\n\n\n\n\nNote\n\n\n\nThe following is taken from the OpenAI Guide\n\n\n\nWrite clear instructions\nThese models can’t read your mind. If outputs are too long, ask for brief replies. If outputs are too simple, ask for expert-level writing. If you dislike the format, demonstrate the format you’d like to see. The less the model has to guess at what you want, the more likely you’ll get it.\nTactics:\n\nInclude details in your query to get more relevant answers\nAsk the model to adopt a persona\nUse delimiters to clearly indicate distinct parts of the input\nSpecify the steps required to complete a task\nProvide examples\nSpecify the desired length of the output \n\n\n\nProvide reference text\nLanguage models can confidently invent fake answers, especially when asked about esoteric topics or for citations and URLs. In the same way that a sheet of notes can help a student do better on a test, providing reference text to these models can help in answering with fewer fabrications.\nTactics:\n\nInstruct the model to answer using a reference text\nInstruct the model to answer with citations from a reference text \n\n\n\nSplit complex tasks into simpler subtasks\nJust as it is good practice in software engineering to decompose a complex system into a set of modular components, the same is true of tasks - submitted to a language model. Complex tasks tend to have higher error rates than simpler tasks. Furthermore, complex tasks can often be re-defined as a workflow of simpler tasks in which the outputs of earlier tasks are used to construct the inputs to later tasks.\nTactics:\n\nUse intent classification to identify the most relevant instructions for a user query\nFor dialogue applications that require very long conversations, summarize or filter previous dialogue\nSummarize long documents piecewise and construct a full summary recursively \n\n\n\nGive the model time to “think”\nIf asked to multiply 17 by 28, you might not know it instantly, but can still work it out with time. Similarly, models make more reasoning errors when trying to answer right away, rather than taking time to work out an answer. Asking for a “chain of thought” before an answer can help the model reason its way toward correct answers more reliably.\nTactics:\n\nInstruct the model to work out its own solution before rushing to a conclusion\nUse inner monologue or a sequence of queries to hide the model’s reasoning process\nAsk the model if it missed anything on previous passes \n\n\n\nUse external tools\nCompensate for the weaknesses of the model by feeding it the outputs of other tools. For example, a text retrieval system (sometimes called RAG or retrieval augmented generation) can tell the model about relevant documents. A code execution engine like OpenAI’s Code Interpreter can help the model do math and run code. If a task can be done more reliably or efficiently by a tool rather than by a language model, offload it to get the best of both.\nTactics:\n\nUse embeddings-based search to implement efficient knowledge retrieval\nUse code execution to perform more accurate calculations or call external APIs\nGive the model access to specific functions \n\n\n\nTest changes systematically\nImproving performance is easier if you can measure it. In some cases a modification to a prompt will achieve better performance on a few isolated examples but lead to worse overall performance on a more representative set of examples. Therefore to be sure that a change is net positive to performance it may be necessary to define a comprehensive test suite (also known an as an “eval”).\nTactic:\n\nEvaluate model outputs with reference to gold-standard answers\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Large Language Models",
      "Prompting"
    ]
  },
  {
    "objectID": "llm/exercises/ex_gpt_ner_with_function_calls.html",
    "href": "llm/exercises/ex_gpt_ner_with_function_calls.html",
    "title": "Exercise: NER with tool calling",
    "section": "",
    "text": "Task: Create a small script that uses tool (or function calling) to extract the following named entities from a given text: City, State, Person.\nInstructions:\n\nDefine an OpenAI tool with a function named_entity_recognition.\nChoose an appropriate output format, for example: {\"named_entities\": [{\"entity\": \"Mike\", \"label\": \"Person}, {\"entity\": \"Münster\", \"label\": \"City\"}]}\nDefine a matching prompt in the role system and the text input for the role user.\nExtract the result.\n\n\n# prerequisites\nimport os\nfrom llm_utils.client import get_openai_client\n\nMODEL = \"gpt4\"\n\nclient = get_openai_client(\n    model=MODEL,\n    config_path=os.environ.get(\"CONFIG_PATH\")\n)\n\n# here goes your code\n\n\n\nShow solution\n\n\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"named_entity_recognition\",\n            \"description\": \"Extract the named entities from the given text.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"named_entities\": {\n                        \"type\": \"array\",\n                        \"description\": \"A list of all extracted named entities in form of dictionaries containing the entity name and the label\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"entity\": {\"type\": \"string\"}, \n                                \"label\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"entity\", \"label\"]\n                        }\n                    },\n                },\n                \"required\": [\"named_entities\"],\n            },\n        }\n    }\n]\n\n\n# define the prompts\nmessages = []\nmessages.append({\"role\": \"system\", \"content\": \"Extract all named entities from the provided text. Possible labels are 'City', 'State' or 'Person'. If no named entities are contained in the text, do not make assumptions and return nothing.\"})\nmessages.append({\"role\": \"user\", \"content\": \"Leonard Hoffstaedter lives in Pasadena, CA.\"})\n\nresponse = client.chat.completions.create(\n    model=MODEL,\n    messages=messages,\n    tools=tools,\n    tool_choice={\"type\": \"function\", \"function\": {\"name\": \"named_entity_recognition\"}}\n)\nresponse\n\n\nChatCompletion(id='chatcmpl-99ALw7LjaBzZ63s5CMt9wDGn3aWhM', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content=None, role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_1aw75NLIUiEpdYMztdXRDZEh', function=Function(arguments='{\\n\"named_entities\": [\\n  {\\n    \"entity\": \"Leonard Hoffstaedter\",\\n    \"label\": \"Person\"\\n  },\\n  {\\n    \"entity\": \"Pasadena\",\\n    \"label\": \"City\"\\n  },\\n  {\\n    \"entity\": \"CA\",\\n    \"label\": \"State\"\\n  }\\n]\\n}', name='named_entity_recognition'), type='function')]), content_filter_results={})], created=1711971776, model='gpt-4', object='chat.completion', system_fingerprint=None, usage=CompletionUsage(completion_tokens=68, prompt_tokens=142, total_tokens=210), prompt_filter_results=[{'prompt_index': 0, 'content_filter_results': {'hate': {'filtered': False, 'severity': 'safe'}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}])\n\n\n\n# retrieve the result\nimport json \n\nresult = json.loads(response.choices[0].message.tool_calls[0].function.arguments)\nfor named_entity in result[\"named_entities\"]: \n    print(f\"{named_entity['entity']}: {named_entity['label']}\")\n\nLeonard Hoffstaedter: Person\nPasadena: City\nCA: State\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Large Language Models",
      "Exercise: NER with tool calling"
    ]
  },
  {
    "objectID": "llm/exercises/ex_gpt_start.html",
    "href": "llm/exercises/ex_gpt_start.html",
    "title": "Exercise: OpenAI - Getting started",
    "section": "",
    "text": "Task: Explore the OpenAI chat.completions API.\nInstructions:\n\nGenerate a chat completion and analyze the response object ChatCompletion. What information do you get with each completion?\nHow can you access the actual completion of your prompt?\nUse the OpenAI API documentation to find out what choices are and how they are used.\nPlay around with the parameters temperature and top_p for a simple prompt. What do you notice?\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Large Language Models",
      "Exercise: OpenAI - Getting started"
    ]
  },
  {
    "objectID": "llm/intro.html",
    "href": "llm/intro.html",
    "title": "Introduction to LLM",
    "section": "",
    "text": "Note\n\n\n\nIn this seminar, we will not go into detail about the technicalities of large language models and, in particular, the transformers used in GPT. However, it is useful to have at least a rough understanding of how modern large language models work in general such that we can both appreciate their capabilities, but also understand and be aware of their limitations. This is the goal of the following sections.\n\n\nWith the rise of machine learning and deep learning in the 2000s, the focus of NLP significantly shifted into this direction as well and researchers began employing neural networks for tasks such as text classification and sentiment analysis. The major difference to other machine learning applications is in the way the input to the neural networks is processed. Traditionally, neural networks require numerical input which is fed into the network and processed by the different layers. In natural language processing, the input data is text, however, so how would we feed text into a neural network?\nLuckily, we have already seen part of the solution to this problem: word and text embeddings or vectorization. A very simple example we have encountered is a Bag of Words, but there are many better ideas available. We will dive more into the details in the section about embeddings, but essentially embeddings constitute a numerical representation of the input text, that we can use them to feed text into a classical neural network.\nA simple architecture could look like this:\n\n\n\n\n\nflowchart LR\n  A(Input Text) --&gt; B(Tokenization)\n  B --&gt; C(Token processing)\n  C --&gt; D(Embedding Layer)\n  D --&gt; E(Hidden Layers)\n  E --&gt; F(Output Layer)\n\n\n\n\n\n\nIn this kind of architecture, the input text serves is the raw text data, which then undergoes preprocessing steps like cleaning, tokenization and stop word removal to make it machine-readable. Next, the token are fed into an embedding layer, where they are transformed into a vector representation, turning text into numerical values. If we do it well, these embeddings capture the semantic meaning of words, enabling the model to understand the text and its context. Recalling or BoW example, the first three stages could look like this:\n\n\n\n\n\nflowchart LR\n  A(A cat does cat things) --&gt; B{\" \"}\n  B --&gt; C(A)\n  B --&gt; D(cat)\n  B --&gt; E(does)\n  B --&gt; F(cat)\n  B --&gt; G(things)\n  D --&gt; H(cat)\n  E --&gt; I(do)\n  F --&gt; J(cat)\n  G --&gt; K(thing)\n\n  H --&gt; L(cat: 2)\n  J --&gt; L\n  I --&gt; M(do: 1)\n  K --&gt; N(thing: 1)\n\n  L --&gt; O(2)\n  M --&gt; P(1)\n  N --&gt; Q(1)\n\n\n\n\n\n\n\nThis numerical representation of our text then flows through the neural network. It passes through one or more hidden layers consisting of neurons that learn patterns and relationships within the input data, helping the model extract relevant features and information. Finally, the processed data reaches the output layer, where the model produces its final output. Depending on the task at hand, this output could take various forms, such as sentiment class probabilities or text labels. As an example, let’s have a look at text classification.\n\nExample: Text classification with a neural network\nThe first step, as usual in machine learning tasks, is to gather a dataset consisting of text documents along with their corresponding labels or categories. For example, if we’re classifying news articles into categories like sports, politics, and entertainment, we would need a dataset where each article is labeled with its respective category. Once we have enough labeled data at hand, the text data needs to be preprocessed to convert it into a format suitable for training. This typically involves the steps we have already encountered like tokenization (splitting text into words or subwords), removing punctuation and stop words, and converting words to lowercase for easier processing. Next, the text data is converted into numerical vectors that can be fed into a neural network. This is usually done by representing each word as a unique index or by using techniques like word embeddings (e.g., Word2Vec, GloVe) to represent words as dense vectors.\nThe model training then follows in a usual setting: The preprocessed and vectorized data is split into training and validation sets. The training set is used to train the neural network, while the validation set is used to evaluate its performance and tune the hyper parameters of the network or its general structure. During training, the neural network learns to map input text vectors to their corresponding class labels by iteratively adjusting the weights of the network to minimize a loss function, which measures the difference between the predicted labels and the true labels. If we think of, for example, think of BoW embeddings again, the frequency of certain words in the input text might increase of decrease the likelihood for certain labels in the output.\n\n\nSequence generation and language modeling\nA special NLP problem that is worth having a look at is the idea of sequence generation, where models are trained to generate sequences of data, such as text, images, or music, based on given input or context. These models learn to understand the underlying patterns and relationships in the data and generate new sequences that resemble the training data. Sequence generation has diverse applications, including natural language generation, image captioning, and music composition. An important part of text sequences (as opposed to, for example, text classification), is that they require an inherent understanding of the structure of the language (because otherwise the text sequences will be nonsense). So if models are able to perform this task, they must have “understood” the concept and structure of language to a certain extent.\nThis idea leads to an even more important concept: language modeling. Language modeling is a fundamental task that aims to understand and predict the structure, context, and semantics of human language. At its core, language modeling involves training a model to predict the probability distribution of words or tokens in a sequence given the preceding context. In simple words, given a sequence of words or token, which tokens are most likely to appear next?\n\n\n\n\n\nflowchart LR\n  A(The) --&gt; B(bird)\n  B --&gt; C(flew)\n  C --&gt; D(over)\n  D --&gt; E(the)\n  E --&gt; F{?}\n  F --&gt; G(\"p(rooftops)=0.31\")\n  F --&gt; H(\"p(trees)=0.14\")\n  F --&gt; J(\"p(guitar)=0.001\")\n\n\n\n\n\n\nThis predictive capability allows language models to generate coherent and contextually relevant text. The training process of a language model typically involves exposing the model to large amounts of text data (also called a corpus) and teaching it to learn the statistical properties of language. This includes capturing syntactic structures, semantic relationships, and contextual nuances present in natural language. The great part is that the training process can happen in an unsupervised fashion: we do not require any labeled data, but can virtually use any type of text available. In particular with the internet as an open source to mainly text data, we have massive amounts of data available to perform language modeling on.\nOne of the key challenges in language modeling, however, is handling the vast and diverse nature of human language. Language exhibits complex patterns, variations, and ambiguities, making it inherently challenging for models to accurately capture its richness and diversity. Additionally, language models must contend with issues such as out-of-vocabulary words, long-range dependencies, and domain-specific knowledge, requiring robust architectures and sophisticated algorithms to address these challenges effectively. Despite these challenges, language modeling continues to be a rapidly evolving field of research, with lots of advancements in model architectures, training techniques, and evaluation methodologies. Recent breakthroughs in deep learning, particularly with transformer-based architectures like BERT (Bidirectional Encoder Representations from Transformers) and GPT (Generative Pre-trained Transformer), have significantly pushed the boundaries of language understanding and generation, achieving remarkable performance across a wide range of NLP tasks.\n\n\nFine-tuning models\nIn most applications, a model which has been trained to do language modeling is not the end of the story. Instead, it is often referred to as a “pre-trained” model that can now be fine-tuned to a specific task. Fine-tuning in general is a powerful technique in machine learning that allows practitioners to adapt pre-trained language models to specific tasks. At its core, it aims to leverage the knowledge and representations learned by a pre-trained LLM on a large corpus of text data, and tries to further train it on task-specific labeled data to tailor its capabilities to a particular task. The concept draws inspiration from transfer learning and enables practitioners to capitalize on the wealth of linguistic knowledge encoded within pre-trained models and adapt it to new tasks without the need for extensive training from scratch.\nThe fine-tuning process usually begins in a similar fashion as training a model from scratch. We select a specific downstream task that the model is intended to perform, such as text classification, sentiment analysis or language generation. The next step is to gather task-specific labeled data that is relevant to the chosen task. To recall a known example, if the objective is sentiment analysis, a dataset comprising text samples labeled with sentiment categories (positive, negative, neutral) would be required. With the task-specific data in hand, the fine-tuning process unfolds as follows: first, the pre-trained LLM is initialized with its learned parameters from pre-training, which serves as the starting point for further training. Then, the model is trained on the task-specific data using supervised learning techniques, where the objective is to minimize a task-specific loss function. This process involves adjusting the parameters of the model to better capture the patterns and relationships present in the task-specific data. Fine-tuning a model often involves replacing the output layer and/or freezing or adding hidden layers of the model.\nIn this seminar, we won’t go into the details of fine-tuning, however, it is an important concept that makes the current quality of large language models possible.\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Large Language Models",
      "Introduction to LLM"
    ]
  },
  {
    "objectID": "llm/parameterization.html",
    "href": "llm/parameterization.html",
    "title": "Parameterization of GPT",
    "section": "",
    "text": "The GPT models provided by OpenAI provide a variety of parameters that can change the way the language model responds. Below you can find a list of the most important ones.",
    "crumbs": [
      "Seminar",
      "Large Language Models",
      "Parameterization of GPT"
    ]
  },
  {
    "objectID": "llm/parameterization.html#roles",
    "href": "llm/parameterization.html#roles",
    "title": "Parameterization of GPT",
    "section": "Roles",
    "text": "Roles\nIn order to cover most tasks you want to perform using a chat format, the OpenAI API let’s you define different roles in the chat. The available roles are system, assistant, user and tools. You should already be familiar with two of them by now: The user role corresponds to the actual user prompting the language model, all answers are given with the assisstant role.\nThe system role can now be given to provide some additional general instructions to the language model that are typically not a user input, for example, the style in which the model responds. In this case, an example is better than any explanation.\n\nimport os\nfrom llm_utils.client import get_openai_client\n\nMODEL = \"gpt4\"\n\nclient = get_openai_client(\n    model=MODEL,\n    config_path=os.environ.get(\"CONFIG_PATH\")\n)\n\ncompletion = client.chat.completions.create(\n  model=\"MODEL\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are an annoyed technician working in a help center for dish washers, who answers in short, unfriendly bursts.\"},\n    {\"role\": \"user\", \"content\": \"My dish washer does not clean the dishes, what could be the reason.\"}\n  ]\n)\n\nprint(completion.choices[0].message.content)\n\nCheck your water temperature. Too cold? Heat it. Dishwasher spray arms not spinning? Clean 'em. Using cheap detergent? Get a better one. Not loading properly? Sort it out. Not running a full cycle? Reset it. Not rocket science.",
    "crumbs": [
      "Seminar",
      "Large Language Models",
      "Parameterization of GPT"
    ]
  },
  {
    "objectID": "llm/parameterization.html#function-calling",
    "href": "llm/parameterization.html#function-calling",
    "title": "Parameterization of GPT",
    "section": "Function calling",
    "text": "Function calling\nAs we have seen, most interactions with a language model happen in form of a chat with almost “free” question or instructions and answers. While this seems the most natural in most cases, it is not always a practical format if we want to use a language model for very specific purposes. This happens particularly often when we want to employ a language model in business situations, where we require a consistent output of the model.\nAs an example, let us try to use GPT for sentiment analysis (see also here). Let’s say we want GPT to classify a text into one of the following four categories:\n\nsentiment_categories = [\n    \"positive\", \n    \"negative\",\n    \"neutral\",\n    \"mixed\"\n]\n\nWe could do the following:\n\nmessages = []\nmessages.append(\n    {\"role\": \"system\", \"content\": f\"Classify the given text into one of the following sentiment categories: {sentiment_categories}.\"}\n)\nmessages.append(\n    {\"role\": \"user\", \"content\": \"I really did not like the movie.\"}\n)\n\nresponse = client.chat.completions.create(\n    messages=messages,\n    model=MODEL\n)\n\nprint(f\"Response: '{response.choices[0].message.content}'\")\n\n\n\nResponse: 'Category: Negative'\n\n\nIt is easy to spot the problem: GPT does not necessarily answer in the way we expect or want it to. In this case, instead of simply returning the correct category, it also returns the string Category: alongside it (and capitalized Negative). So if we were to use the answer in a program or data base, we’d now again have to use some NLP techniques to parse it in order eventually retrieve exactly the category we were looking for: negative. What we need instead is a way to constrain GPT to a specific way of answering, and this is where functions or tools come into play (see also Function calling and Function calling (cookbook)).\nThis concept allows us to specify the exact output format we expect to receive from GPT (it is called functions since ideally we want to call a function directly on the output of GPT so it has to be in a specific format).\n\n# this looks intimidating but isn't that complicated\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"analyze_sentiment\",\n            \"description\": \"Analyze the sentiment in a given text.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"sentiment\": {\n                        \"type\": \"string\",\n                        \"enum\": sentiment_categories,\n                        \"description\": f\"The sentiment of the text.\"\n                    }\n                },\n                \"required\": [\"sentiment\"],\n            }\n        }\n    }\n]\n\n\nmessages = []\nmessages.append(\n    {\"role\": \"system\", \"content\": f\"Classify the given text into one of the following sentiment categories: {sentiment_categories}.\"}\n)\nmessages.append(\n    {\"role\": \"user\", \"content\": \"I really did not like the movie.\"}\n)\n\nresponse = client.chat.completions.create(\n    messages=messages,\n    model=MODEL,\n    tools=tools,\n    tool_choice={\n        \"type\": \"function\", \n        \"function\": {\"name\": \"analyze_sentiment\"}}\n)\n\nprint(f\"Response: '{response.choices[0].message.tool_calls[0].function.arguments}'\")\n\nResponse: '{\n\"sentiment\": \"negative\"\n}'\n\n\nWe can now easily extract what we need:\n\nimport json \nresult = json.loads(response.choices[0].message.tool_calls[0].function.arguments) # remember that the answer is a string\nprint(result[\"sentiment\"])\n\nnegative\n\n\nWe can also include multiple function parameters if our desired output has multiple components. Let’s try to include another parameter which includes the reason for the sentiment.\n\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"analyze_sentiment\",\n            \"description\": \"Analyze the sentiment in a given text.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"sentiment\": {\n                        \"type\": \"string\",\n                        \"enum\": sentiment_categories,\n                        \"description\": f\"The sentiment of the text.\"\n                    },\n                    \"reason\": {\n                        \"type\": \"string\",\n                        \"description\": \"The reason for the sentiment in few words. If there is no information, do not make assumptions and leave blank.\"\n                    }\n                },\n                \"required\": [\"sentiment\", \"reason\"],\n            }\n        }\n    }\n]\n\n\nmessages = []\nmessages.append(\n    {\"role\": \"system\", \"content\": f\"Classify the given text into one of the following sentiment categories: {sentiment_categories}. If you can, also extract the reason.\"}\n)\nmessages.append(\n    {\"role\": \"user\", \"content\": \"I loved the movie, Johnny Depp is a great actor.\"}\n)\n\nresponse = client.chat.completions.create(\n    messages=messages,\n    model=MODEL,\n    tools=tools,\n    tool_choice={\n        \"type\": \"function\", \n        \"function\": {\"name\": \"analyze_sentiment\"}}\n)\n\nprint(f\"Response: '{response.choices[0].message.tool_calls[0].function.arguments}'\")\n\nResponse: '{\n\"sentiment\": \"positive\",\n\"reason\": \"The text expresses love for the movie and admiration for Johnny Depp's acting skills.\"\n}'\n\n\nHere, again, we could also constrain the possibilities for the reason to a certain set. Hence, functions are great to have more consistent answers of the language model such that we can use it in applications.",
    "crumbs": [
      "Seminar",
      "Large Language Models",
      "Parameterization of GPT"
    ]
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/httpx-0.27.0.dist-info/licenses/LICENSE.html",
    "href": "script_venv/lib/python3.8/site-packages/httpx-0.27.0.dist-info/licenses/LICENSE.html",
    "title": "",
    "section": "",
    "text": "Copyright © 2019, Encode OSS Ltd. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\n Back to top"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/nltk-3.8.1.dist-info/AUTHORS.html",
    "href": "script_venv/lib/python3.8/site-packages/nltk-3.8.1.dist-info/AUTHORS.html",
    "title": "Natural Language Toolkit (NLTK) Authors",
    "section": "",
    "text": "Steven Bird stevenbird1@gmail.com\nEdward Loper edloper@gmail.com\nEwan Klein ewan@inf.ed.ac.uk\n\n\n\n\n\nTom Aarsen\nRami Al-Rfou’\nMark Amery\nGreg Aumann\nIvan Barria\nIngolf Becker\nYonatan Becker\nPaul Bedaride\nSteven Bethard\nRobert Berwick\nDan Blanchard\nNathan Bodenstab\nAlexander Böhm\nFrancis Bond\nPaul Bone\nJordan Boyd-Graber\nDaniel Blanchard\nPhil Blunsom\nLars Buitinck\nCristian Capdevila\nSteve Cassidy\nChen-Fu Chiang\nDmitry Chichkov\nJinyoung Choi\nAndrew Clausen\nLucas Champollion\nGraham Christensen\nTrevor Cohn\nDavid Coles\nTom Conroy https://github.com/tconroy\nClaude Coulombe\nLucas Cooper\nRobin Cooper\nChris Crowner\nJames Curran\nArthur Darcet\nDariel Dato-on\nSelina Dennis\nLeon Derczynski\nAlexis Dimitriadis\nNikhil Dinesh\nLiang Dong\nDavid Doukhan\nRebecca Dridan\nPablo Duboue\nLong Duong\nChristian Federmann\nCampion Fellin\nMichelle Fullwood\nDan Garrette\nMaciej Gawinecki\nJean Mark Gawron\nSumukh Ghodke\nYoav Goldberg\nMichael Wayne Goodman\nDougal Graham\nBrent Gray\nSimon Greenhill\nClark Grubb\nEduardo Pereira Habkost\nMasato Hagiwara\nLauri Hallila\nMichael Hansen\nYurie Hara\nWill Hardy\nTyler Hartley\nPeter Hawkins\nSaimadhav Heblikar\nFredrik Hedman\nHelder\nMichael Heilman\nOfer Helman\nChristopher Hench\nBruce Hill\nAmy Holland\nKristy Hollingshead\nMarcus Huderle\nBaden Hughes\nNancy Ide\nRebecca Ingram\nEdward Ivanovic\nThomas Jakobsen\nNick Johnson\nEric Kafe\nPiotr Kasprzyk\nAngelos Katharopoulos\nSudharshan Kaushik\nChris Koenig\nMikhail Korobov\nDenis Krusko\nIlia Kurenkov\nStefano Lattarini\nPierre-François Laquerre\nStefano Lattarini\nHaejoong Lee\nJackson Lee\nMax Leonov\nChris Liechti\nHyuckin David Lim\nTom Lippincott\nPeter Ljunglöf\nAlex Louden\nJoseph Lynch\nNitin Madnani\nFelipe Madrigal\nBjørn Mæland\nDean Malmgren\nChristopher Maloof\nRob Malouf\nIker Manterola\nCarl de Marcken\nMitch Marcus\nTorsten Marek\nRobert Marshall\nMarius Mather\nDuncan McGreggor\nDavid McClosky\nXinfan Meng\nDmitrijs Milajevs\nMargaret Mitchell\nTomonori Nagano\nJason Narad\nShari A’aidil Nasruddin\nLance Nathan\nMorten Neergaard\nDavid Nemeskey\nEric Nichols\nJoel Nothman\nAlireza Nourian\nAlexander Oleynikov\nPierpaolo Pantone\nTed Pedersen\nJacob Perkins\nAlberto Planas\nOndrej Platek\nAlessandro Presta\nQi Liu\nMartin Thorsen Ranang\nMichael Recachinas\nBrandon Rhodes\nJoshua Ritterman\nWill Roberts\nStuart Robinson\nCarlos Rodriguez\nLorenzo Rubio\nAlex Rudnick\nJussi Salmela\nGeoffrey Sampson\nKepa Sarasola\nKevin Scannell\nNathan Schneider\nRico Sennrich\nThomas Skardal\nEric Smith\nLynn Soe\nRob Speer\nPeter Spiller\nRichard Sproat\nCeri Stagg\nPeter Stahl\nOliver Steele\nThomas Stieglmaier\nJan Strunk\nLiling Tan\nClaire Taylor\nLouis Tiao\nSteven Tomcavage\nTiago Tresoldi\nMarcus Uneson\nYu Usami\nPetro Verkhogliad\nPeter Wang\nZhe Wang\nCharlotte Wilson\nChuck Wooters\nSteven Xu\nBeracah Yankama\nLei Ye (叶磊)\nPatrick Ye\nGeraldine Sim Wei Ying\nJason Yoder\nThomas Zieglier\n0ssifrage\nducki13\nkiwipi\nlade\nisnowfy\nonesandzeros\npquentin\nwvanlint\nÁlvaro Justen https://github.com/turicas\nbjut-hz\nSergio Oller\nWill Monroe\nElijah Rippeth\nEmil Manukyan\nCasper Lehmann-Strøm\nAndrew Giel\nTanin Na Nakorn\nLinghao Zhang\nColin Carroll\nHeguang Miao\nHannah Aizenman (story645)\nGeorge Berry\nAdam Nelson\nJ Richard Snape\nAlex Constantin alex@keyworder.ch\nTsolak Ghukasyan\nPrasasto Adi\nSafwan Kamarrudin\nArthur Tilley\nVilhjalmur Thorsteinsson\nJaehoon Hwang https://github.com/jaehoonhwang\nChintan Shah https://github.com/chintanshah24\nsbagan\nZicheng Xu\nAlbert Au Yeung https://github.com/albertauyeung\nShenjian Zhao\nDeng Wang https://github.com/lmatt-bit\nAli Abdullah\nStoytcho Stoytchev\nLakhdar Benzahia\nKheireddine Abainia https://github.com/xprogramer\nYibin Lin https://github.com/yibinlin\nArtiem Krinitsyn\nBjörn Mattsson\nOleg Chislov\nPavan Gururaj Joshi https://github.com/PavanGJ\nEthan Hill https://github.com/hill1303\nVivek Lakshmanan\nSomnath Rakshit https://github.com/somnathrakshit\nAnlan Du\nPulkit Maloo https://github.com/pulkitmaloo\nBrandon M. Burroughs https://github.com/brandonmburroughs\nJohn Stewart https://github.com/free-variation\nIaroslav Tymchenko https://github.com/myproblemchild\nAleš Tamchyna\nTim Gianitsos https://github.com/timgianitsos\nPhilippe Partarrieu https://github.com/ppartarr\nAndrew Owen Martin\nAdrian Ellis https://github.com/adrianjellis\nNat Quayle Nelson https://github.com/nqnstudios\nYanpeng Zhao https://github.com/zhaoyanpeng\nMatan Rak https://github.com/matanrak\nNick Ulle https://github.com/nick-ulle\nUday Krishna https://github.com/udaykrishna\nOsman Zubair https://github.com/okz12\nViresh Gupta https://github.com/virresh\nOndřej Cífka https://github.com/cifkao\nIris X. Zhou https://github.com/irisxzhou\nDevashish Lal https://github.com/BLaZeKiLL\nGerhard Kremer https://github.com/GerhardKa\nNicolas Darr https://github.com/ndarr\nHervé Nicol https://github.com/hervenicol\nAlexandre H. T. Dias https://github.com/alexandredias3d\nDaksh Shah https://github.com/Daksh\nJacob Weightman https://github.com/jacobdweightman\nBonifacio de Oliveira https://github.com/Bonifacio2\nArmins Bagrats Stepanjans https://github.com/ab-10\nVassilis Palassopoulos https://github.com/palasso\nRam Rachum https://github.com/cool-RR\nOr Sharir https://github.com/orsharir\nDenali Molitor https://github.com/dmmolitor\nJacob Moorman https://github.com/jdmoorman\nCory Nezin https://github.com/corynezin\nMatt Chaput\nDanny Sepler https://github.com/dannysepler\nAkshita Bhagia https://github.com/AkshitaB\nPratap Yadav https://github.com/prtpydv\nHiroki Teranishi https://github.com/chantera\nRuben Cartuyvels https://github.com/rubencart\nDalton Pearson https://github.com/daltonpearson\nRobby Horvath https://github.com/robbyhorvath\nGavish Poddar https://github.com/gavishpoddar\nSaibo Geng https://github.com/Saibo-creator\nAhmet Yildirim https://github.com/RnDevelover\nYuta Nakamura https://github.com/yutanakamura-tky\nAdam Hawley https://github.com/adamjhawley\nPanagiotis Simakis https://github.com/sp1thas\nRichard Wang https://github.com/richarddwang\nAlexandre Perez-Lebel https://github.com/aperezlebel\nFernando Carranza https://github.com/fernandocar86\nMartin Kondratzky https://github.com/martinkondra\nHeungson Lee https://github.com/heungson\nM.K. Pawelkiewicz https://github.com/hamiltonianflow\nSteven Thomas Smith https://github.com/essandess\nJan Lennartz https://github.com/Madnex\n\n\n\n\n\n\n\nMartin Porter\nVivake Gupta\nBarry Wilkins\nHiranmay Ghosh\nChris Emerson\n\n\n\n\n\nAssem Chelli\nAbdelkrim Aries\nLakhdar Benzahia"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/nltk-3.8.1.dist-info/AUTHORS.html#original-authors",
    "href": "script_venv/lib/python3.8/site-packages/nltk-3.8.1.dist-info/AUTHORS.html#original-authors",
    "title": "Natural Language Toolkit (NLTK) Authors",
    "section": "",
    "text": "Steven Bird stevenbird1@gmail.com\nEdward Loper edloper@gmail.com\nEwan Klein ewan@inf.ed.ac.uk"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/nltk-3.8.1.dist-info/AUTHORS.html#contributors",
    "href": "script_venv/lib/python3.8/site-packages/nltk-3.8.1.dist-info/AUTHORS.html#contributors",
    "title": "Natural Language Toolkit (NLTK) Authors",
    "section": "",
    "text": "Tom Aarsen\nRami Al-Rfou’\nMark Amery\nGreg Aumann\nIvan Barria\nIngolf Becker\nYonatan Becker\nPaul Bedaride\nSteven Bethard\nRobert Berwick\nDan Blanchard\nNathan Bodenstab\nAlexander Böhm\nFrancis Bond\nPaul Bone\nJordan Boyd-Graber\nDaniel Blanchard\nPhil Blunsom\nLars Buitinck\nCristian Capdevila\nSteve Cassidy\nChen-Fu Chiang\nDmitry Chichkov\nJinyoung Choi\nAndrew Clausen\nLucas Champollion\nGraham Christensen\nTrevor Cohn\nDavid Coles\nTom Conroy https://github.com/tconroy\nClaude Coulombe\nLucas Cooper\nRobin Cooper\nChris Crowner\nJames Curran\nArthur Darcet\nDariel Dato-on\nSelina Dennis\nLeon Derczynski\nAlexis Dimitriadis\nNikhil Dinesh\nLiang Dong\nDavid Doukhan\nRebecca Dridan\nPablo Duboue\nLong Duong\nChristian Federmann\nCampion Fellin\nMichelle Fullwood\nDan Garrette\nMaciej Gawinecki\nJean Mark Gawron\nSumukh Ghodke\nYoav Goldberg\nMichael Wayne Goodman\nDougal Graham\nBrent Gray\nSimon Greenhill\nClark Grubb\nEduardo Pereira Habkost\nMasato Hagiwara\nLauri Hallila\nMichael Hansen\nYurie Hara\nWill Hardy\nTyler Hartley\nPeter Hawkins\nSaimadhav Heblikar\nFredrik Hedman\nHelder\nMichael Heilman\nOfer Helman\nChristopher Hench\nBruce Hill\nAmy Holland\nKristy Hollingshead\nMarcus Huderle\nBaden Hughes\nNancy Ide\nRebecca Ingram\nEdward Ivanovic\nThomas Jakobsen\nNick Johnson\nEric Kafe\nPiotr Kasprzyk\nAngelos Katharopoulos\nSudharshan Kaushik\nChris Koenig\nMikhail Korobov\nDenis Krusko\nIlia Kurenkov\nStefano Lattarini\nPierre-François Laquerre\nStefano Lattarini\nHaejoong Lee\nJackson Lee\nMax Leonov\nChris Liechti\nHyuckin David Lim\nTom Lippincott\nPeter Ljunglöf\nAlex Louden\nJoseph Lynch\nNitin Madnani\nFelipe Madrigal\nBjørn Mæland\nDean Malmgren\nChristopher Maloof\nRob Malouf\nIker Manterola\nCarl de Marcken\nMitch Marcus\nTorsten Marek\nRobert Marshall\nMarius Mather\nDuncan McGreggor\nDavid McClosky\nXinfan Meng\nDmitrijs Milajevs\nMargaret Mitchell\nTomonori Nagano\nJason Narad\nShari A’aidil Nasruddin\nLance Nathan\nMorten Neergaard\nDavid Nemeskey\nEric Nichols\nJoel Nothman\nAlireza Nourian\nAlexander Oleynikov\nPierpaolo Pantone\nTed Pedersen\nJacob Perkins\nAlberto Planas\nOndrej Platek\nAlessandro Presta\nQi Liu\nMartin Thorsen Ranang\nMichael Recachinas\nBrandon Rhodes\nJoshua Ritterman\nWill Roberts\nStuart Robinson\nCarlos Rodriguez\nLorenzo Rubio\nAlex Rudnick\nJussi Salmela\nGeoffrey Sampson\nKepa Sarasola\nKevin Scannell\nNathan Schneider\nRico Sennrich\nThomas Skardal\nEric Smith\nLynn Soe\nRob Speer\nPeter Spiller\nRichard Sproat\nCeri Stagg\nPeter Stahl\nOliver Steele\nThomas Stieglmaier\nJan Strunk\nLiling Tan\nClaire Taylor\nLouis Tiao\nSteven Tomcavage\nTiago Tresoldi\nMarcus Uneson\nYu Usami\nPetro Verkhogliad\nPeter Wang\nZhe Wang\nCharlotte Wilson\nChuck Wooters\nSteven Xu\nBeracah Yankama\nLei Ye (叶磊)\nPatrick Ye\nGeraldine Sim Wei Ying\nJason Yoder\nThomas Zieglier\n0ssifrage\nducki13\nkiwipi\nlade\nisnowfy\nonesandzeros\npquentin\nwvanlint\nÁlvaro Justen https://github.com/turicas\nbjut-hz\nSergio Oller\nWill Monroe\nElijah Rippeth\nEmil Manukyan\nCasper Lehmann-Strøm\nAndrew Giel\nTanin Na Nakorn\nLinghao Zhang\nColin Carroll\nHeguang Miao\nHannah Aizenman (story645)\nGeorge Berry\nAdam Nelson\nJ Richard Snape\nAlex Constantin alex@keyworder.ch\nTsolak Ghukasyan\nPrasasto Adi\nSafwan Kamarrudin\nArthur Tilley\nVilhjalmur Thorsteinsson\nJaehoon Hwang https://github.com/jaehoonhwang\nChintan Shah https://github.com/chintanshah24\nsbagan\nZicheng Xu\nAlbert Au Yeung https://github.com/albertauyeung\nShenjian Zhao\nDeng Wang https://github.com/lmatt-bit\nAli Abdullah\nStoytcho Stoytchev\nLakhdar Benzahia\nKheireddine Abainia https://github.com/xprogramer\nYibin Lin https://github.com/yibinlin\nArtiem Krinitsyn\nBjörn Mattsson\nOleg Chislov\nPavan Gururaj Joshi https://github.com/PavanGJ\nEthan Hill https://github.com/hill1303\nVivek Lakshmanan\nSomnath Rakshit https://github.com/somnathrakshit\nAnlan Du\nPulkit Maloo https://github.com/pulkitmaloo\nBrandon M. Burroughs https://github.com/brandonmburroughs\nJohn Stewart https://github.com/free-variation\nIaroslav Tymchenko https://github.com/myproblemchild\nAleš Tamchyna\nTim Gianitsos https://github.com/timgianitsos\nPhilippe Partarrieu https://github.com/ppartarr\nAndrew Owen Martin\nAdrian Ellis https://github.com/adrianjellis\nNat Quayle Nelson https://github.com/nqnstudios\nYanpeng Zhao https://github.com/zhaoyanpeng\nMatan Rak https://github.com/matanrak\nNick Ulle https://github.com/nick-ulle\nUday Krishna https://github.com/udaykrishna\nOsman Zubair https://github.com/okz12\nViresh Gupta https://github.com/virresh\nOndřej Cífka https://github.com/cifkao\nIris X. Zhou https://github.com/irisxzhou\nDevashish Lal https://github.com/BLaZeKiLL\nGerhard Kremer https://github.com/GerhardKa\nNicolas Darr https://github.com/ndarr\nHervé Nicol https://github.com/hervenicol\nAlexandre H. T. Dias https://github.com/alexandredias3d\nDaksh Shah https://github.com/Daksh\nJacob Weightman https://github.com/jacobdweightman\nBonifacio de Oliveira https://github.com/Bonifacio2\nArmins Bagrats Stepanjans https://github.com/ab-10\nVassilis Palassopoulos https://github.com/palasso\nRam Rachum https://github.com/cool-RR\nOr Sharir https://github.com/orsharir\nDenali Molitor https://github.com/dmmolitor\nJacob Moorman https://github.com/jdmoorman\nCory Nezin https://github.com/corynezin\nMatt Chaput\nDanny Sepler https://github.com/dannysepler\nAkshita Bhagia https://github.com/AkshitaB\nPratap Yadav https://github.com/prtpydv\nHiroki Teranishi https://github.com/chantera\nRuben Cartuyvels https://github.com/rubencart\nDalton Pearson https://github.com/daltonpearson\nRobby Horvath https://github.com/robbyhorvath\nGavish Poddar https://github.com/gavishpoddar\nSaibo Geng https://github.com/Saibo-creator\nAhmet Yildirim https://github.com/RnDevelover\nYuta Nakamura https://github.com/yutanakamura-tky\nAdam Hawley https://github.com/adamjhawley\nPanagiotis Simakis https://github.com/sp1thas\nRichard Wang https://github.com/richarddwang\nAlexandre Perez-Lebel https://github.com/aperezlebel\nFernando Carranza https://github.com/fernandocar86\nMartin Kondratzky https://github.com/martinkondra\nHeungson Lee https://github.com/heungson\nM.K. Pawelkiewicz https://github.com/hamiltonianflow\nSteven Thomas Smith https://github.com/essandess\nJan Lennartz https://github.com/Madnex"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/nltk-3.8.1.dist-info/AUTHORS.html#others-whose-work-weve-taken-and-included-in-nltk-but-who-didnt-directly-contribute-it",
    "href": "script_venv/lib/python3.8/site-packages/nltk-3.8.1.dist-info/AUTHORS.html#others-whose-work-weve-taken-and-included-in-nltk-but-who-didnt-directly-contribute-it",
    "title": "Natural Language Toolkit (NLTK) Authors",
    "section": "",
    "text": "Martin Porter\nVivake Gupta\nBarry Wilkins\nHiranmay Ghosh\nChris Emerson\n\n\n\n\n\nAssem Chelli\nAbdelkrim Aries\nLakhdar Benzahia"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/soupsieve-2.5.dist-info/licenses/LICENSE.html",
    "href": "script_venv/lib/python3.8/site-packages/soupsieve-2.5.dist-info/licenses/LICENSE.html",
    "title": "",
    "section": "",
    "text": "MIT License\nCopyright (c) 2018 - 2023 Isaac Muse isaacmuse@gmail.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/wasabi/tests/test-data/wasabi-test-notebook.html",
    "href": "script_venv/lib/python3.8/site-packages/wasabi/tests/test-data/wasabi-test-notebook.html",
    "title": "",
    "section": "",
    "text": "import sys\nimport wasabi\n\nwasabi.msg.warn(\"This is a test. This is only a test.\")\nif sys.version_info &gt;= (3, 7):\n    assert wasabi.util.supports_ansi()\n\nprint(sys.stdout)\n\n\n\n\n Back to top"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html",
    "href": "script_venv/lib/python3.8/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html",
    "title": "Authors",
    "section": "",
    "text": "pyqode.qt: Colin Duquesnoy (@ColinDuquesnoy)\nspyderlib.qt: Pierre Raybaut (@PierreRaybaut)\nqt-helpers: Thomas Robitaille (@astrofrog)\n\n\n\n\n\nDaniel Althviz (@dalthviz)\nCarlos Cordoba (@ccordoba12)\nC.A.M. Gerlach (@CAM-Gerlach)\nSpyder Development Team (Spyder-IDE)\n\n\n\n\n\nThe QtPy Contributors"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#original-authors",
    "href": "script_venv/lib/python3.8/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#original-authors",
    "title": "Authors",
    "section": "",
    "text": "pyqode.qt: Colin Duquesnoy (@ColinDuquesnoy)\nspyderlib.qt: Pierre Raybaut (@PierreRaybaut)\nqt-helpers: Thomas Robitaille (@astrofrog)"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#current-maintainers",
    "href": "script_venv/lib/python3.8/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#current-maintainers",
    "title": "Authors",
    "section": "",
    "text": "Daniel Althviz (@dalthviz)\nCarlos Cordoba (@ccordoba12)\nC.A.M. Gerlach (@CAM-Gerlach)\nSpyder Development Team (Spyder-IDE)"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#contributors",
    "href": "script_venv/lib/python3.8/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#contributors",
    "title": "Authors",
    "section": "",
    "text": "The QtPy Contributors"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/cffi/recompiler.html",
    "href": "script_venv/lib/python3.8/site-packages/cffi/recompiler.html",
    "title": "",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/httpcore-1.0.4.dist-info/licenses/LICENSE.html",
    "href": "script_venv/lib/python3.8/site-packages/httpcore-1.0.4.dist-info/licenses/LICENSE.html",
    "title": "",
    "section": "",
    "text": "Copyright © 2020, Encode OSS Ltd. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\n Back to top"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/pyzmq-25.1.2.dist-info/AUTHORS.html",
    "href": "script_venv/lib/python3.8/site-packages/pyzmq-25.1.2.dist-info/AUTHORS.html",
    "title": "",
    "section": "",
    "text": "This project was started and continues to be led by Brian E. Granger (ellisonbg AT gmail DOT com). Min Ragan-Kelley (benjaminrk AT gmail DOT com) is the primary developer of pyzmq at this time.\nThe following people have contributed to the project:\n\nAlexander Else (alexander DOT else AT team DOT telstra DOT com)\nAlexander Pyhalov (apyhalov AT gmail DOT com)\nAlexandr Emelin (frvzmb AT gmail DOT com)\nAmr Ali (amr AT ledgerx DOT com)\nAndre Caron (andre DOT l DOT caron AT gmail DOT com)\nAndrea Crotti (andrea DOT crotti DOT 0 AT gmail DOT com)\nAndrew Gwozdziewycz (git AT apgwoz DOT com)\nBaptiste Lepilleur (baptiste DOT lepilleur AT gmail DOT com)\nBrandyn A. White (bwhite AT dappervision DOT com)\nBrian E. Granger (ellisonbg AT gmail DOT com)\nBrian Hoffman (hoffman_brian AT bah DOT com)\nCarlos A. Rocha (carlos DOT rocha AT gmail DOT com)\nChris Laws (clawsicus AT gmail DOT com)\nChristian Wyglendowski (christian AT bu DOT mp)\nChristoph Gohlke (cgohlke AT uci DOT edu)\nCurtis (curtis AT tinbrain DOT net)\nCyril Holweck (cyril DOT holweck AT free DOT fr)\nDan Colish (dcolish AT gmail DOT com)\nDaniel Lundin (dln AT eintr DOT org)\nDaniel Truemper (truemped AT googlemail DOT com)\nDouglas Creager (douglas DOT creager AT redjack DOT com)\nEduardo Stalinho (eduardooc DOT 86 AT gmail DOT com)\nEren Güven (erenguven0 AT gmail DOT com)\nErick Tryzelaar (erick DOT tryzelaar AT gmail DOT com)\nErik Tollerud (erik DOT tollerud AT gmail DOT com)\nFELD Boris (lothiraldan AT gmail DOT com)\nFantix King (fantix DOT king AT gmail DOT com)\nFelipe Cruz (felipecruz AT loogica DOT net)\nFernando Perez (Fernando DOT Perez AT berkeley DOT edu)\nFrank Wiles (frank AT revsys DOT com)\nFélix-Antoine Fortin (felix DOT antoine DOT fortin AT gmail DOT com)\nGavrie Philipson (gavriep AT il DOT ibm DOT com)\nGodefroid Chapelle (gotcha AT bubblenet DOT be)\nGreg Banks (gbanks AT mybasis DOT com)\nGreg Ward (greg AT gerg DOT ca)\nGuido Goldstein (github AT a-nugget DOT de)\nIan Lee (IanLee1521 AT gmail DOT com)\nIonuț Arțăriși (ionut AT artarisi DOT eu)\nIvo Danihelka (ivo AT danihelka DOT net)\nIyed (iyed DOT bennour AT gmail DOT com)\nJim Garrison (jim AT garrison DOT cc)\nJohn Gallagher (johnkgallagher AT gmail DOT com)\nJulian Taylor (jtaylor DOT debian AT googlemail DOT com)\nJustin Bronder (jsbronder AT gmail DOT com)\nJustin Riley (justin DOT t DOT riley AT gmail DOT com)\nMarc Abramowitz (marc AT marc-abramowitz DOT com)\nMatthew Aburn (mattja6 AT gmail DOT com)\nMichel Pelletier (pelletier DOT michel AT gmail DOT com)\nMichel Zou (xantares09 AT hotmail DOT com)\nMin Ragan-Kelley (benjaminrk AT gmail DOT com)\nNell Hardcastle (nell AT dev-nell DOT com)\nNicholas Pilkington (nicholas DOT pilkington AT gmail DOT com)\nNicholas Piël (nicholas AT nichol DOT as)\nNick Pellegrino (npellegrino AT mozilla DOT com)\nNicolas Delaby (nicolas DOT delaby AT ezeep DOT com)\nOndrej Certik (ondrej AT certik DOT cz)\nPaul Colomiets (paul AT colomiets DOT name)\nPawel Jasinski (pawel DOT jasinski AT gmail DOT com)\nPhus Lu (phus DOT lu AT gmail DOT com)\nRobert Buchholz (rbu AT goodpoint DOT de)\nRobert Jordens (jordens AT gmail DOT com)\nRyan Cox (ryan DOT a DOT cox AT gmail DOT com)\nRyan Kelly (ryan AT rfk DOT id DOT au)\nScott Maxwell (scott AT codecobblers DOT com)\nScott Sadler (github AT mashi DOT org)\nSimon Knight (simon DOT knight AT gmail DOT com)\nStefan Friesel (sf AT cloudcontrol DOT de)\nStefan van der Walt (stefan AT sun DOT ac DOT za)\nStephen Diehl (stephen DOT m DOT diehl AT gmail DOT com)\nSylvain Corlay (scorlay AT bloomberg DOT net)\nThomas Kluyver (takowl AT gmail DOT com)\nThomas Spura (tomspur AT fedoraproject DOT org)\nTigger Bear (Tigger AT Tiggers-Mac-mini DOT local)\nTorsten Landschoff (torsten DOT landschoff AT dynamore DOT de)\nVadim Markovtsev (v DOT markovtsev AT samsung DOT com)\nYannick Hold (yannickhold AT gmail DOT com)\nZbigniew Jędrzejewski-Szmek (zbyszek AT in DOT waw DOT pl)\nhugo shi (hugoshi AT bleb2 DOT (none))\njdgleeson (jdgleeson AT mac DOT com)\nkyledj (kyle AT bucebuce DOT com)\nspez (steve AT hipmunk DOT com)\nstu (stuart DOT axon AT jpcreative DOT co DOT uk)\nxantares (xantares AT fujitsu-l64 DOT (none))\n\nas reported by:\ngit log --all --format='- %aN (%aE)' | sort -u | sed 's/@/ AT /1' | sed -e 's/\\.\\([^ ]\\)/ DOT \\1/g'\nwith some adjustments.\n\n\n\nBrandon Craig-Rhodes (brandon AT rhodesmill DOT org)\nEugene Chernyshov (chernyshov DOT eugene AT gmail DOT com)\nCraig Austin (craig DOT austin AT gmail DOT com)\n\n\n\n\n\nTravis Cline (travis DOT cline AT gmail DOT com)\nRyan Kelly (ryan AT rfk DOT id DOT au)\nZachary Voase (z AT zacharyvoase DOT com)"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/pyzmq-25.1.2.dist-info/AUTHORS.html#authors",
    "href": "script_venv/lib/python3.8/site-packages/pyzmq-25.1.2.dist-info/AUTHORS.html#authors",
    "title": "",
    "section": "",
    "text": "This project was started and continues to be led by Brian E. Granger (ellisonbg AT gmail DOT com). Min Ragan-Kelley (benjaminrk AT gmail DOT com) is the primary developer of pyzmq at this time.\nThe following people have contributed to the project:\n\nAlexander Else (alexander DOT else AT team DOT telstra DOT com)\nAlexander Pyhalov (apyhalov AT gmail DOT com)\nAlexandr Emelin (frvzmb AT gmail DOT com)\nAmr Ali (amr AT ledgerx DOT com)\nAndre Caron (andre DOT l DOT caron AT gmail DOT com)\nAndrea Crotti (andrea DOT crotti DOT 0 AT gmail DOT com)\nAndrew Gwozdziewycz (git AT apgwoz DOT com)\nBaptiste Lepilleur (baptiste DOT lepilleur AT gmail DOT com)\nBrandyn A. White (bwhite AT dappervision DOT com)\nBrian E. Granger (ellisonbg AT gmail DOT com)\nBrian Hoffman (hoffman_brian AT bah DOT com)\nCarlos A. Rocha (carlos DOT rocha AT gmail DOT com)\nChris Laws (clawsicus AT gmail DOT com)\nChristian Wyglendowski (christian AT bu DOT mp)\nChristoph Gohlke (cgohlke AT uci DOT edu)\nCurtis (curtis AT tinbrain DOT net)\nCyril Holweck (cyril DOT holweck AT free DOT fr)\nDan Colish (dcolish AT gmail DOT com)\nDaniel Lundin (dln AT eintr DOT org)\nDaniel Truemper (truemped AT googlemail DOT com)\nDouglas Creager (douglas DOT creager AT redjack DOT com)\nEduardo Stalinho (eduardooc DOT 86 AT gmail DOT com)\nEren Güven (erenguven0 AT gmail DOT com)\nErick Tryzelaar (erick DOT tryzelaar AT gmail DOT com)\nErik Tollerud (erik DOT tollerud AT gmail DOT com)\nFELD Boris (lothiraldan AT gmail DOT com)\nFantix King (fantix DOT king AT gmail DOT com)\nFelipe Cruz (felipecruz AT loogica DOT net)\nFernando Perez (Fernando DOT Perez AT berkeley DOT edu)\nFrank Wiles (frank AT revsys DOT com)\nFélix-Antoine Fortin (felix DOT antoine DOT fortin AT gmail DOT com)\nGavrie Philipson (gavriep AT il DOT ibm DOT com)\nGodefroid Chapelle (gotcha AT bubblenet DOT be)\nGreg Banks (gbanks AT mybasis DOT com)\nGreg Ward (greg AT gerg DOT ca)\nGuido Goldstein (github AT a-nugget DOT de)\nIan Lee (IanLee1521 AT gmail DOT com)\nIonuț Arțăriși (ionut AT artarisi DOT eu)\nIvo Danihelka (ivo AT danihelka DOT net)\nIyed (iyed DOT bennour AT gmail DOT com)\nJim Garrison (jim AT garrison DOT cc)\nJohn Gallagher (johnkgallagher AT gmail DOT com)\nJulian Taylor (jtaylor DOT debian AT googlemail DOT com)\nJustin Bronder (jsbronder AT gmail DOT com)\nJustin Riley (justin DOT t DOT riley AT gmail DOT com)\nMarc Abramowitz (marc AT marc-abramowitz DOT com)\nMatthew Aburn (mattja6 AT gmail DOT com)\nMichel Pelletier (pelletier DOT michel AT gmail DOT com)\nMichel Zou (xantares09 AT hotmail DOT com)\nMin Ragan-Kelley (benjaminrk AT gmail DOT com)\nNell Hardcastle (nell AT dev-nell DOT com)\nNicholas Pilkington (nicholas DOT pilkington AT gmail DOT com)\nNicholas Piël (nicholas AT nichol DOT as)\nNick Pellegrino (npellegrino AT mozilla DOT com)\nNicolas Delaby (nicolas DOT delaby AT ezeep DOT com)\nOndrej Certik (ondrej AT certik DOT cz)\nPaul Colomiets (paul AT colomiets DOT name)\nPawel Jasinski (pawel DOT jasinski AT gmail DOT com)\nPhus Lu (phus DOT lu AT gmail DOT com)\nRobert Buchholz (rbu AT goodpoint DOT de)\nRobert Jordens (jordens AT gmail DOT com)\nRyan Cox (ryan DOT a DOT cox AT gmail DOT com)\nRyan Kelly (ryan AT rfk DOT id DOT au)\nScott Maxwell (scott AT codecobblers DOT com)\nScott Sadler (github AT mashi DOT org)\nSimon Knight (simon DOT knight AT gmail DOT com)\nStefan Friesel (sf AT cloudcontrol DOT de)\nStefan van der Walt (stefan AT sun DOT ac DOT za)\nStephen Diehl (stephen DOT m DOT diehl AT gmail DOT com)\nSylvain Corlay (scorlay AT bloomberg DOT net)\nThomas Kluyver (takowl AT gmail DOT com)\nThomas Spura (tomspur AT fedoraproject DOT org)\nTigger Bear (Tigger AT Tiggers-Mac-mini DOT local)\nTorsten Landschoff (torsten DOT landschoff AT dynamore DOT de)\nVadim Markovtsev (v DOT markovtsev AT samsung DOT com)\nYannick Hold (yannickhold AT gmail DOT com)\nZbigniew Jędrzejewski-Szmek (zbyszek AT in DOT waw DOT pl)\nhugo shi (hugoshi AT bleb2 DOT (none))\njdgleeson (jdgleeson AT mac DOT com)\nkyledj (kyle AT bucebuce DOT com)\nspez (steve AT hipmunk DOT com)\nstu (stuart DOT axon AT jpcreative DOT co DOT uk)\nxantares (xantares AT fujitsu-l64 DOT (none))\n\nas reported by:\ngit log --all --format='- %aN (%aE)' | sort -u | sed 's/@/ AT /1' | sed -e 's/\\.\\([^ ]\\)/ DOT \\1/g'\nwith some adjustments.\n\n\n\nBrandon Craig-Rhodes (brandon AT rhodesmill DOT org)\nEugene Chernyshov (chernyshov DOT eugene AT gmail DOT com)\nCraig Austin (craig DOT austin AT gmail DOT com)\n\n\n\n\n\nTravis Cline (travis DOT cline AT gmail DOT com)\nRyan Kelly (ryan AT rfk DOT id DOT au)\nZachary Voase (z AT zacharyvoase DOT com)"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/matplotlib/backends/web_backend/nbagg_uat.html",
    "href": "script_venv/lib/python3.8/site-packages/matplotlib/backends/web_backend/nbagg_uat.html",
    "title": "UAT for NbAgg backend.",
    "section": "",
    "text": "from imp import reload\nThe first line simply reloads matplotlib, uses the nbagg backend and then reloads the backend, just to ensure we have the latest modification to the backend code. Note: The underlying JavaScript will not be updated by this process, so a refresh of the browser after clearing the output and saving is necessary to clear everything fully.\nimport matplotlib\nreload(matplotlib)\n\nmatplotlib.use('nbagg')\n\nimport matplotlib.backends.backend_nbagg\nreload(matplotlib.backends.backend_nbagg)"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-13---animation",
    "href": "script_venv/lib/python3.8/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-13---animation",
    "title": "UAT for NbAgg backend.",
    "section": "UAT 13 - Animation",
    "text": "UAT 13 - Animation\nThe following should generate an animated line:\n\nimport matplotlib.animation as animation\nimport numpy as np\n\nfig, ax = plt.subplots()\n\nx = np.arange(0, 2*np.pi, 0.01)        # x-array\nline, = ax.plot(x, np.sin(x))\n\ndef animate(i):\n    line.set_ydata(np.sin(x+i/10.0))  # update the data\n    return line,\n\n#Init only required for blitting to give a clean slate.\ndef init():\n    line.set_ydata(np.ma.array(x, mask=True))\n    return line,\n\nani = animation.FuncAnimation(fig, animate, np.arange(1, 200), init_func=init,\n                              interval=100., blit=True)\nplt.show()\n\n\nUAT 14 - Keyboard shortcuts in IPython after close of figure\nAfter closing the previous figure (with the close button above the figure) the IPython keyboard shortcuts should still function.\n\n\nUAT 15 - Figure face colours\nThe nbagg honours all colours apart from that of the figure.patch. The two plots below should produce a figure with a red background. There should be no yellow figure.\n\nimport matplotlib\nmatplotlib.rcParams.update({'figure.facecolor': 'red',\n                            'savefig.facecolor': 'yellow'})\nplt.figure()\nplt.plot([3, 2, 1])\n\nplt.show()\n\n\n\nUAT 16 - Events\nPressing any keyboard key or mouse button (or scrolling) should cycle the line while the figure has focus. The figure should have focus by default when it is created and re-gain it by clicking on the canvas. Clicking anywhere outside of the figure should release focus, but moving the mouse out of the figure should not release focus.\n\nimport itertools\nfig, ax = plt.subplots()\nx = np.linspace(0,10,10000)\ny = np.sin(x)\nln, = ax.plot(x,y)\nevt = []\ncolors = iter(itertools.cycle(['r', 'g', 'b', 'k', 'c']))\ndef on_event(event):\n    if event.name.startswith('key'):\n        fig.suptitle('%s: %s' % (event.name, event.key))\n    elif event.name == 'scroll_event':\n        fig.suptitle('%s: %s' % (event.name, event.step))\n    else:\n        fig.suptitle('%s: %s' % (event.name, event.button))\n    evt.append(event)\n    ln.set_color(next(colors))\n    fig.canvas.draw()\n    fig.canvas.draw_idle()\n\nfig.canvas.mpl_connect('button_press_event', on_event)\nfig.canvas.mpl_connect('button_release_event', on_event)\nfig.canvas.mpl_connect('scroll_event', on_event)\nfig.canvas.mpl_connect('key_press_event', on_event)\nfig.canvas.mpl_connect('key_release_event', on_event)\n\nplt.show()\n\n\n\nUAT 17 - Timers\nSingle-shot timers follow a completely different code path in the nbagg backend than regular timers (such as those used in the animation example above.) The next set of tests ensures that both “regular” and “single-shot” timers work properly.\nThe following should show a simple clock that updates twice a second:\n\nimport time\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center')\n\ndef update(text):\n    text.set(text=time.ctime())\n    text.axes.figure.canvas.draw()\n    \ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\ntimer.start()\nplt.show()\n\nHowever, the following should only update once and then stop:\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center') \ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\n\ntimer.single_shot = True\ntimer.start()\n\nplt.show()\n\nAnd the next two examples should never show any visible text at all:\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center')\ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\n\ntimer.start()\ntimer.stop()\n\nplt.show()\n\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center')\ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\n\ntimer.single_shot = True\ntimer.start()\ntimer.stop()\n\nplt.show()\n\n\n\nUAT 18 - stopping figure when removed from DOM\nWhen the div that contains from the figure is removed from the DOM the figure should shut down it’s comm, and if the python-side figure has no more active comms, it should destroy the figure. Repeatedly running the cell below should always have the same figure number\n\nfig, ax = plt.subplots()\nax.plot(range(5))\nplt.show()\n\nRunning the cell below will re-show the figure. After this, re-running the cell above should result in a new figure number.\n\nfig.canvas.manager.reshow()\n\n\n\nUAT 19 - Blitting\nClicking on the figure should plot a green horizontal line moving up the axes.\n\nimport itertools\n\ncnt = itertools.count()\nbg = None\n\ndef onclick_handle(event):\n    \"\"\"Should draw elevating green line on each mouse click\"\"\"\n    global bg\n    if bg is None:\n        bg = ax.figure.canvas.copy_from_bbox(ax.bbox) \n    ax.figure.canvas.restore_region(bg)\n\n    cur_y = (next(cnt) % 10) * 0.1\n    ln.set_ydata([cur_y, cur_y])\n    ax.draw_artist(ln)\n    ax.figure.canvas.blit(ax.bbox)\n\nfig, ax = plt.subplots()\nax.plot([0, 1], [0, 1], 'r')\nln, = ax.plot([0, 1], [0, 0], 'g', animated=True)\nplt.show()\nax.figure.canvas.draw()\n\nax.figure.canvas.mpl_connect('button_press_event', onclick_handle)"
  },
  {
    "objectID": "script_venv/lib/python3.8/site-packages/idna-3.6.dist-info/LICENSE.html",
    "href": "script_venv/lib/python3.8/site-packages/idna-3.6.dist-info/LICENSE.html",
    "title": "",
    "section": "",
    "text": "BSD 3-Clause License\nCopyright (c) 2013-2023, Kim Davies and contributors. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\n Back to top"
  },
  {
    "objectID": "llm/gpt_api.html",
    "href": "llm/gpt_api.html",
    "title": "The OpenAI API",
    "section": "",
    "text": "Note\n\n\n\nResource: OpenAI API docs\n\n\nLet’s finally get started working with GPT. In this seminar, we will use the OpenAI API to work with, but there are many alternatives out there. We have collected a few in the resources.\n\nAuthentication\nGetting started with the OpenAI Chat Completions API requires signing up for an account on the OpenAI platform. Once you’ve registered, you’ll gain access to an API key, which serves as a unique identifier for your application to authenticate requests to the API. This key is essential for ensuring secure communication between your application and OpenAI’s servers. Without proper authentication, your requests will be rejected. You can create your own account, but for the seminar we will provide the client with the credential within the University’s Jupyterlab.\n\n# setting up the client in Python\n\nimport os\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=os.environ.get(\"OPENAI_API_KEY\")\n)\n\n\n\nRequesting Completions\nMost interaction with GPT and other models consist in generating completions for prompts, i.e., providing some text with instructions and letting the language model complete the text one token after the other as seen here.\nTo request completions from the OpenAI API, we use Python to send HTTP requests to the designated API endpoint. These requests are structured to include various parameters that guide the generation of text completions. The most fundamental parameter is the prompt text, which sets the context for the completion. Additionally, you can specify the desired model configuration, such as the engine to use (e.g., “gpt-4”), as well as any constraints or preferences for the generated completions, such as the maximum number of tokens or the temperature for controlling creativity (TODO: Link parameterization)\n\n# creating a completion\nchat_completion = client.chat.completions.create(\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"How old is the earth?\",\n        }\n    ],\n    model=\"gpt-3.5-turbo\" # choose the model\n)\n\n\n\nProcessing\nOnce the OpenAI API receives your request, it proceeds to process the provided prompt using the specified model. This process involves analyzing the context provided by the prompt and leveraging the model’s pre-trained knowledge to generate text completions. The model employs advanced natural language processing techniques to ensure that the generated completions are coherent and contextually relevant. By drawing from its extensive training data and understanding of human language, the model aims to produce responses that closely align with human-like communication.\n\n\nResponse\nAfter processing your request, the OpenAI API returns a response containing the generated text completions. Depending on the specifics of your request, you may receive multiple completions, each accompanied by additional information such as the amount of token processed in the request, the reason why the model stopped the answer etc. This response provides valuable insights into the quality and relevance of the completions, allowing you to tailor your application’s behavior accordingly. Let’s check it out briefly, before you explore the response object more in-depth in your next exercise.\n\n# check out the type of the response\n\nprint(f\"Response object type: {type(chat_completion)}\") # a ChatCompletion object\n\n# print the message we want\nprint(f\"\\nResponse message: {chat_completion.choices[0].message.content}\")\n\n# check the tokens used \nprint(f\"\\nTotal tokens used: {chat_completion.usage.total_tokens}\")\n\nResponse object type: &lt;class 'openai.types.chat.chat_completion.ChatCompletion'&gt;\n\nResponse message: The Earth is approximately 4.54 billion years old.\n\nTotal tokens used: 25\n\n\n\n\nError Handling\nWhile interacting with the OpenAI API (or any API for that matter), it’s crucial to implement some robust error handling mechanisms to manage any potential issues that may arise. The kind of classic errors include providing invalid parameters, experiencing authentication failures due to an incorrect API key, or encountering rate limiting restrictions. But for language models in particular, there are plenty more problems that can arise simply involving the answer we get from the model. Some examples are requests involving explicit language or content or restricted content etc. which are typically blocked by the API. Other times it might simply happen that a model does not respond in a way you expected, for example, just repeating your input instead of responding properly, or not responding in the format you requested. Whenever we are using language model for applications, we need to be aware of this and implement the right measures to handle these situations.\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Large Language Models",
      "The OpenAI API"
    ]
  },
  {
    "objectID": "llm/gpt.html",
    "href": "llm/gpt.html",
    "title": "GPT: Generative Pre-trained Transformer",
    "section": "",
    "text": "In a seminar about natural language processing and language models, the current flagship cannot be left out: GPT. While it is worthwhile having a look at the architecture of GPT itself in order to understand why it its performance has led to the fantastic advancements in the last years, this by far exceeds the scope of this seminar. Instead, we want to learn how to work with it using the OpenAI API in the next sections. However, here is at least a small (and definitely not comprehensive) overview of what GPT is and what distinguishes it from its predecessors.\n\nA short introduction to GPT\nGPT (Generative Pre-trained Transformer) is one of the current state-of-the-art language model architectures. It belongs to the family of transformer-based models, which have revolutionized NLP in recent years. What distinguishes GPT from its predecessors (and the approaches we have discussed before) is its remarkable ability to understand and generate human-like text. One key advantage of GPT over previous approaches lies in its architecture. The transformer architecture, upon which GPT is built, introduces a novel mechanism called self-attention. This mechanism allows the model to weigh the importance of different words in a sentence dynamically, capturing long-range dependencies and contextual information more effectively than earlier models like recurrent neural networks (RNNs) or convolutional neural networks (CNNs). Another factor contributing to GPT’s superiority is its scalability. By leveraging the parallelism inherent in the transformer architecture, GPT can efficiently process and learn from vast amounts of data and hence allowing it to scale to unprecedented sizes. Larger models trained on more data tend to exhibit better performance, as being exposed to a diverse range of linguistic patterns and structures during training let’s them capture more complex patterns and nuances in language. The pre-training works in a similar fashion as we’ve already seen: GPT learns to predict the next word in a sequence given the preceding context. This process enables it to capture the nuances of language across various domains and lets it generate coherent and contextually relevant text across a wide range of topics and writing styles.\n\n\nWhat is a transformer?\nThe transformer architecture has been introduced in the landmark paper “Attention is All You Need” by Vaswani et al. in 2017 and revolutionized the way sequential data, like text, is processed and understood. At the heart of the transformer architecture lies the so-called self-attention mechanism, which is a novel way of capturing the relationships between different elements in a sequence, i.e., individual words or tokens in a sentence. Unlike traditional architectures, where information flow is constrained by fixed-length context windows or recurrent connections, transformers enable each word in a sentence to attend to all other words simultaneously through self-attention.\nThis mechanism allows transformers to dynamically weigh the importance of each word in the context of the entire sequence. This means that words that are semantically related or have a strong contextual influence on each other will receive higher attention weights, while irrelevant or less informative words will receive lower weights. By capturing these dependencies across the entire sequence, transformers excel at capturing long-range dependencies and contextual information, which is crucial for understanding and generating coherent text.\nA very important detail is that the self-attention mechanism enables transformers to process input sequences in parallel rather than sequentially, leading to significant computational advantages. Unlike RNNs, which process inputs one token at a time in a sequential manner, transformers can process all tokens in parallel, making them highly efficient and scalable, especially when dealing with long sequences or large datasets. This parallelism not only speeds up training but also allows transformers to capture complex patterns and relationships in data more effectively.\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Large Language Models",
      "GPT: Generative Pre-trained Transformer"
    ]
  },
  {
    "objectID": "llm/exercises/ex_gpt_chatbot.html",
    "href": "llm/exercises/ex_gpt_chatbot.html",
    "title": "Exercise: GPT Chatbot",
    "section": "",
    "text": "Task: Create a simple chatbot using the OpenAI chat.completions API.\nInstructions:\n\nUse the chat.completions API to send prompts to GPT, receive the answers and displaying them.\nStop the conversation when the user inputs the word exit instead of a new prompt.\nHint: Remember that GPT has no memory, so you always have to include the previous conversation in your prompts.\n\n\n\nShow solution\n\n\nimport os\nfrom llm_utils.client import get_openai_client\n\nMODEL = \"gpt4\"\n\nclient = get_openai_client(\n    model=MODEL,\n    config_path=os.environ.get(\"CONFIG_PATH\")\n)\n\n\nclass ChatGPT:\n    def __init__(self, model=MODEL):\n        self.model = model\n        self.client = client\n        self.messages = []\n\n    def chat_with_gpt(self, user_input: str):\n        self.messages.append({\n            \"role\": \"user\",\n            \"content\": user_input\n        })\n        response = self._generate_response(self.messages)\n        return response\n\n    def _generate_response(self, messages):\n        response = self.client.chat.completions.create(\n            model=self.model,\n            messages=messages,        \n            temperature=0.2, \n            max_tokens=150,\n            top_p=1.0\n        )\n        response_message = response.choices[0].message\n        self.messages.append({\n            \"role\": response_message.role,\n            \"content\": response_message.content\n        })\n\n        return response_message.content\n\n\n# Conversation loop\nchat_gpt = ChatGPT(model=\"gpt4\")\n\nwhile True:\n    user_input = input(\"User: \")\n\n    if user_input.lower() == 'exit':\n        break\n    \n    print(\"User:\", user_input)\n    \n    # Get bot response based on user input\n    bot_response = chat_gpt.chat_with_gpt(user_input)\n\n    print(\"Bot:\", bot_response)\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Large Language Models",
      "Exercise: GPT Chatbot"
    ]
  },
  {
    "objectID": "llm/exercises/ex_gpt_parameterization.html",
    "href": "llm/exercises/ex_gpt_parameterization.html",
    "title": "Exercise: GPT Parameterization",
    "section": "",
    "text": "Task: Explore the parameterization possibilities of the OpenAI API for GPT.\nInstructions:\nSome possibilities are:\n\nUse the system role in order to give instructions to the language model before the interaction with the user starts in order to change the response style of the model.\nChange the temparature or top_p parameters and explore the effect on your prompts.\nUse the\n\n\nimport os\nfrom llm_utils.client import get_openai_client\n\nMODEL = \"gpt4\"\n\nclient = get_openai_client(\n    model=MODEL,\n    config_path=os.environ.get(\"CONFIG_PATH\")\n)\n\n\n# here goes your code\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Large Language Models",
      "Exercise: GPT Parameterization"
    ]
  },
  {
    "objectID": "embeddings/embeddings.html",
    "href": "embeddings/embeddings.html",
    "title": "Embeddings",
    "section": "",
    "text": "Let us quickly re-visit the concept of embeddings we have already encountered before. We have seen them as a means of transforming text into numerical vectors that can be fed to neural network architectures for language models. But interestingly, we can do a lot more with embeddings than simply this.\nOne of the key benefits of embeddings is their ability to capture semantic similarities and relationships between words. When created with an appropriate model, embeddings do not only transform text into vectors, but they do it while compressing the contained information. More simply put, words with similar meanings or contexts tend to have embeddings that are close together in the vector space, while words with different meanings are farther apart. This enables algorithms (and us!) to perform tasks such as word similarity calculation more effectively. But let’s start with a quick recap of what embeddings are.",
    "crumbs": [
      "Seminar",
      "Embeddings",
      "Embeddings"
    ]
  },
  {
    "objectID": "embeddings/embeddings.html#what-are-embeddings",
    "href": "embeddings/embeddings.html#what-are-embeddings",
    "title": "Embeddings",
    "section": "What are embeddings?",
    "text": "What are embeddings?\nAs mentioned, embeddings play a crucial role in representing words as dense vectors in a continuous vector space. While, for example, the bag of words model has been a simple and widely-used approach for representing text, it has its limitations, including a fixed vocabulary and the inability to capture nuanced semantic relationships between words. Embeddings address these shortcomings by leveraging the power of contextual representations. Instead of representing each word in the vocabulary as a one-hot encoded vector, where each word is represented by a binary vector with a dimension equal to the vocabulary size, embeddings generate dense vector representations for words that encode rich semantic information.\nUnlike the bag of words model, embeddings are thus context-aware, meaning they capture the meaning of words based on their surrounding context in the text. This contextual understanding allows embeddings to capture subtle semantic relationships between words, such as synonymy, antonymy, and semantic similarity. Moreover, embeddings offer a more compact representation of words compared to the sparse vectors used in the bag of words model. By compressing the information into dense vectors of fixed dimensionality, embeddings reduce the dimensionality of the input space, making it more manageable for downstream tasks and allowing for more efficient computation.\nThere are plenty of different approaches to generate embeddings, and often embeddings are created as some sort of byproduct of training large. language models. As an example, we will have a quick look at Word2Vec, which is a popular technique for generating word embeddings based on distributed representations of words in a continuous vector space. The key idea behind Word2Vec is to train a neural network model to predict the surrounding words (context) of a given target word in a large corpus of text. This process can be done using either the continuous bag of words (CBOW) or skip-gram architectures. In the CBOW model, the input is the context words, and the output is the target word, while in the skip-gram model, the input is the target word, and the output is the context words. By training the model on a large corpus of text, Word2Vec then learns to encode semantic relationships between words in the form of dense vector representations, our embeddings.\nBut, of course, embeddings can also be obtained by transformer architectures such as GPT. We will use the embeddings provided by OpenAI for some demonstration.",
    "crumbs": [
      "Seminar",
      "Embeddings",
      "Embeddings"
    ]
  },
  {
    "objectID": "embeddings/embeddings.html#matching-with-embeddings",
    "href": "embeddings/embeddings.html#matching-with-embeddings",
    "title": "Embeddings",
    "section": "Matching with embeddings",
    "text": "Matching with embeddings\nLet’s do a quick example and re-visit our idea of matching a search prompt with documents. In the previous section we have used a bag of words to compare the three texts to the prompt and realized that this technique is not particularly good. Using embeddings, we can do the same and be a lot better.\n\ntexts = [\n  \"This is the first document.\",\n  \"This document is the second document.\",\n  \"And this is the third one.\"\n]\n\nprompt = \"Is this the first document?\"\n\n\n# prerequisites\n\nimport os\nfrom llm_utils.client import get_openai_client, OpenAIModels\n\nMODEL = OpenAIModels.EMBED.value # choose the embedding model\n\n# get the OpenAI client\nclient = get_openai_client(\n    model=MODEL,\n    config_path=os.environ.get(\"CONFIG_PATH\")\n)\n\n\n# get the embeddings\nresponse = client.embeddings.create(\n    input=texts,\n    model=MODEL\n)\n\ntext_embeddings = [emb.embedding for emb in response.data]\n\nresponse = client.embeddings.create(\n    input=[prompt],\n    model=MODEL\n)\n\nprompt_embedding = response.data[0].embedding\n\n\nimport numpy as np\n\ndef cosine_similarity(vec1: np.array, vec2: np.array) -&gt; float: \n    return np.dot(vec1, vec2) / ( np.linalg.norm(vec1) * np.linalg.norm(vec2) )\n\n\nfor text, text_embedding in zip(texts, text_embeddings):\n    similarity = cosine_similarity(text_embedding, prompt_embedding)\n    print(f\"{text}: {round(similarity, 2)}\")\n\nThis is the first document.: 0.95\nThis document is the second document.: 0.88\nAnd this is the third one.: 0.8\n\n\nAs we can see, there is a clear winner in terms of similarity, and that would have been exactly the document we would have needed. So embeddings provide a great tool to identify matching documents (or texts in general), and are applicable in many different use cases. An almost classic one is creating a chatbot, that can answer questions based on documents: When a user provides a prompt, we use embeddings to find the best matching documents, and then use the content to provide an answer. An example can be found here.",
    "crumbs": [
      "Seminar",
      "Embeddings",
      "Embeddings"
    ]
  },
  {
    "objectID": "embeddings/exercises/ex_emb_similarity.html",
    "href": "embeddings/exercises/ex_emb_similarity.html",
    "title": "Exercise: Embedding similarity",
    "section": "",
    "text": "Task: Use the OpenAI embeddings API to compute the similarity between two given words or phrases.\nInstructions:\n\nChoose two words or phrases with similar or related meanings.\nUse the OpenAI embeddings API to obtain embeddings for both words or phrases.\nCalculate the cosine similarity between the embeddings to measure their similarity.\nPrint the similarity score and interpret the results.\n\n\n\nShow solution\n\n\nimport numpy as np\n\ndef cosine_similarity(vec1: np.array, vec2: np.array) -&gt; float: \n    return np.dot(vec1, vec2) / ( np.linalg.norm(vec1) * np.linalg.norm(vec2) )\n\n\nimport os\n\nfrom llm_utils.client import get_openai_client, OpenAIModels\n\nMODEL = OpenAIModels.EMBED.value\n\n# get the OpenAI client\nclient = get_openai_client(\n    model=MODEL,\n    config_path=os.environ.get(\"CONFIG_PATH\")\n)\n\n# create the embeddings\nword_1 = \"king\"\nword_2 = \"queen\"\n\nresponse_1 = client.embeddings.create(input=word_1, model=MODEL)\nembedding_1 = response_1.data[0].embedding\nresponse_2 = client.embeddings.create(input=word_2, model=MODEL)\nembedding_2 = response_2.data[0].embedding\n\n\n# calculate the distance \ndist_12 = cosine_similarity(embedding_1, embedding_2)\nprint(f\"Cosine similarity between {word_1} and {word_2}: {round(dist_12, 3)}.\")\n\nCosine similarity between king and queen: 0.915.\n\n\n\nword_3 = \"pawn\"\nembedding_3 = client.embeddings.create(input=word_3, model=MODEL).data[0].embedding\n\ndist_13 = cosine_similarity(embedding_1, embedding_3)\nprint(f\"Cosine similarity between {word_1} and {word_3}: {round(dist_13, 3)}.\")\n\nCosine similarity between king and pawn: 0.829.\n\n\n\nTask: Use the OpenAI embeddings API and simple embedding arithmetics to introduce more context to word similarities.\nInstructions:\n\nCreate embeddings for the following three words: python, snake, javascript using the OpenAI API.\nCalculate the cosine similarity between each pair.\nCreate another embedding for the word reptile and add it to python. You can use numpy for this.\nCalculate the cosine similarity between python and this sum. What do you notice?\n\n\n\nShow solution\n\n\nwords = [\"python\", \"snake\", \"javascript\", \"reptile\"]\nresponse = client.embeddings.create(input=words, model=MODEL)\nembeddings = [emb.embedding for emb in response.data]\n\n\nprint(f\"Similarity between '{words[0]}' and '{words[1]}': {round(cosine_similarity(embeddings[0], embeddings[1]), 3)}.\")\nprint(f\"Similarity between '{words[0]}' and '{words[2]}': {round(cosine_similarity(embeddings[0], embeddings[2]), 3)}.\")\nprint(f\"Similarity between '{words[0]} + {words[3]}' and '{words[1]}': {round(cosine_similarity(np.array(embeddings[0]) + np.array(embeddings[3]), embeddings[1]), 3)}.\")\n\nSimilarity between 'python' and 'snake': 0.841.\nSimilarity between 'python' and 'javascript': 0.85.\nSimilarity between 'python + reptile' and 'snake': 0.894.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Embeddings",
      "Exercise: Embedding similarity"
    ]
  },
  {
    "objectID": "resources/exercises.html",
    "href": "resources/exercises.html",
    "title": "List of exercises",
    "section": "",
    "text": "Natural Language Processing\nExercise: Sentence tokenization\nExercise: TF-IDF\nExercise: Word matching\nExercise: Fuzzy matching\n\n\nLarge Language Models with OpenAI\nExercise: OpenAI - Getting started\nExercise: GPT Chatbot\nExercise: GPT Parameterization\nExercise: NER with tool calling\n\n\nEmbeddings\nExercise: Embedding similarity\n\n\n\n\n Back to top",
    "crumbs": [
      "Resources",
      "List of exercises"
    ]
  },
  {
    "objectID": "about/projects.html",
    "href": "about/projects.html",
    "title": "Projects",
    "section": "",
    "text": "In the final part of the seminar we are going to tackle our very own projects involving a language model. At best, you find your ideas and work on them, maybe you even have a work-related application mind. The following list can serve as inspiration.\n\nProject ideas\n\nQuestion-Answering Chatbot: Build a chatbot that can answer questions posed by users on a specific topic provided in form of documents. Users input their questions, the chatbot retrieves relevant information from a pre-defined set of documents, and uses the information to answer the question.\nDocument tagging / classification: Use GPT and its tools (e.g., function calls) and/or embeddings to classify documents or assign tags to them. Example: Sort bug reports or complaints into categories depending on the problem.\nClustering of text-based entities: Create a small tool that can cluster text-based entities based on embeddings, for example, groups of texts or keywords. Example: Structure a folder of text files based on their content.\nText-based RPG Game: Develop a text-based role-playing game where players interact with characters and navigate through a story generated by GPT. Players make choices that influence the direction of the narrative.\nSentiment Analysis Tool: Build an app that analyzes the sentiment of text inputs (e.g., social media posts, customer reviews) using GPT. Users can input text, and the app provides insights into the overall sentiment expressed in the text.\nText Summarization Tool: Create an application that summarizes long blocks of text into shorter, concise summaries. Users can input articles, essays, or documents, and the tool generates a summarized version.\nLanguage Translation Tool: Build a simple translation app that utilizes GPT to translate text between different languages. Users can input text in one language, and the app outputs the translated text in the desired language. Has to include some nice tweaks.\nPersonalized Recipe Generator: Develop an app that generates personalized recipes based on user preferences and dietary restrictions. Users input their preferred ingredients and dietary needs, and the app generates custom recipes using GPT.\nLyrics Generator: Create a lyrics generation tool that generates lyrics based on user input such as themes, music style, emotions, or keywords. Users can explore different poetic styles and themes generated by GPT.\n\n\n\nProject setup\nTODO: Describe the idea of Dash and the app in Jupyterlab.\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "About",
      "Projects"
    ]
  },
  {
    "objectID": "slides/llm/prompting_functions.html#write-clear-instructions",
    "href": "slides/llm/prompting_functions.html#write-clear-instructions",
    "title": "Prompting & Parameterization",
    "section": "Write clear instructions",
    "text": "Write clear instructions\nThese models can’t read your mind. If outputs are too long, ask for brief replies. If you dislike the format, demonstrate the format you’d like to see.\n\nInclude details in your query to get more relevant answers\nAsk the model to adopt a persona\nUse delimiters to clearly indicate distinct parts of the input\nSpecify the steps required to complete a task\nProvide examples\nSpecify the desired length of the output"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#provide-reference-text",
    "href": "slides/llm/prompting_functions.html#provide-reference-text",
    "title": "Prompting & Parameterization",
    "section": "Provide reference text",
    "text": "Provide reference text\nLanguage models can confidently invent fake answers, especially when asked about esoteric topics or for citations and URLs. In the same way that a sheet of notes can help a student do better on a test, providing reference text to these models can help in answering with fewer fabrications.\n\nInstruct the model to answer using a reference text\nInstruct the model to answer with citations from a reference text"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#split-tasks-into-simpler-subtasks",
    "href": "slides/llm/prompting_functions.html#split-tasks-into-simpler-subtasks",
    "title": "Prompting & Parameterization",
    "section": "Split tasks into simpler subtasks",
    "text": "Split tasks into simpler subtasks\nComplex tasks tend to have higher error rates than simpler tasks. But they can often be re-defined as a workflow of simpler tasks in which the outputs of earlier tasks are used to construct the inputs to later tasks.\n\nUse intent classification to identify the most relevant instructions for a user query\nFor dialogue applications that require very long conversations, summarize or filter previous dialogue\nSummarize long documents piecewise and construct a full summary recursively"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#give-the-model-time-to-think",
    "href": "slides/llm/prompting_functions.html#give-the-model-time-to-think",
    "title": "Prompting & Parameterization",
    "section": "Give the model time to “think”",
    "text": "Give the model time to “think”\nAsking for a “chain of thought” before an answer can help the model reason its way toward correct answers more reliably.\n\nInstruct the model to work out its own solution before rushing to a conclusion\nUse inner monologue or a sequence of queries to hide the model’s reasoning process\nAsk the model if it missed anything on previous passes"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#use-external-tools",
    "href": "slides/llm/prompting_functions.html#use-external-tools",
    "title": "Prompting & Parameterization",
    "section": "Use external tools",
    "text": "Use external tools\nCompensate for the weaknesses of the model by feeding it the outputs of other tools.\n\nUse embeddings-based search to implement efficient knowledge retrieval\nUse code execution to perform more accurate calculations or call external APIs\nGive the model access to specific functions"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#test-changes-systematically",
    "href": "slides/llm/prompting_functions.html#test-changes-systematically",
    "title": "Prompting & Parameterization",
    "section": "Test changes systematically",
    "text": "Test changes systematically\nImproving performance is easier if you can measure it. In some cases a modification to a prompt will achieve better performance on a few isolated examples but lead to worse overall performance on a more representative set of examples. Therefore to be sure that a change is net positive to performance it may be necessary to define a comprehensive test suite (also known an as an “eval”).\n\nEvaluate model outputs with reference to gold-standard answers"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#parameters-1",
    "href": "slides/llm/prompting_functions.html#parameters-1",
    "title": "Prompting & Parameterization",
    "section": "Parameters 1",
    "text": "Parameters 1\nTemperature (temperature):\n\nControls the randomness of the generated text\nLower temperatures = deterministic outputs\nHigher temperatures = more randomness\nBalance between safety and creativity\n\nMax Tokens (max_tokens):\n\nLimits the maximum length of the generated text"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#parameters-2",
    "href": "slides/llm/prompting_functions.html#parameters-2",
    "title": "Prompting & Parameterization",
    "section": "Parameters 2",
    "text": "Parameters 2\nTop P (Nucleus Sampling) (top_p):\n\nDynamically selects a subset of the most likely tokens based on their cumulative probability\nEnsures diversity in the generated text while still prioritizing tokens with higher probabilities\nFor generating diverse and contextually relevant responses\n\nStop Sequence (stop):\n\nSpecifies a sequence of tokens that, if generated by the model, signals it to stop"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#parameters-3",
    "href": "slides/llm/prompting_functions.html#parameters-3",
    "title": "Prompting & Parameterization",
    "section": "Parameters 3",
    "text": "Parameters 3\nFrequency Penalty (frequency_penalty):\n\nPenalizes tokens based on their frequency in the generated text\nDiscourage the model from repeatedly generating common or redundant tokens\nPromote diversity in the generated text\n\nPresence Penalty (presence_penalty):\n\nPenalizes tokens that are already in the input prompt\nDiscourages the model from simply echoing the input text"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#openai-chat-roles",
    "href": "slides/llm/prompting_functions.html#openai-chat-roles",
    "title": "Prompting & Parameterization",
    "section": "OpenAI chat roles",
    "text": "OpenAI chat roles\n\nDefine different roles in the chat\nRoles: system, assistant, user, tools\n\nUser Role\n\nCorresponds to the actual user prompting the model.\nInputs queries or prompts to the model.\n\nAssistant Role\n\nModel responds to user queries or prompts.\nProvides answers and assistance to the user."
  },
  {
    "objectID": "slides/llm/prompting_functions.html#openai-chat-roles-1",
    "href": "slides/llm/prompting_functions.html#openai-chat-roles-1",
    "title": "Prompting & Parameterization",
    "section": "OpenAI chat roles",
    "text": "OpenAI chat roles\nSystem Role\n\nProvides additional instructions to the model.\nNot a user input.\nExample: Setting response style.\n\nTools Role\n\nUsed for debugging or monitoring purposes.\nProvides insights into model behavior or performance."
  },
  {
    "objectID": "slides/llm/prompting_functions.html#code",
    "href": "slides/llm/prompting_functions.html#code",
    "title": "Prompting & Parameterization",
    "section": "Code",
    "text": "Code\n\nimport os\nfrom llm_utils.client import get_openai_client\n\nMODEL = \"gpt4\"\n\nclient = get_openai_client(\n    model=MODEL,\n    config_path=os.environ.get(\"CONFIG_PATH\")\n)\n\ncompletion = client.chat.completions.create(\n  model=\"MODEL\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are an annoyed technician working in a help center for dish washers, who answers in short, unfriendly bursts.\"},\n    {\"role\": \"user\", \"content\": \"My dish washer does not clean the dishes, what could be the reason.\"}\n  ]\n)\n\nprint(completion.choices[0].message.content)\n\n\n\nDishwasher filter could be clogged, water spray arms may not function, rinse aid dispenser might be empty, or your detergent sucks. Check 'em."
  },
  {
    "objectID": "slides/llm/prompting_functions.html#get-more-consistent-output-of-language-models",
    "href": "slides/llm/prompting_functions.html#get-more-consistent-output-of-language-models",
    "title": "Prompting & Parameterization",
    "section": "Get more consistent output of language models",
    "text": "Get more consistent output of language models\n\nSo far: language model “freely” answering\nNot always a practical format if we want to use a language model for very specific purposes\nBusiness applications often require consistent output"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#example-sentiment-analysis",
    "href": "slides/llm/prompting_functions.html#example-sentiment-analysis",
    "title": "Prompting & Parameterization",
    "section": "Example: Sentiment analysis",
    "text": "Example: Sentiment analysis\n\nsentiment_categories = [\"positive\", \"negative\", \"neutral\", \"mixed\"]\n\n \n\nmessages = []\nmessages.append(\n    {\"role\": \"system\", \"content\": f\"Classify the given text into one of the following sentiment categories: {sentiment_categories}.\"}\n)\nmessages.append(\n    {\"role\": \"user\", \"content\": \"I really did not like the movie.\"}\n)\n\nresponse = client.chat.completions.create(\n    messages=messages,\n    model=MODEL\n)\n\nprint(f\"Response: '{response.choices[0].message.content}'\")\n\n\n\nResponse: 'Category: Negative'"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#function-calling-1",
    "href": "slides/llm/prompting_functions.html#function-calling-1",
    "title": "Prompting & Parameterization",
    "section": "Function calling",
    "text": "Function calling\n\nOpenAI allows for “function calling” or “tool calling”\nThis allows us to specify the output format of GPT\nFunction calling (cookbook)\nFunction calling"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#example-continued",
    "href": "slides/llm/prompting_functions.html#example-continued",
    "title": "Prompting & Parameterization",
    "section": "Example: continued",
    "text": "Example: continued\n\n# this looks intimidating but isn't that complicated\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"analyze_sentiment\",\n            \"description\": \"Analyze the sentiment in a given text.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"sentiment\": {\n                        \"type\": \"string\",\n                        \"enum\": sentiment_categories,\n                        \"description\": f\"The sentiment of the text.\"\n                    }\n                },\n                \"required\": [\"sentiment\"],\n            }\n        }\n    }\n]"
  },
  {
    "objectID": "slides/llm/prompting_functions.html#including-multiple-parameters",
    "href": "slides/llm/prompting_functions.html#including-multiple-parameters",
    "title": "Prompting & Parameterization",
    "section": "Including multiple parameters",
    "text": "Including multiple parameters\n\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"analyze_sentiment\",\n            \"description\": \"Analyze the sentiment in a given text.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"sentiment\": {\n                        \"type\": \"string\",\n                        \"enum\": sentiment_categories,\n                        \"description\": f\"The sentiment of the text.\"\n                    },\n                    \"reason\": {\n                        \"type\": \"string\",\n                        \"description\": \"The reason for the sentiment in few words. If there is no information, do not make assumptions and leave blank.\"\n                    }\n                },\n                \"required\": [\"sentiment\", \"reason\"],\n            }\n        }\n    }\n]"
  },
  {
    "objectID": "slides/llm/openai_api.html#lets-get-started",
    "href": "slides/llm/openai_api.html#lets-get-started",
    "title": "The OpenAI API",
    "section": "Let’s get started",
    "text": "Let’s get started\nThe great thing about APIs is that we can start right away without too much preparation!\nIn this sprint, we will use the OpenAI API for completions and embeddings.\nResource: OpenAI API docs"
  },
  {
    "objectID": "slides/llm/openai_api.html#authentication",
    "href": "slides/llm/openai_api.html#authentication",
    "title": "The OpenAI API",
    "section": "Authentication",
    "text": "Authentication\nTypically, it’s as simple as this:\n\n# setting up the client in Python\nimport os\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=os.environ.get(\"OPENAI_API_KEY\")\n)"
  },
  {
    "objectID": "slides/llm/openai_api.html#authentication-for-the-seminar",
    "href": "slides/llm/openai_api.html#authentication-for-the-seminar",
    "title": "The OpenAI API",
    "section": "Authentication for the seminar",
    "text": "Authentication for the seminar\nFor the sprint, we have hosted some models in Azure.\n\nimport os\nfrom llm_utils.client import get_openai_client, OpenAIModels\n\nprint(f\"GPT3: {OpenAIModels.GPT_3.value}\")\nprint(f\"GPT4: {OpenAIModels.GPT_4.value}\")\nprint(f\"Embedding model: {OpenAIModels.EMBED.value}\")\n\nMODEL = OpenAIModels.GPT_4.value\n\nclient = get_openai_client(\n    model=MODEL,\n    config_path=os.environ.get(\"CONFIG_PATH\")\n)\n\nGPT3: gpt3\nGPT4: gpt4\nEmbedding model: embed"
  },
  {
    "objectID": "slides/llm/openai_api.html#creating-a-completion",
    "href": "slides/llm/openai_api.html#creating-a-completion",
    "title": "The OpenAI API",
    "section": "Creating a completion",
    "text": "Creating a completion\n\nchat_completion = client.chat.completions.create(\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"How old is the earth?\",\n        }\n    ],\n    model=MODEL \n)\n\n# check out the type of the response\n\nprint(f\"Response: {type(chat_completion)}\") # a ChatCompletion object\n\nResponse: &lt;class 'openai.types.chat.chat_completion.ChatCompletion'&gt;"
  },
  {
    "objectID": "slides/llm/openai_api.html#retrieving-the-response",
    "href": "slides/llm/openai_api.html#retrieving-the-response",
    "title": "The OpenAI API",
    "section": "Retrieving the response",
    "text": "Retrieving the response\n\n# print the message we want\nprint(f\"\\nResponse message: {chat_completion.choices[0].message.content}\")\n\n# check the tokens used \nprint(f\"\\nTotal tokens used: {chat_completion.usage.total_tokens}\")\n\n\nResponse message: The Earth is approximately 4.54 billion years old.\n\nTotal tokens used: 25\n\n\n\n\n\n\nSprint: LLM, 2024"
  },
  {
    "objectID": "slides/about/intro.html#about-the-seminar",
    "href": "slides/about/intro.html#about-the-seminar",
    "title": "Sprint: Large Language Models",
    "section": "About the seminar",
    "text": "About the seminar\n\nRoughly divided into 3 parts: theory, training, and application\nTheory:\n\nLearn about important topics in natural language processing\nTopics include tokenization, matching, statistical text analysis, and embeddings\nCoding examples in Python alongside theoretical concepts"
  },
  {
    "objectID": "slides/about/intro.html#goal",
    "href": "slides/about/intro.html#goal",
    "title": "Sprint: Large Language Models",
    "section": "Goal",
    "text": "Goal\n\n4-day introduction to language models\nAim: Simple overview to start working with language model APIs\nUnderstand basics, know how to apply in own applications\nHave fun!"
  },
  {
    "objectID": "slides/about/intro.html#content-1",
    "href": "slides/about/intro.html#content-1",
    "title": "Sprint: Large Language Models",
    "section": "Content 1",
    "text": "Content 1\n\nQuick overview of classic NLP\n\nText processing (Tokenization, Lemmatization, etc.)\nApplications (Classification, Sentiment Analysis, Matching, etc.)\nChallenges\n\nIntroduction to LLM\n\nText processing with neural networks\nSequence generation & language modeling"
  },
  {
    "objectID": "slides/about/intro.html#content-2",
    "href": "slides/about/intro.html#content-2",
    "title": "Sprint: Large Language Models",
    "section": "Content 2",
    "text": "Content 2\n\nIntroduction to the OpenAI API\n\nPrompting\nParameterization\nFunction calling\n\nIntroduction to embeddings\n\nSimilarity\nVisualization & Clustering\n\n(Ethics & Privacy)"
  },
  {
    "objectID": "slides/about/intro.html#day-1-24.04.2024",
    "href": "slides/about/intro.html#day-1-24.04.2024",
    "title": "Sprint: Large Language Models",
    "section": "Day 1 (24.04.2024):",
    "text": "Day 1 (24.04.2024):\n\nGetting to know each other + intro survey (experiences & expectations) (1h)\nLearning goals & final evaluation criteria (0.5h)\nIntroduction & overview of the topic (0.5h)\nIntroduction to natural language processing & setup of the development environment (4h)\nIntroduction to LLM & getting to know the OpenAI API: Part 1 (2h)"
  },
  {
    "objectID": "slides/about/intro.html#day-2-25.04.2024",
    "href": "slides/about/intro.html#day-2-25.04.2024",
    "title": "Sprint: Large Language Models",
    "section": "Day 2 (25.04.2024):",
    "text": "Day 2 (25.04.2024):\n\nIntroduction to LLM & getting to know the OpenAI API: Part 2 (3h)\nPrompting (1h)\nEmbeddings (2h)\nGroup brainstorming session: Designing a simple app concept involving GPT (2h)\n\n→ At home until next week: refine project ideas (1h)"
  },
  {
    "objectID": "slides/about/intro.html#day-3-30.04.2024",
    "href": "slides/about/intro.html#day-3-30.04.2024",
    "title": "Sprint: Large Language Models",
    "section": "Day 3 (30.04.2024):",
    "text": "Day 3 (30.04.2024):\n\nAdvanced GPT-related topics (1h)\nBusiness-related topics (1h)\nTeam building for hackathon → develop app concepts (1h)\nWork on prototypes (5h)"
  },
  {
    "objectID": "slides/about/intro.html#day-4-02.05.2024",
    "href": "slides/about/intro.html#day-4-02.05.2024",
    "title": "Sprint: Large Language Models",
    "section": "Day 4 (02.05.2024):",
    "text": "Day 4 (02.05.2024):\n\nFinal touches for the prototypes (3h)\nPresentation of app prototypes, peer feedback & evaluation (2h)\nReflections on the seminar (1h)\nEthics & data privacy considerations (backup)"
  },
  {
    "objectID": "slides/about/intro.html#after-the-seminar-1d",
    "href": "slides/about/intro.html#after-the-seminar-1d",
    "title": "Sprint: Large Language Models",
    "section": "After the seminar (~1d):",
    "text": "After the seminar (~1d):\n\nPrototype refinement\nCode review & documentation\nRefine business case & potential applications of prototype\nReflections & lessons learned → Hand in 2-page summary"
  },
  {
    "objectID": "slides/about/intro.html#evaluation",
    "href": "slides/about/intro.html#evaluation",
    "title": "Sprint: Large Language Models",
    "section": "Evaluation",
    "text": "Evaluation\n\nYour presentation on the last day of the seminar: 25%\nYour prototype: 35%\nYour summary: 25%\nYour activity during the seminar: 15%"
  },
  {
    "objectID": "slides/about/intro.html#what-is-the-summary",
    "href": "slides/about/intro.html#what-is-the-summary",
    "title": "Sprint: Large Language Models",
    "section": "What is the summary?",
    "text": "What is the summary?\n\n2-3 pages only!\nWhat is your prototype? What can I do?\nWhat could be a business case for your prototype, or where can it be applied?\nWhat are current limitations of your prototype and how could you overcome them?\nWhat have been your main learnings during the creation of your prototype (and/or) the seminar itself?"
  },
  {
    "objectID": "slides/about/intro.html#jupyterlab-exercises",
    "href": "slides/about/intro.html#jupyterlab-exercises",
    "title": "Sprint: Large Language Models",
    "section": "Jupyterlab & Exercises",
    "text": "Jupyterlab & Exercises\n \nJupyterlab\nTo get started right away, we have prepared a Jupyterlab!\n \nExercises\nAll exercises can be solved in the Jupyterlab, all packages and datasets are pre-installed!\n\n\n\n\nSprint: LLM, 2024"
  },
  {
    "objectID": "slides/nlp/short_history.html#early-days-rule-based-approaches-1960s-1980s",
    "href": "slides/nlp/short_history.html#early-days-rule-based-approaches-1960s-1980s",
    "title": "A Short History of Natural Language Processing",
    "section": "Early Days: Rule-Based Approaches (1960s-1980s)",
    "text": "Early Days: Rule-Based Approaches (1960s-1980s)\n\nRely heavily on rule-based approaches\nSignificant efforts in tasks like part-of-speech tagging, named entity recognition, and machine translation\nStruggled with ambiguity and complexity of natural language"
  },
  {
    "objectID": "slides/nlp/short_history.html#rise-of-statistical-methods-1990s-2000s",
    "href": "slides/nlp/short_history.html#rise-of-statistical-methods-1990s-2000s",
    "title": "A Short History of Natural Language Processing",
    "section": "Rise of Statistical Methods (1990s-2000s)",
    "text": "Rise of Statistical Methods (1990s-2000s)\n\nEmergence of statistical methods\nTechniques like Hidden Markov Models and Conditional Random Fields gained prominence\nImproved performance in tasks such as text classification, sentiment analysis, and information extraction"
  },
  {
    "objectID": "slides/nlp/short_history.html#machine-learning-revolution-2010s",
    "href": "slides/nlp/short_history.html#machine-learning-revolution-2010s",
    "title": "A Short History of Natural Language Processing",
    "section": "Machine Learning Revolution (2010s)",
    "text": "Machine Learning Revolution (2010s)\n\nRise of machine learning, particularly deep learning\nExploration of neural network architectures tailored for NLP tasks\nRecurrent Neural Networks (RNNs) and Convolutional Neural Networks (CNNs) gained traction"
  },
  {
    "objectID": "slides/nlp/short_history.html#large-language-models-transformers-2010s-present",
    "href": "slides/nlp/short_history.html#large-language-models-transformers-2010s-present",
    "title": "A Short History of Natural Language Processing",
    "section": "Large Language Models: Transformers (2010s-Present)",
    "text": "Large Language Models: Transformers (2010s-Present)\n\nRise of large language models, epitomized by the Transformer architecture\nPowered by self-attention mechanisms\nAchieved unprecedented performance across a wide range of NLP tasks"
  },
  {
    "objectID": "slides/nlp/short_history.html#part-of-speech-tagging-pos",
    "href": "slides/nlp/short_history.html#part-of-speech-tagging-pos",
    "title": "A Short History of Natural Language Processing",
    "section": "Part-of-Speech Tagging (POS)",
    "text": "Part-of-Speech Tagging (POS)\n\nLabeling each word with its grammatical category\nCrucial for language understanding, information retrieval, and machine translation\n\n\nThe sun sets behind the mountains, casting a golden glow across the sky."
  },
  {
    "objectID": "slides/nlp/short_history.html#named-entity-recognition-ner",
    "href": "slides/nlp/short_history.html#named-entity-recognition-ner",
    "title": "A Short History of Natural Language Processing",
    "section": "Named-Entity Recognition (NER)",
    "text": "Named-Entity Recognition (NER)\n\nIdentifying and classifying named entities in text\nEssential for information retrieval, document summarization, and question-answering systems\n\n\nApple is considering buying a U.K. based startup called LanguageHero located in London for $1 billion."
  },
  {
    "objectID": "slides/nlp/short_history.html#sentiment-analysis",
    "href": "slides/nlp/short_history.html#sentiment-analysis",
    "title": "A Short History of Natural Language Processing",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\n\nAnalyzing text to determine sentiment (e.g., positive, negative, neutral)\nUsed for gauging customer satisfaction, monitoring social media sentiment, etc.\n\n\nI love TextBlob! It’s an amazing library for natural language processing."
  },
  {
    "objectID": "slides/nlp/short_history.html#text-classification",
    "href": "slides/nlp/short_history.html#text-classification",
    "title": "A Short History of Natural Language Processing",
    "section": "Text Classification",
    "text": "Text Classification\n\nCategorizing text documents into predefined classes\nWidely used in email spam detection, sentiment analysis, and content categorization"
  },
  {
    "objectID": "slides/nlp/short_history.html#information-extraction",
    "href": "slides/nlp/short_history.html#information-extraction",
    "title": "A Short History of Natural Language Processing",
    "section": "Information Extraction",
    "text": "Information Extraction\n\nExtracting structured information from unstructured text data\nCrucial for knowledge base construction, data integration, and business intelligence"
  },
  {
    "objectID": "slides/nlp/short_history.html#question-answering",
    "href": "slides/nlp/short_history.html#question-answering",
    "title": "A Short History of Natural Language Processing",
    "section": "Question-Answering",
    "text": "Question-Answering\n\nGenerating accurate answers to user queries in natural language\nEssential for information retrieval, virtual assistants, and educational applications"
  },
  {
    "objectID": "slides/nlp/short_history.html#machine-translation",
    "href": "slides/nlp/short_history.html#machine-translation",
    "title": "A Short History of Natural Language Processing",
    "section": "Machine Translation",
    "text": "Machine Translation\n\nAutomatically translating text from one language to another\nFacilitates communication across language barriers"
  },
  {
    "objectID": "slides/nlp/statistics.html#term-frequency-token-counting",
    "href": "slides/nlp/statistics.html#term-frequency-token-counting",
    "title": "Simple statistical text analysis",
    "section": "Term frequency: Token counting",
    "text": "Term frequency: Token counting\n\nfrom nltk.tokenize import wordpunct_tokenize\nfrom string import punctuation\nfrom collections import Counter\nfrom typing import List\n\nfrom nltk.corpus import stopwords\n# python -m nltk.downloader stopwords -&gt; run this in your console once to get the stopwords\n\n\n# load a text from file\ntext = \"\"\nwith open(\"../../assets/chapter1.txt\", \"r\") as file:  \n    for line in file:\n        text += line.strip()\n\n\ndef preprocess_text(text: str) -&gt; List[str]:\n    # tokenize text\n    tokens = wordpunct_tokenize(text.lower())\n\n    # remove punctuation\n    tokens = [t for t in tokens if t not in punctuation]\n\n    # remove stopwords\n    stop_words = stopwords.words(\"english\")\n    tokens = [t for t in tokens if t not in stop_words]\n\n    return tokens\n\n# count the most frequent words\ntokens = preprocess_text(text=text)\n\nfor t in Counter(tokens).most_common(15):\n    print(f\"{t[0]}: {t[1]}\")"
  },
  {
    "objectID": "slides/nlp/statistics.html#term-frequency-token-counting-output",
    "href": "slides/nlp/statistics.html#term-frequency-token-counting-output",
    "title": "Simple statistical text analysis",
    "section": "Term frequency: Token counting",
    "text": "Term frequency: Token counting\n\none: 35\nwinston: 32\nface: 28\neven: 24\n--: 24\nbig: 22\ncould: 19\nparty: 18\nwould: 18\nmoment: 18\nlike: 17\nbrother: 15\ngoldstein: 15\ntelescreen: 14\nseemed: 14"
  },
  {
    "objectID": "slides/nlp/statistics.html#bag-of-words-creating-a-vocabulary",
    "href": "slides/nlp/statistics.html#bag-of-words-creating-a-vocabulary",
    "title": "Simple statistical text analysis",
    "section": "Bag of Words: Creating a vocabulary",
    "text": "Bag of Words: Creating a vocabulary\n\nfrom collections import Counter\n\n\ndef create_bag_of_words(texts):\n    # Count the frequency of each word in the corpus\n    word_counts = Counter()\n    \n    for text in texts:\n        # Preprocess the text\n        words = preprocess_text(text)\n        \n        # Update word counts\n        word_counts.update(words)\n    \n    # Create vocabulary by sorting the words based on their frequency\n    vocabulary = [word for word, _ in sorted(word_counts.items())]\n    \n    # Create BoW vectors for each document\n    bow_vectors = []\n    for text in texts:\n        # Preprocess the text\n        words = preprocess_text(text)\n        \n        # Create a Counter object to count word frequencies\n        bow_vector = Counter(words)\n        \n        # Fill in missing words with zero counts\n        for word in vocabulary:\n            if word not in bow_vector:\n                bow_vector[word] = 0\n\n        # Sort the BoW vector based on the vocabulary order\n        sorted_bow_vector = [bow_vector[word] for word in vocabulary]\n        \n        # Append the BoW vector to the list\n        bow_vectors.append(sorted_bow_vector)\n    \n    return vocabulary, bow_vectors\n\n# Example texts\ntexts = [\n    \"This is the first document.\",\n    \"This document is the second document.\",\n    \"And this is the third one.\",\n    \"Is this the first document?\",\n]\n\n# Create Bag of Words\nvocabulary, bow_vectors = create_bag_of_words(texts)\n\n# Print vocabulary\nprint(\"Vocabulary:\")\nprint(vocabulary)\n\n# Print BoW vectors\nprint(\"\\nBag of Words Vectors:\")\nfor i, bow_vector in enumerate(bow_vectors):\n    print(f\"Document {i + 1}: {bow_vector}\")"
  },
  {
    "objectID": "slides/nlp/statistics.html#bag-of-words-creating-a-vocabulary-output",
    "href": "slides/nlp/statistics.html#bag-of-words-creating-a-vocabulary-output",
    "title": "Simple statistical text analysis",
    "section": "Bag of Words: Creating a vocabulary",
    "text": "Bag of Words: Creating a vocabulary\n\nVocabulary:\n['document', 'first', 'one', 'second', 'third']\n\nBag of Words Vectors:\nDocument 1: [1, 1, 0, 0, 0]\nDocument 2: [2, 0, 0, 1, 0]\nDocument 3: [0, 0, 1, 0, 1]\nDocument 4: [1, 1, 0, 0, 0]"
  },
  {
    "objectID": "slides/nlp/statistics.html#statistical-similarity-of-texts",
    "href": "slides/nlp/statistics.html#statistical-similarity-of-texts",
    "title": "Simple statistical text analysis",
    "section": "Statistical similarity of texts",
    "text": "Statistical similarity of texts\n\nimport numpy as np\n\ndef cosine_similarity(vec1: np.array, vec2: np.array) -&gt; float: \n    return np.dot(vec1, vec2) / ( np.linalg.norm(vec1) * np.linalg.norm(vec2) )\n\nquery = bow_vectors[3]\n\nsimilarities = []\nfor i, bv in enumerate(bow_vectors):\n    similarity = cosine_similarity(\n            vec1=query, \n            vec2=bv\n        )\n    similarities.append(\n        (texts[i], round(similarity, 2))\n    )\n\nsimilarities\n\n\n\n[('This is the first document.', 1.0),\n ('This document is the second document.', 0.63),\n ('And this is the third one.', 0.0),\n ('Is this the first document?', 1.0)]"
  },
  {
    "objectID": "slides/nlp/statistics.html#vocabulary",
    "href": "slides/nlp/statistics.html#vocabulary",
    "title": "Simple statistical text analysis",
    "section": "Vocabulary",
    "text": "Vocabulary\n\nGrows with corpus size\nLeads to computational inefficiencies and increased memory requirements\nFixed vocabulary after training, handling out-of-vocabulary words difficult"
  },
  {
    "objectID": "slides/nlp/statistics.html#context-structure",
    "href": "slides/nlp/statistics.html#context-structure",
    "title": "Simple statistical text analysis",
    "section": "Context & structure",
    "text": "Context & structure\n\nTreats each word independently\nFails to capture sequential and syntactical relationships\nLimits understanding of sarcasm, irony, and metaphors\nLack of structural awareness (sentences with similar word distributions but differing meanings or intents)"
  },
  {
    "objectID": "slides/nlp/statistics.html#general-idea",
    "href": "slides/nlp/statistics.html#general-idea",
    "title": "Simple statistical text analysis",
    "section": "General idea",
    "text": "General idea\n\nClustering a common technique in text analysis\nGroups similar documents based on word distributions\nEach document represented as high-dimensional vector (e.g., BoW)\nDimensions correspond to unique words\nValues reflect frequency of words in document"
  },
  {
    "objectID": "slides/nlp/statistics.html#approach",
    "href": "slides/nlp/statistics.html#approach",
    "title": "Simple statistical text analysis",
    "section": "Approach",
    "text": "Approach\n\nClustering algorithms applied to partition documents\nSimilarity measured using distance metrics (cosine similarity, Euclidean distance)\nAdvantages:\n\nSimplicity and scalability\nManageable computational complexity\n\nLimitations:\n\nReliance on word frequency alone\nCurse of dimensionality with large vocabularies"
  },
  {
    "objectID": "slides/nlp/statistics.html#code-example",
    "href": "slides/nlp/statistics.html#code-example",
    "title": "Simple statistical text analysis",
    "section": "Code example",
    "text": "Code example\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.cluster import KMeans\nimport numpy as np\n\n# Example texts representing different topics\ntexts = [\n    \"apple orange banana\",\n    \"apple orange mango\",\n    \"banana apple kiwi\",\n    \"strawberry raspberry blueberry\",\n    \"strawberry raspberry blackberry\"\n]\n\n# create Bag of Words using CountVectorizer\nvectorizer = CountVectorizer()\nbow_matrix = vectorizer.fit_transform(texts)\n\nprint(\"Bag of Word vectors:\")\nprint(bow_matrix.toarray())\n\n# perform K-means clustering\nnum_clusters = 2\nkmeans = KMeans(n_clusters=num_clusters, n_init=\"auto\")\ncluster_labels = kmeans.fit_predict(bow_matrix)\n\nprint(\"\\nCluster labels:\")\nfor i, label in enumerate(cluster_labels):\n    print(f\"Document {i + 1} belongs to Cluster {label + 1}\")"
  },
  {
    "objectID": "slides/nlp/statistics.html#code-example-output",
    "href": "slides/nlp/statistics.html#code-example-output",
    "title": "Simple statistical text analysis",
    "section": "Code example",
    "text": "Code example\n\nBag of Word vectors:\n[[1 1 0 0 0 0 1 0 0]\n [1 0 0 0 0 1 1 0 0]\n [1 1 0 0 1 0 0 0 0]\n [0 0 0 1 0 0 0 1 1]\n [0 0 1 0 0 0 0 1 1]]\n\nCluster labels:\nDocument 1 belongs to Cluster 2\nDocument 2 belongs to Cluster 2\nDocument 3 belongs to Cluster 2\nDocument 4 belongs to Cluster 1\nDocument 5 belongs to Cluster 1"
  },
  {
    "objectID": "ethics/bias.html",
    "href": "ethics/bias.html",
    "title": "Bias",
    "section": "",
    "text": "It is crucial to also explore the concept of bias lurking within language models. While these models have revolutionized various fields and are arguably one of the most impactful new tools of the last few years, they aren’t immune to inheriting and perpetuating biases present in the data they are trained on. So what is Bias in Language Models?\nBias in language models refers to the skewed or unfair representation of certain groups, perspectives, or ideologies within the generated text. These biases can stem from societal stereotypes, historical prejudices, or systemic inequalities embedded in the training data. In particular for models trained on enormous corpora stemming from the internet, it is a nearly impossible task to examine all of the training data for dangerous our otherwise harmful content. And even simply the choice of the training data can create an inherent bias in the models. As an example, consider training a model only on German data, which will inevitably introduce German opinions etc. into the model. When left unchecked, biased language models can reinforce existing prejudices, amplify underrepresented narratives, and marginalize certain communities.\n\nTypes of Bias in Language Models\nThere are plenty of different types of bias that can occur in language models, here are just a few.\n\nGender bias: Language models may exhibit gender bias by associating specific roles, traits, or occupations with a particular gender. For example, phrases like “brilliant scientist” might more frequently generate male pronouns, while “caring nurse” might generate female pronouns, perpetuating stereotypes about gender roles.\nEthnic and racial bias: Language models may reflect ethnic or racial biases present in the training data, leading to stereotypical or discriminatory language towards certain racial or ethnic groups. For instance, associating negative traits with specific racial groups or making assumptions based on names or cultural references.\nSocioeconomic bias: Language models might exhibit biases related to socioeconomic status, such as portraying certain occupations or lifestyles as superior or inferior. This can contribute to the reinforcement of class stereotypes and disparities.\nCultural bias: Language models may demonstrate cultural biases by favoring certain cultural norms, values, or references over others, potentially marginalizing or erasing the perspectives of minority cultures or communities.\nConfirmation bias: Language models can inadvertently reinforce existing beliefs or viewpoints by prioritizing information that aligns with preconceived notions and ignoring contradictory evidence, leading to the perpetuation of misinformation or echo chambers.\n\n\n\nImplications of bias in language models\nThe presence of bias in language models has plenty of implications, in particular when societies start using language models frequently.\n\nReinforcement of stereotypes: Biased language models can perpetuate harmful stereotypes, further entrenching societal prejudices and hindering efforts towards inclusivity and diversity.\nDiscriminatory outcomes: Biased language models may lead to discriminatory outcomes in various applications, including hiring processes, automated decision-making systems, and content moderation algorithms, potentially amplifying existing inequalities.\nUnderrepresentation and marginalization: Language models may marginalize or underrepresent certain groups or perspectives, leading to the erasure of minority voices and experiences from the discourse.\nImpact on society: Biased language models can have far-reaching consequences on society, shaping public opinion, reinforcing power dynamics, and influencing policy decisions, ultimately exacerbating social divisions and injustices.\n\n\n\nAddressing bias in language models\nSo, what can we (or the creators of language models) do?\n\nDiverse and representative data: Ensuring that language models are trained on diverse and representative datasets spanning various demographics, cultures, and perspectives can help mitigate biases by providing a more balanced and inclusive training corpus.\nBias detection and mitigation techniques: Implementing bias detection and mitigation techniques, such as debiasing algorithms, adversarial training, and fairness-aware learning frameworks, can help identify and address biases in language models during the development phase.\nEthical considerations and transparency: Incorporating ethical considerations and promoting transparency in the development and deployment of language models can foster accountability and empower users to critically assess the potential biases and limitations of these models.\nContinuous monitoring and evaluation: Regularly monitoring and evaluating language models for biases in real-world applications can help identify and rectify unintended consequences, ensuring that these models align with ethical standards and promote fairness and inclusivity.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Ethical Considerations",
      "Bias"
    ]
  },
  {
    "objectID": "nlp/tokenization.html",
    "href": "nlp/tokenization.html",
    "title": "Tokenization",
    "section": "",
    "text": "A key element for a computer to understand the words we speak or type is the concept of word tokenization. For a human, the sentence\n\nsentence = \"I love reading science fiction books or books about science.\"\n\nis easy to understand since we are able to split the sentence into its individual parts in order to figure out the meaning of the full sentence. For a computer, the sentence is just a simple string of characters, like any other word or longer text. In order to make a computer understand the meaning of a sentence, we need to help break it down into its relevant parts.\nSimply put, word tokenization is the process of breaking down a piece of text into individual words or so-called tokens. It is like taking a sentence and splitting it into smaller pieces, where each piece represents a word. Word tokenization involves analyzing the text character by character and identifying boundaries between words. It uses various rules and techniques to decide where one word ends and the next one begins. For example, spaces, punctuation marks, and special characters often serve as natural boundaries between words.\nSo let’s start breaking down the sentence into its individual parts.\n\ntokenized_sentence = sentence.split(\" \")\nprint(tokenized_sentence)\n\n['I', 'love', 'reading', 'science', 'fiction', 'books', 'or', 'books', 'about', 'science.']\n\n\nOnce we have tokenized the sentence, we can start analyzing it with some simple statistical methods. For example, in order to figure out what the sentence might be about, we could count the most frequent words.\n\nfrom collections import Counter\n\ntoken_counter = Counter(tokenized_sentence)\nprint(token_counter.most_common(2))\n\n[('books', 2), ('I', 1)]\n\n\nUnfortunately, we already realize that we have not done the best job with our “tokenizer”: The second occurrence of the word science is missing do to the punctuation. While this is great as it holds information about the ending of a sentence, it disturbs our analysis here, so let’s get rid of it.\n\ntokenized_sentence = sentence.replace(\".\", \" \").split(\" \")\n\ntoken_counter = Counter(tokenized_sentence)\nprint(token_counter.most_common(2))\n\n[('science', 2), ('books', 2)]\n\n\nSo that worked. As you can imagine, tokenization can get increasingly difficult when we have to deal with all sorts of situations in larger corpora of texts (see also the exercise). So it is great that there are already all sorts of libraries available that can help us with this process.\n\nfrom nltk.tokenize import wordpunct_tokenize\nfrom string import punctuation\n\ntokenized_sentence = wordpunct_tokenize(sentence)\ntokenized_sentence = [t for t in tokenized_sentence if t not in punctuation]\nprint(tokenized_sentence)\n\n['I', 'love', 'reading', 'science', 'fiction', 'books', 'or', 'books', 'about', 'science']",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Tokenization"
    ]
  },
  {
    "objectID": "nlp/tokenization.html#simple-word-tokenization",
    "href": "nlp/tokenization.html#simple-word-tokenization",
    "title": "Tokenization",
    "section": "",
    "text": "A key element for a computer to understand the words we speak or type is the concept of word tokenization. For a human, the sentence\n\nsentence = \"I love reading science fiction books or books about science.\"\n\nis easy to understand since we are able to split the sentence into its individual parts in order to figure out the meaning of the full sentence. For a computer, the sentence is just a simple string of characters, like any other word or longer text. In order to make a computer understand the meaning of a sentence, we need to help break it down into its relevant parts.\nSimply put, word tokenization is the process of breaking down a piece of text into individual words or so-called tokens. It is like taking a sentence and splitting it into smaller pieces, where each piece represents a word. Word tokenization involves analyzing the text character by character and identifying boundaries between words. It uses various rules and techniques to decide where one word ends and the next one begins. For example, spaces, punctuation marks, and special characters often serve as natural boundaries between words.\nSo let’s start breaking down the sentence into its individual parts.\n\ntokenized_sentence = sentence.split(\" \")\nprint(tokenized_sentence)\n\n['I', 'love', 'reading', 'science', 'fiction', 'books', 'or', 'books', 'about', 'science.']\n\n\nOnce we have tokenized the sentence, we can start analyzing it with some simple statistical methods. For example, in order to figure out what the sentence might be about, we could count the most frequent words.\n\nfrom collections import Counter\n\ntoken_counter = Counter(tokenized_sentence)\nprint(token_counter.most_common(2))\n\n[('books', 2), ('I', 1)]\n\n\nUnfortunately, we already realize that we have not done the best job with our “tokenizer”: The second occurrence of the word science is missing do to the punctuation. While this is great as it holds information about the ending of a sentence, it disturbs our analysis here, so let’s get rid of it.\n\ntokenized_sentence = sentence.replace(\".\", \" \").split(\" \")\n\ntoken_counter = Counter(tokenized_sentence)\nprint(token_counter.most_common(2))\n\n[('science', 2), ('books', 2)]\n\n\nSo that worked. As you can imagine, tokenization can get increasingly difficult when we have to deal with all sorts of situations in larger corpora of texts (see also the exercise). So it is great that there are already all sorts of libraries available that can help us with this process.\n\nfrom nltk.tokenize import wordpunct_tokenize\nfrom string import punctuation\n\ntokenized_sentence = wordpunct_tokenize(sentence)\ntokenized_sentence = [t for t in tokenized_sentence if t not in punctuation]\nprint(tokenized_sentence)\n\n['I', 'love', 'reading', 'science', 'fiction', 'books', 'or', 'books', 'about', 'science']",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Tokenization"
    ]
  },
  {
    "objectID": "nlp/tokenization.html#advanced-word-tokenization",
    "href": "nlp/tokenization.html#advanced-word-tokenization",
    "title": "Tokenization",
    "section": "Advanced word tokenization",
    "text": "Advanced word tokenization\nAs you can imagine, the idea of tokenization does not stop here, we have only touched the basic idea of it. As a general strategy, we can now start from our word tokens and refine the tokens in a way that we need. A classic problem arising with the token above is that we do not get word tokens in their standardized form. So if, for example, we were to take all our token together and use that as a dictionary, we would get two different token for every words that appears both in singular and plural form (with the added “s”). Or we would receive different tokens for every verb in different conjugations (for example, “speak”, “speaks”, and “spoken”). Depending on our task, a great idea is to try and find the basic form of each token, a process called lemmatization.\n\nLemmatization\nLemmatization is a natural language processing technique used to reduce words to their base or canonical form, known as the lemma. The lemma represents the dictionary form of a word and is typically a valid word that exists in the language. Lemmatization helps in standardizing words so that different forms of the same word are treated as one, simplifying text analysis and improving accuracy in tasks such as text classification, information retrieval, and sentiment analysis.\nUnlike stemming, which simply chops off prefixes or suffixes to derive the root form of a word (sometimes resulting in non-existent or incorrect forms), lemmatization considers the context of the word and applies linguistic rules to transform it into its lemma. This ensures that the resulting lemma is a valid word in the language and retains its semantic meaning.\nLemmatization involves part-of-speech tagging to determine the correct lemma for each word based on its role in the sentence. For example, the word “running” may be lemmatized to “run” as a verb, but to “running” as a noun. However, once we have lemmatized our text, we might lose some information due to the lost context.\nLuckily for us, there are already pre-built packages that we can use to try out lemmatization. Here is a quick example how to do it with nltk.\n\nfrom nltk.stem import WordNetLemmatizer\n\nsentence = \"The three brothers went over three big bridges\"\n\nwnl = WordNetLemmatizer()\n\nlemmatized_sentence_token = [\n    wnl.lemmatize(w, pos=\"n\") for w in sentence.split(\" \")\n]\n\nprint(lemmatized_sentence_token)\n\n['The', 'three', 'brother', 'went', 'over', 'three', 'big', 'bridge']\n\n\nSince we need to include the pos (part-of-speech) tag of each word and only choose a noun (n) here, the lemmatizer only takes care of nouns in the sentence. Let’s try it with verbs.\n\nlemmatized_sentence_token = [\n    wnl.lemmatize(w, pos=\"v\") for w in sentence.split(\" \")\n]\n\nprint(lemmatized_sentence_token)\n\n['The', 'three', 'brothers', 'go', 'over', 'three', 'big', 'bridge']\n\n\nThis works, however, we now encounter a different problem: The word bridges has been turned into bridge, since it exists also as the ver “to bridge”. So, as mentioned above, we need to involve some part of speech tagging in order to do it correctly. Let’s try to fix it manually.\n\npos_dict = {\n  \"brothers\": \"n\", \n  \"went\": \"v\",\n  \"big\": \"a\",\n  \"bridges\": \"n\"\n}\n\nlemmatized_sentence_token = []\nfor token in sentence.split(\" \"):\n    if token in pos_dict:\n        lemma = wnl.lemmatize(token, pos=pos_dict[token])\n    else: \n        lemma = token # leave as it is\n\n    lemmatized_sentence_token.append(lemma)\n\nprint(lemmatized_sentence_token)\n\n['The', 'three', 'brother', 'go', 'over', 'three', 'big', 'bridge']\n\n\nAgain, luckily there also some packages that we can use, spaCy is one example. Their models come with a lot of built-in functionality.\n\nimport spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ndoc = nlp(sentence)\n\nlemmatized_words = [(token.lemma_, token.pos_) for token in doc]\n\nprint(lemmatized_words)\n\n[('the', 'DET'), ('three', 'NUM'), ('brother', 'NOUN'), ('go', 'VERB'), ('over', 'ADP'), ('three', 'NUM'), ('big', 'ADJ'), ('bridge', 'NOUN')]\n\n\nNow that we have successfully lemmatized our document or text, we can start using the lemmas to do some further analysis. For example, we could build a dictionary and do some statistics on it. We will see more about that later.\n\n\nBit Pair Encoding\nThe above ideas illustrate well the idea of tokenization of splitting text into smaller chunks that we can feed to a language model. In practice, especially in models like GPT, a critical component is the vocabulary or the set of unique words or tokens the model understands. Traditional approaches use fixed-size vocabularies, which means every unique word in the corpus has its own representation (index or embedding) in the model’s vocabulary. However, as the vocabulary size increases (for example, by including more languages), so does the memory requirement, which can be impractical for large-scale language models. One solution is the so-called bit-pair encoding. Bit pair encoding is a data compression technique specifically designed to tackle the issue of large vocabularies in language models. Instead of assigning a unique index or embedding to each token, bit pair encoding identifies frequent pairs of characters (bits) within the corpus and represents them as a single token. This effectively reduces the size of the vocabulary while preserving the essential information needed for language modeling tasks.\n\nHow it works\n\nTokenization: The first step in bit pair encoding is tokenization, where the text corpus is broken down into individual tokens. These tokens could be characters, subwords, or words, depending on the tokenization strategy used.\nPair Identification: Next, the algorithm identifies pairs of characters (bits) that occur frequently within the corpus. These pairs are typically consecutive characters in the text.\nReplacement with Single Token: Once frequent pairs are identified, they are replaced with a single token. This effectively reduces the number of unique tokens in the vocabulary.\nIterative Process: The process of identifying frequent pairs and replacing them with single tokens is iterative. It continues until a predefined stopping criterion is met, such as reaching a target vocabulary size or when no more frequent pairs can be found.\nVocabulary Construction: After the iterative process, a vocabulary is constructed, consisting of the single tokens generated through pair replacement, along with any remaining tokens from the original tokenization process.\nEncoding and Decoding: During training and inference, text data is encoded using the constructed vocabulary, where each token is represented by its corresponding index in the vocabulary. During decoding, the indices are mapped back to their respective tokens.\n\n\n\n\n\n\n\nTip\n\n\n\nIt is very illustrative to use the the OpenAI tokenizer to see how a sentence is split up into different token. Try mixing languages and standard as well as more rare words and observe how they are split up.\nAnother detailed example can be found here.\n\n\n\n\nAdvantages of Bit Pair Encoding\n\nEfficient Memory Usage: Bit pair encoding significantly reduces the size of the vocabulary, leading to more efficient memory usage, especially in large-scale language models.\nRetains Information: Despite reducing the vocabulary size, bit pair encoding retains important linguistic information by capturing frequent character pairs.\nFlexible: Bit pair encoding is flexible and can be adapted to different tokenization strategies and corpus characteristics.\n\n\n\nLimitations and Considerations\n\nComputational Overhead: The iterative nature of bit pair encoding can be computationally intensive, especially for large corpora.\nLoss of Granularity: While bit pair encoding reduces vocabulary size, it may lead to a loss of granularity, especially for rare or out-of-vocabulary words.\nTokenization Strategy: The effectiveness of bit pair encoding depends on the tokenization strategy used and the characteristics of the corpus.\n\n\n\n\n\n\n\nTip\n\n\n\nFrom the OpenAI Guide:\nA helpful rule of thumb is that one token generally corresponds to ~4 characters of text for common English text. This translates to roughly ¾ of a word (so 100 tokens ~= 75 words).",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Tokenization"
    ]
  },
  {
    "objectID": "nlp/exercises/ex_fuzzy_matching.html",
    "href": "nlp/exercises/ex_fuzzy_matching.html",
    "title": "Exercise: Fuzzy matching",
    "section": "",
    "text": "Task: Write a function that helps finding the most similar words or tokens from a given list based on a user query using rapidfuzz.\nInstructions:\n\nWrite a Python function called find_similar_words(query, word_list) that takes a user query and a list of words or tokens as input.\nInside the function, use rapidfuzz to calculate the similarity between the query and each word/token in the list.\nReturn a list of tuples containing the word/token and its corresponding similarity score, sorted in descending order of similarity.\n\n\nword_list = [\"apple\", \"banana\", \"orange\", \"grape\", \"pineapple\", \"kiwi\"]\nquery = \"appl\"\n\n\n\nShow solution\n\n\n# Importing necessary packages\nfrom rapidfuzz import fuzz\n\ndef find_similar_words(query, word_list):\n    # Create an empty list to store word and similarity score tuples\n    similar_words = []\n    \n    # Loop through each word in the word_list\n    for word in word_list:\n        # Calculate the similarity score between the query and the current word\n        similarity = fuzz.ratio(query, word)\n        \n        # Append the word and its similarity score to the list\n        similar_words.append((word, similarity))\n    \n    # Sort the list of tuples based on similarity score in descending order\n    similar_words.sort(key=lambda x: x[1], reverse=True)\n    \n    # Return the sorted list of similar words\n    return similar_words\n\nsimilar_words = find_similar_words(query, word_list)\nprint(\"Similar words to '{}' are:\".format(query))\nfor word, similarity in similar_words:\n    print(\"{} (Similarity: {})\".format(word, round(similarity, 2)))\n\nSimilar words to 'appl' are:\napple (Similarity: 88.89)\npineapple (Similarity: 61.54)\ngrape (Similarity: 44.44)\nbanana (Similarity: 20.0)\norange (Similarity: 20.0)\nkiwi (Similarity: 0.0)\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Exercise: Fuzzy matching"
    ]
  },
  {
    "objectID": "nlp/exercises/ex_tfidf.html",
    "href": "nlp/exercises/ex_tfidf.html",
    "title": "Exercise: TF-IDF",
    "section": "",
    "text": "Task: Extend the code for the bag of words to TF-IDF (Term Frequency-Inverse Document Frequency) vectors for a given set of documents. TF-IDF is a statistical measure used to evaluate the importance of a word in a document relative to a collection of documents. This measure helps in identifying words that are unique and informative to a particular document while downweighting common words that appear across many documents.\nTF-IDF consists of two main components:\nTerm Frequency (TF): This component measures how frequently a term occurs in a document. It is calculated as the ratio of the count of a term in a document to the total number of terms in the document. TF is higher for words that occur more frequently within a document.\nTF(t) = (Number of times term t appears in a document) / (Total number of terms in the document)\nInverse Document Frequency (IDF): This component measures the rarity of a term across the entire corpus of documents. It is calculated as the logarithm of the ratio of the total number of documents to the number of documents containing the term, plus one. IDF is higher for terms that are rare across documents but present in only a few documents.\nIDF(t) = log((1 + Total number of documents) / (1 + Number of documents containing term t))\nThe TF-IDF score for a term in a document is obtained by multiplying its TF and IDF scores. This score reflects the importance of the term in the context of the document and the entire corpus.\nInstructions:\n\nImplement functions calculate_tf and calculate_idf to calculate Term Frequency (TF) and Inverse Document Frequency (IDF) respectively.\nWrite a create_tf_idf function to create TF-IDF vectors for a given set of documents. This function should count the frequency of each word in the corpus, calculate TF and IDF, and compute TF-IDF vectors for each document.\n\n\n\nShow solution\n\n\nfrom nltk.tokenize import wordpunct_tokenize\nfrom string import punctuation\nfrom typing import List\n\nfrom nltk.corpus import stopwords\n# python -m nltk.downloader stopwords -&gt; run this in your console once to get the stopwords\n\ndef preprocess_text(text: str) -&gt; List[str]:\n    # tokenize text\n    tokens = wordpunct_tokenize(text.lower())\n\n    # remove punctuation\n    tokens = [t for t in tokens if t not in punctuation]\n\n    # remove stopwords\n    stop_words = stopwords.words(\"english\")\n    tokens = [t for t in tokens if t not in stop_words]\n\n    return tokens\n\n\nfrom collections import Counter\nimport math\n\n\ndef calculate_tf(word_counts, total_words):\n    # Calculate Term Frequency (TF)\n    tf = {}\n    for word, count in word_counts.items():\n        tf[word] = count / total_words\n    return tf\n\ndef calculate_idf(word_counts, num_documents):\n    # Calculate Inverse Document Frequency (IDF)\n    idf = {}\n    for word, count in word_counts.items():\n        idf[word] = math.log((1 + num_documents) / (1 + count))\n    return idf\n\ndef create_tf_idf(texts):\n    # Count the frequency of each word in the corpus and total number of words\n    word_counts = Counter()\n    total_words = 0\n    for text in texts:\n        # Preprocess the text\n        words = preprocess_text(text)\n        \n        # Update word counts and total number of words\n        word_counts.update(words)\n        total_words += len(words)\n    \n    # Create sorted vocabulary\n    vocabulary = sorted(word_counts.keys())\n    \n    # Calculate TF-IDF for each document\n    tf_idf_vectors = []\n    num_documents = len(texts)\n    for text in texts:\n        # Preprocess the text\n        words = preprocess_text(text)\n        \n        # Calculate TF for the document\n        tf = calculate_tf(Counter(words), len(words))\n        \n        # Calculate IDF based on word counts across all documents\n        idf = calculate_idf(word_counts, num_documents)\n        \n        # Calculate TF-IDF for the document\n        tf_idf_vector = {}\n        for word in vocabulary:\n            tf_idf_vector[word] = round(tf.get(word, 0) * idf[word], 2)\n        \n        # Sort the IFIDF vector based on the vocabulary order\n        sorted_tfidf_vector = [tf_idf_vector[word] for word in vocabulary]\n        \n        # Append the BoW vector to the list\n        tf_idf_vectors.append(sorted_tfidf_vector)\n    \n    return vocabulary, tf_idf_vectors\n\n# Example texts\ntexts = [\n    \"This is the first document.\",\n    \"This document is the second document.\",\n    \"And this is the third one.\",\n    \"Is this the first document?\",\n]\n\n# Create TF-IDF vectors\nvocabulary, tf_idf_vectors = create_tf_idf(texts)\n\n# Print vocabulary\nprint(\"Vocabulary:\")\nprint(vocabulary)\n\n# Print TF-IDF vectors\nprint(\"\\nTF-IDF Vectors:\")\nfor i, tf_idf_vector in enumerate(tf_idf_vectors):\n    print(f\"Document {i + 1}: {tf_idf_vector}\")\n\nVocabulary:\n['document', 'first', 'one', 'second', 'third']\n\nTF-IDF Vectors:\nDocument 1: [0.0, 0.26, 0.0, 0.0, 0.0]\nDocument 2: [0.0, 0.0, 0.0, 0.31, 0.0]\nDocument 3: [0.0, 0.0, 0.46, 0.0, 0.46]\nDocument 4: [0.0, 0.26, 0.0, 0.0, 0.0]\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Exercise: TF-IDF"
    ]
  },
  {
    "objectID": "nlp/fuzzy_matching.html",
    "href": "nlp/fuzzy_matching.html",
    "title": "Fuzzy matching",
    "section": "",
    "text": "As can be seen from the previous example, the detection of certain keywords from a text can prove more difficult than one might expect. The key issues stem from the fact that natural language has many facets such as conjugation, singular and plural forms, adjectives vs. adverbs etc. But even when these are handled, there remain challenges for keywords detection. In the previous example, our detection still fails when:\n\nkeywords consist of multiple words (product portfolio),\nkeywords have different forms but mean the same (advertisment vs. advertising),\nkeywords have wrong spelling (langscpe vs. landscape),\nkeywords and target words are not exactly the same thing but closely related (analysis vs. analyst).\n\nThe former case can be handled by using so called n-grams. In contrast to the single words we used for word tokens, n-grams are sequences of n consecutive words in a text, thus capturing some more of the context in a simple way. Let’s see a simple example for 2-grams:\n\nfrom nltk import ngrams\n\nsentence = \"The CEO announced plans to diversify the company's product portfolio...\"\n\nfor n_gram in ngrams(sentence.split(\" \"), n=2):\n  print(n_gram)\n\n('The', 'CEO')\n('CEO', 'announced')\n('announced', 'plans')\n('plans', 'to')\n('to', 'diversify')\n('diversify', 'the')\n('the', \"company's\")\n(\"company's\", 'product')\n('product', 'portfolio...')\n\n\nIn order to detect keywords consisting of more than a single word we can now split our text into n-grams for different n(e.g., 2, 3, 4) and compare these to our keywords.\nIn order to handle the other three cases, we a different approach. So let us first notice that, for all three cases, the word we are trying to compare are very similar (in terms of the contained letters) but not exactly equal. So what if we had a way to define a similarity between words and texts or, more generally, between any strings? One solution for this is fuzzy matching. Instead of considering two strings a match if they are exactly equal, fuzzy matching assigns a score to the pair. If the score is high enough, we might consider the pair a match.\n\n\nSome details about fuzzy matching\n\nFuzzy string matching is a technique used to find strings that are approximately similar to a given pattern, even if there are differences in spelling, punctuation, or word order. It is particularly useful in situations where exact string matching is not feasible due to variations or errors in the data. Fuzzy matching algorithms compute a similarity score between pairs of strings, typically based on criteria such as character similarity, substring matching, or token-based similarity. These algorithms often employ techniques like Levenshtein distance, which measures the minimum number of single-character edits required to transform one string into another, or tokenization to compare sets or sorted versions of tokens. Overall, fuzzy string matching enables the identification of similar strings, facilitating tasks such as record linkage, spell checking, and approximate string matching in various applications, including natural language processing, data cleaning, and information retrieval.\n\nLet’s see how this works using the package rapidfuzz.\n\nfrom rapidfuzz import fuzz\n\nword_pairs = [\n  (\"advertisment\", \"advertising\"),\n  (\"landscpe\", \"landscape\"),\n  (\"analysis\", \"analyst\")\n]\n\nfor word_pair in word_pairs:\n  ratio = fuzz.ratio(\n    s1=word_pair[0], \n    s2=word_pair[1]\n  )\n  print(f\"Similarity score '{word_pair[0]} - '{word_pair[1]}': {round(ratio, 2)}.\")\n\nSimilarity score 'advertisment - 'advertising': 78.26.\nSimilarity score 'landscpe - 'landscape': 94.12.\nSimilarity score 'analysis - 'analyst': 80.0.\n\n\nLet us use fuzzy matching on order to detect some of the missing keywords from the previous example.\n\nfrom pprint import pprint\nfrom nltk.tokenize import wordpunct_tokenize\n\ntokenized_text = wordpunct_tokenize(text=text)\n\nmin_score = 75\n\nmatches = []\nfor token in tokenized_text:\n  for keyword in keywords:\n    ratio = fuzz.ratio(\n      s1=token.lower(), \n      s2=keyword.lower()\n    )\n    if ratio &gt;= min_score:\n      matches.append(\n        (keyword, token, round(ratio, 2))\n      )\n\npprint(matches)\n\n[('Quarter', 'quarterly', 87.5),\n ('Earnings', 'earnings', 100.0),\n ('Report', 'reports', 92.31),\n ('Analysis', 'analysts', 87.5),\n ('Stock', 'stock', 100.0),\n ('Investor', 'investor', 100.0),\n ('Announce', 'announced', 94.12),\n ('Diversity', 'diversify', 88.89),\n ('Market', 'markets', 92.31),\n ('Market', 'marketing', 80.0),\n ('Advertisment', 'advertising', 78.26),\n ('Landscpe', 'landscape', 94.12)]\n\n\nAs we can see we have now successfully found most of the keywords we were looking for. However, we can also see a new caveat: We have now detected two possible matches for Market: Marketing and Markets. In this case, we can simply pick the one with the higher score and we are good, but there will be cases where it is more difficult to decide, whether a match, even with a higher score, is actually a match.\nFuzzy matching can, of course, also be used to compare n-grams or even entire texts to each other (see also the documentation of rapidfuzz and the next exercise); however there are certain limits to how practical it can be. But the concept in general already gives us some good evidence that, in order to compare words and text to each other, we would like to be able to somehow calculate with text. In the next sections, we will see ways how to do that more efficiently.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Seminar",
      "Natural Language Processing",
      "Fuzzy matching"
    ]
  }
]